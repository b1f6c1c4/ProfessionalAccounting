using System;
using System.Globalization;

namespace AccountingServer.BLL
{
    /// <summary>
    ///     格式化数据
    /// </summary>
    public static class DataFormatter
    {
        /// <summary>
        ///     格式化金额
        /// </summary>
        /// <param name="value">金额</param>
        /// <returns>格式化后的金额</returns>
        public static string AsCurrency(this double value)
        {
            var s = String.Format("￥{0:0.0000}", value);
            return s.TrimEnd('0').PadRight(s.Length);
        }

        /// <summary>
        ///     格式化金额
        /// </summary>
        /// <param name="value">金额</param>
        /// <returns>格式化后的金额</returns>
        public static string AsFullCurrency(this double value)
        {
            return String.Format("￥{0:0.0000}", value);
        }

        /// <summary>
        ///     格式化金额
        /// </summary>
        /// <param name="value">金额</param>
        /// <returns>格式化后的金额</returns>
        public static string AsCurrency(this double? value)
        {
            return value.HasValue ? AsCurrency(value.Value) : String.Empty;
        }

        /// <summary>
        ///     格式化金额
        /// </summary>
        /// <param name="value">金额</param>
        /// <returns>格式化后的金额</returns>
        public static string AsFullCurrency(this double? value)
        {
            return value.HasValue ? AsFullCurrency(value.Value) : String.Empty;
        }

        /// <summary>
        ///     格式化金额（不含符号）
        /// </summary>
        /// <param name="value">金额</param>
        /// <returns>格式化后的金额</returns>
        public static string AsPureCurrency(this double value)
        {
            return String.Format("{0:0.0000}", value);
        }

        /// <summary>
        ///     格式化金额（不含符号）
        /// </summary>
        /// <param name="value">金额</param>
        /// <returns>格式化后的金额</returns>
        public static string AsPureCurrency(this double? value)
        {
            return value.HasValue ? AsPureCurrency(value.Value) : String.Empty;
        }


        /// <summary>
        ///     格式化一级科目编号
        /// </summary>
        /// <param name="value">一级科目编号</param>
        /// <returns>格式化后的编号</returns>
        public static string AsTitle(this int value)
        {
            return String.Format("{0:0000}", value);
        }

        /// <summary>
        ///     格式化一级科目编号
        /// </summary>
        /// <param name="value">一级科目编号</param>
        /// <returns>格式化后的编号</returns>
        public static string AsTitle(this int? value)
        {
            return value.HasValue ? AsTitle(value.Value) : String.Empty;
        }

        /// <summary>
        ///     格式化二级科目编号
        /// </summary>
        /// <param name="value">二级科目编号</param>
        /// <returns>格式化后的编号</returns>
        public static string AsSubTitle(this int? value)
        {
            return value.HasValue ? AsSubTitle(value.Value) : String.Empty;
        }

        /// <summary>
        ///     格式化二级科目编号
        /// </summary>
        /// <param name="value">二级科目编号</param>
        /// <returns>格式化后的编号</returns>
        public static string AsSubTitle(this int value)
        {
            return String.Format("{0:00}", value);
        }


        /// <summary>
        ///     格式化日期
        /// </summary>
        /// <param name="value">日期</param>
        /// <returns>格式化后的日期</returns>
        public static string AsDate(this DateTime value)
        {
            return String.Format("{0:yyyyMMdd}", value);
        }

        /// <summary>
        ///     格式化日期
        /// </summary>
        /// <param name="value">日期</param>
        /// <returns>格式化后的日期</returns>
        public static string AsDate(this DateTime? value)
        {
            return value.HasValue ? AsDate(value.Value) : "无日期";
        }

        /// <summary>
        ///     解析日期
        /// </summary>
        /// <param name="value">格式化后的日期</param>
        /// <returns>日期</returns>
        public static DateTime? AsDate(this string value)
        {
            DateTime val;
            if (DateTime.TryParseExact(value, "yyyyMMdd", null, DateTimeStyles.AllowWhiteSpaces, out val))
                return val;
            return null;
        }

        /// <summary>
        ///     解析金额
        /// </summary>
        /// <param name="value">格式化后的金额</param>
        /// <returns>金额</returns>
        public static double? AsCurrency(this string value)
        {
            double val;
            if (double.TryParse(value, out val))
                return val;
            return null;
        }

        /// <summary>
        ///     解析科目编号
        /// </summary>
        /// <param name="value">格式化后的编号</param>
        /// <returns>编号</returns>
        public static int? AsTitleOrSubTitle(this string value)
        {
            int val;
            if (Int32.TryParse(value, out val))
                return val;
            return null;
        }
    }
}
