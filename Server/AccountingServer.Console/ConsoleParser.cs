//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.4.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\b1f6c1c4\Documents\GitHub\ProfessionalAccounting\Server\AccountingServer.QueryGeneration\Console.g4 by ANTLR 4.4.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace AccountingServer.Console {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.4.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class ConsoleParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, Launch=26, Connect=27, Shutdown=28, Backup=29, Mobile=30, Fetch=31, 
		Help=32, Titles=33, Exit=34, Check=35, EditNamedQueries=36, AOAll=37, 
		AOList=38, AOQuery=39, AORegister=40, AOUnregister=41, ARedep=42, OReamo=43, 
		AOResetSoft=44, AOResetHard=45, AOApply=46, AOCollapse=47, AOCheck=48, 
		SubtotalFields=49, Guid=50, RangeNull=51, RangeAllNotNull=52, RangeAYear=53, 
		RangeAMonth=54, RangeDeltaMonth=55, RangeADay=56, RangeDeltaDay=57, RangeDeltaWeek=58, 
		VoucherType=59, PercentQuotedString=60, DollarQuotedString=61, DoubleQuotedString=62, 
		SingleQuotedString=63, DetailTitle=64, DetailTitleSubTitle=65, Float=66, 
		Percent=67, Intersect=68, Union=69, Substract=70, WS=71;
	public const int
		RULE_command = 0, RULE_otherCommand = 1, RULE_chart = 2, RULE_namedQuery = 3, 
		RULE_namedQueries = 4, RULE_namedQ = 5, RULE_namedQueryReference = 6, 
		RULE_name = 7, RULE_coef = 8, RULE_groupedQuery = 9, RULE_subtotal = 10, 
		RULE_subtotalAggr = 11, RULE_voucherDetailQuery = 12, RULE_emit = 13, 
		RULE_vouchers = 14, RULE_vouchersB = 15, RULE_voucherQuery = 16, RULE_details = 17, 
		RULE_detailQuery = 18, RULE_range = 19, RULE_rangeCore = 20, RULE_rangePoint = 21, 
		RULE_rangeCertainPoint = 22, RULE_rangeYear = 23, RULE_rangeMonth = 24, 
		RULE_rangeWeek = 25, RULE_rangeDay = 26, RULE_asset = 27, RULE_assetList = 28, 
		RULE_assetQuery = 29, RULE_assetRegister = 30, RULE_assetUnregister = 31, 
		RULE_assetRedep = 32, RULE_assetResetSoft = 33, RULE_assetResetHard = 34, 
		RULE_assetApply = 35, RULE_assetCheck = 36, RULE_amort = 37, RULE_amortList = 38, 
		RULE_amortQuery = 39, RULE_amortRegister = 40, RULE_amortUnregister = 41, 
		RULE_amortReamo = 42, RULE_amortResetSoft = 43, RULE_amortApply = 44, 
		RULE_amortCheck = 45, RULE_distributedQ = 46, RULE_distributedQAtom = 47;
	public static readonly string[] ruleNames = {
		"command", "otherCommand", "chart", "namedQuery", "namedQueries", "namedQ", 
		"namedQueryReference", "name", "coef", "groupedQuery", "subtotal", "subtotalAggr", 
		"voucherDetailQuery", "emit", "vouchers", "vouchersB", "voucherQuery", 
		"details", "detailQuery", "range", "rangeCore", "rangePoint", "rangeCertainPoint", 
		"rangeYear", "rangeMonth", "rangeWeek", "rangeDay", "asset", "assetList", 
		"assetQuery", "assetRegister", "assetUnregister", "assetRedep", "assetResetSoft", 
		"assetResetHard", "assetApply", "assetCheck", "amort", "amortList", "amortQuery", 
		"amortRegister", "amortUnregister", "amortReamo", "amortResetSoft", "amortApply", 
		"amortCheck", "distributedQ", "distributedQAtom"
	};

	private static readonly string[] _LiteralNames = {
		null, "'ch'", "':'", "'|'", "';'", "'`'", "'``'", "'D'", "'[]'", "'['", 
		"']'", "'A'", "'{'", "'}'", "'E'", "'('", "')'", "'>'", "'<'", "'~'", 
		"'@'", "'#'", "'a'", "'o'", "'[['", "']]'", null, null, null, "'backup'", 
		null, "'fetch'", null, null, "'exit'", null, "'nq'", "'-all'", null, null, 
		null, null, null, null, "'-reset-soft'", "'-reset-hard'", null, null, 
		"'-chk'", null, null, "'null'", "'~null'", null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "'*'", "'+'", 
		"'-'", "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "Launch", "Connect", "Shutdown", "Backup", "Mobile", "Fetch", 
		"Help", "Titles", "Exit", "Check", "EditNamedQueries", "AOAll", "AOList", 
		"AOQuery", "AORegister", "AOUnregister", "ARedep", "OReamo", "AOResetSoft", 
		"AOResetHard", "AOApply", "AOCollapse", "AOCheck", "SubtotalFields", "Guid", 
		"RangeNull", "RangeAllNotNull", "RangeAYear", "RangeAMonth", "RangeDeltaMonth", 
		"RangeADay", "RangeDeltaDay", "RangeDeltaWeek", "VoucherType", "PercentQuotedString", 
		"DollarQuotedString", "DoubleQuotedString", "SingleQuotedString", "DetailTitle", 
		"DetailTitleSubTitle", "Float", "Percent", "Intersect", "Union", "Substract", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Console.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }


		protected const int EOF = Eof;

	public ConsoleParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CommandContext : ParserRuleContext {
		public NamedQueryContext namedQuery() {
			return GetRuleContext<NamedQueryContext>(0);
		}
		public AssetContext asset() {
			return GetRuleContext<AssetContext>(0);
		}
		public GroupedQueryContext groupedQuery() {
			return GetRuleContext<GroupedQueryContext>(0);
		}
		public AmortContext amort() {
			return GetRuleContext<AmortContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(ConsoleParser.Eof, 0); }
		public OtherCommandContext otherCommand() {
			return GetRuleContext<OtherCommandContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_command);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 96; vouchers();
				}
				break;

			case 2:
				{
				State = 97; groupedQuery();
				}
				break;

			case 3:
				{
				State = 98; namedQuery();
				}
				break;

			case 4:
				{
				State = 99; asset();
				}
				break;

			case 5:
				{
				State = 100; amort();
				}
				break;

			case 6:
				{
				State = 101; otherCommand();
				}
				break;
			}
			State = 104; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherCommandContext : ParserRuleContext {
		public ITerminalNode Connect() { return GetToken(ConsoleParser.Connect, 0); }
		public ITerminalNode Backup() { return GetToken(ConsoleParser.Backup, 0); }
		public ITerminalNode EditNamedQueries() { return GetToken(ConsoleParser.EditNamedQueries, 0); }
		public ITerminalNode Shutdown() { return GetToken(ConsoleParser.Shutdown, 0); }
		public ITerminalNode Fetch() { return GetToken(ConsoleParser.Fetch, 0); }
		public ITerminalNode Mobile() { return GetToken(ConsoleParser.Mobile, 0); }
		public ITerminalNode Help() { return GetToken(ConsoleParser.Help, 0); }
		public ITerminalNode Check() { return GetToken(ConsoleParser.Check, 0); }
		public ITerminalNode Launch() { return GetToken(ConsoleParser.Launch, 0); }
		public ITerminalNode Exit() { return GetToken(ConsoleParser.Exit, 0); }
		public ITerminalNode Titles() { return GetToken(ConsoleParser.Titles, 0); }
		public OtherCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherCommand; } }
	}

	[RuleVersion(0)]
	public OtherCommandContext otherCommand() {
		OtherCommandContext _localctx = new OtherCommandContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_otherCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Launch) | (1L << Connect) | (1L << Shutdown) | (1L << Backup) | (1L << Mobile) | (1L << Fetch) | (1L << Help) | (1L << Titles) | (1L << Exit) | (1L << Check) | (1L << EditNamedQueries))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChartContext : ParserRuleContext {
		public NamedQueryContext namedQuery() {
			return GetRuleContext<NamedQueryContext>(0);
		}
		public ChartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chart; } }
	}

	[RuleVersion(0)]
	public ChartContext chart() {
		ChartContext _localctx = new ChartContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_chart);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; Match(T__0);
			State = 109; namedQuery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedQueryContext : ParserRuleContext {
		public NamedQContext namedQ() {
			return GetRuleContext<NamedQContext>(0);
		}
		public NamedQueryReferenceContext namedQueryReference() {
			return GetRuleContext<NamedQueryReferenceContext>(0);
		}
		public NamedQueriesContext namedQueries() {
			return GetRuleContext<NamedQueriesContext>(0);
		}
		public NamedQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedQuery; } }
	}

	[RuleVersion(0)]
	public NamedQueryContext namedQuery() {
		NamedQueryContext _localctx = new NamedQueryContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_namedQuery);
		try {
			State = 114;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 111; namedQueries();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 112; namedQ();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 113; namedQueryReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedQueriesContext : ParserRuleContext {
		public CoefContext coef() {
			return GetRuleContext<CoefContext>(0);
		}
		public IReadOnlyList<NamedQueryContext> namedQuery() {
			return GetRuleContexts<NamedQueryContext>();
		}
		public ITerminalNode DoubleQuotedString() { return GetToken(ConsoleParser.DoubleQuotedString, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NamedQueryContext namedQuery(int i) {
			return GetRuleContext<NamedQueryContext>(i);
		}
		public NamedQueriesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedQueries; } }
	}

	[RuleVersion(0)]
	public NamedQueriesContext namedQueries() {
		NamedQueriesContext _localctx = new NamedQueriesContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_namedQueries);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; name();
			State = 118;
			_la = _input.La(1);
			if (_la==Intersect) {
				{
				State = 117; coef();
				}
			}

			State = 122;
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				State = 120; Match(T__1);
				State = 121; Match(DoubleQuotedString);
				}
				break;
			}
			State = 124; Match(T__1);
			State = 125; namedQuery();
			State = 128;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 126; Match(T__2);
					State = 127; namedQuery();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 130;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedQContext : ParserRuleContext {
		public CoefContext coef() {
			return GetRuleContext<CoefContext>(0);
		}
		public GroupedQueryContext groupedQuery() {
			return GetRuleContext<GroupedQueryContext>(0);
		}
		public ITerminalNode DoubleQuotedString() { return GetToken(ConsoleParser.DoubleQuotedString, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NamedQContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedQ; } }
	}

	[RuleVersion(0)]
	public NamedQContext namedQ() {
		NamedQContext _localctx = new NamedQContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_namedQ);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132; name();
			State = 134;
			_la = _input.La(1);
			if (_la==Intersect) {
				{
				State = 133; coef();
				}
			}

			State = 138;
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 136; Match(T__1);
				State = 137; Match(DoubleQuotedString);
				}
				break;
			}
			State = 140; Match(T__1);
			State = 141; groupedQuery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedQueryReferenceContext : ParserRuleContext {
		public CoefContext coef() {
			return GetRuleContext<CoefContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NamedQueryReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedQueryReference; } }
	}

	[RuleVersion(0)]
	public NamedQueryReferenceContext namedQueryReference() {
		NamedQueryReferenceContext _localctx = new NamedQueryReferenceContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_namedQueryReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; name();
			State = 145;
			_la = _input.La(1);
			if (_la==Intersect) {
				{
				State = 144; coef();
				}
			}

			State = 147; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public ITerminalNode DollarQuotedString() { return GetToken(ConsoleParser.DollarQuotedString, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149; Match(DollarQuotedString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CoefContext : ParserRuleContext {
		public ITerminalNode Percent() { return GetToken(ConsoleParser.Percent, 0); }
		public ITerminalNode Float() { return GetToken(ConsoleParser.Float, 0); }
		public CoefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coef; } }
	}

	[RuleVersion(0)]
	public CoefContext coef() {
		CoefContext _localctx = new CoefContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_coef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151; Match(Intersect);
			State = 152;
			_la = _input.La(1);
			if ( !(_la==Float || _la==Percent) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupedQueryContext : ParserRuleContext {
		public SubtotalContext subtotal() {
			return GetRuleContext<SubtotalContext>(0);
		}
		public VoucherDetailQueryContext voucherDetailQuery() {
			return GetRuleContext<VoucherDetailQueryContext>(0);
		}
		public GroupedQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupedQuery; } }
	}

	[RuleVersion(0)]
	public GroupedQueryContext groupedQuery() {
		GroupedQueryContext _localctx = new GroupedQueryContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_groupedQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154; voucherDetailQuery();
			State = 155; subtotal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtotalContext : ParserRuleContext {
		public IToken SubtotalMark;
		public ITerminalNode SubtotalFields() { return GetToken(ConsoleParser.SubtotalFields, 0); }
		public SubtotalAggrContext subtotalAggr() {
			return GetRuleContext<SubtotalAggrContext>(0);
		}
		public SubtotalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtotal; } }
	}

	[RuleVersion(0)]
	public SubtotalContext subtotal() {
		SubtotalContext _localctx = new SubtotalContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_subtotal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			_localctx.SubtotalMark = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==T__4 || _la==T__5) ) {
				_localctx.SubtotalMark = _errHandler.RecoverInline(this);
			}
			Consume();
			State = 159;
			_la = _input.La(1);
			if (_la==SubtotalFields) {
				{
				State = 158; Match(SubtotalFields);
				}
			}

			State = 162;
			_la = _input.La(1);
			if (_la==T__6) {
				{
				State = 161; subtotalAggr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtotalAggrContext : ParserRuleContext {
		public IToken IsAll;
		public RangeCoreContext rangeCore() {
			return GetRuleContext<RangeCoreContext>(0);
		}
		public SubtotalAggrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtotalAggr; } }
	}

	[RuleVersion(0)]
	public SubtotalAggrContext subtotalAggr() {
		SubtotalAggrContext _localctx = new SubtotalAggrContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_subtotalAggr);
		int _la;
		try {
			State = 173;
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 164; Match(T__6);
				State = 166;
				_la = _input.La(1);
				if (_la==T__7) {
					{
					State = 165; _localctx.IsAll = Match(T__7);
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 168; Match(T__6);
				State = 169; Match(T__8);
				State = 170; rangeCore();
				State = 171; Match(T__9);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoucherDetailQueryContext : ParserRuleContext {
		public VoucherQueryContext voucherQuery() {
			return GetRuleContext<VoucherQueryContext>(0);
		}
		public EmitContext emit() {
			return GetRuleContext<EmitContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public VoucherDetailQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voucherDetailQuery; } }
	}

	[RuleVersion(0)]
	public VoucherDetailQueryContext voucherDetailQuery() {
		VoucherDetailQueryContext _localctx = new VoucherDetailQueryContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_voucherDetailQuery);
		try {
			State = 179;
			switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 175; vouchers();
				State = 176; emit();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 178; voucherQuery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmitContext : ParserRuleContext {
		public IToken Op;
		public DetailsContext details() {
			return GetRuleContext<DetailsContext>(0);
		}
		public EmitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emit; } }
	}

	[RuleVersion(0)]
	public EmitContext emit() {
		EmitContext _localctx = new EmitContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_emit);
		try {
			State = 184;
			switch (_input.La(1)) {
			case T__10:
				EnterOuterAlt(_localctx, 1);
				{
				State = 181; _localctx.Op = Match(T__10);
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 182; Match(T__1);
				State = 183; details(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VouchersContext : ParserRuleContext {
		public VoucherQueryContext voucherQuery() {
			return GetRuleContext<VoucherQueryContext>(0);
		}
		public VouchersBContext vouchersB() {
			return GetRuleContext<VouchersBContext>(0);
		}
		public VouchersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vouchers; } }
	}

	[RuleVersion(0)]
	public VouchersContext vouchers() {
		VouchersContext _localctx = new VouchersContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_vouchers);
		try {
			State = 188;
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 186; vouchersB(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 187; voucherQuery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VouchersBContext : ParserRuleContext {
		public IToken Op;
		public VouchersBContext vouchersB(int i) {
			return GetRuleContext<VouchersBContext>(i);
		}
		public VoucherQueryContext voucherQuery() {
			return GetRuleContext<VoucherQueryContext>(0);
		}
		public IReadOnlyList<VouchersBContext> vouchersB() {
			return GetRuleContexts<VouchersBContext>();
		}
		public VouchersBContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vouchersB; } }
	}

	[RuleVersion(0)]
	public VouchersBContext vouchersB() {
		return vouchersB(0);
	}

	private VouchersBContext vouchersB(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		VouchersBContext _localctx = new VouchersBContext(_ctx, _parentState);
		VouchersBContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_vouchersB, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				{
				State = 191;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==Union || _la==Substract) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 192; vouchersB(3);
				}
				break;

			case 2:
				{
				State = 193; Match(T__11);
				State = 194; voucherQuery();
				State = 195; Match(T__12);
				}
				break;

			case 3:
				{
				State = 197; Match(T__11);
				State = 198; vouchersB(0);
				State = 199; Match(T__12);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 211;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 209;
					switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
					case 1:
						{
						_localctx = new VouchersBContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_vouchersB);
						State = 203;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 204; _localctx.Op = Match(Intersect);
						State = 205; vouchersB(6);
						}
						break;

					case 2:
						{
						_localctx = new VouchersBContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_vouchersB);
						State = 206;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 207;
						_localctx.Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==Union || _la==Substract) ) {
							_localctx.Op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 208; vouchersB(5);
						}
						break;
					}
					} 
				}
				State = 213;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VoucherQueryContext : ParserRuleContext {
		public IToken Op;
		public ITerminalNode DollarQuotedString() { return GetToken(ConsoleParser.DollarQuotedString, 0); }
		public ITerminalNode PercentQuotedString() { return GetToken(ConsoleParser.PercentQuotedString, 0); }
		public DetailsContext details() {
			return GetRuleContext<DetailsContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode VoucherType() { return GetToken(ConsoleParser.VoucherType, 0); }
		public VoucherQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voucherQuery; } }
	}

	[RuleVersion(0)]
	public VoucherQueryContext voucherQuery() {
		VoucherQueryContext _localctx = new VoucherQueryContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_voucherQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				{
				State = 214; details(0);
				}
				break;
			}
			State = 218;
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				{
				State = 217;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__10 || _la==T__13) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 221;
			_la = _input.La(1);
			if (((((_la - 8)) & ~0x3f) == 0 && ((1L << (_la - 8)) & ((1L << (T__7 - 8)) | (1L << (T__8 - 8)) | (1L << (T__18 - 8)) | (1L << (T__19 - 8)) | (1L << (T__20 - 8)) | (1L << (RangeNull - 8)) | (1L << (RangeAllNotNull - 8)) | (1L << (RangeAYear - 8)) | (1L << (RangeAMonth - 8)) | (1L << (RangeDeltaMonth - 8)) | (1L << (RangeADay - 8)) | (1L << (RangeDeltaDay - 8)) | (1L << (RangeDeltaWeek - 8)) | (1L << (Substract - 8)))) != 0)) {
				{
				State = 220; range();
				}
			}

			State = 224;
			_la = _input.La(1);
			if (_la==DollarQuotedString) {
				{
				State = 223; Match(DollarQuotedString);
				}
			}

			State = 227;
			_la = _input.La(1);
			if (_la==PercentQuotedString) {
				{
				State = 226; Match(PercentQuotedString);
				}
			}

			State = 230;
			_la = _input.La(1);
			if (_la==VoucherType) {
				{
				State = 229; Match(VoucherType);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DetailsContext : ParserRuleContext {
		public IToken Op;
		public DetailsContext details(int i) {
			return GetRuleContext<DetailsContext>(i);
		}
		public IReadOnlyList<DetailsContext> details() {
			return GetRuleContexts<DetailsContext>();
		}
		public DetailQueryContext detailQuery() {
			return GetRuleContext<DetailQueryContext>(0);
		}
		public DetailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_details; } }
	}

	[RuleVersion(0)]
	public DetailsContext details() {
		return details(0);
	}

	private DetailsContext details(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		DetailsContext _localctx = new DetailsContext(_ctx, _parentState);
		DetailsContext _prevctx = _localctx;
		int _startState = 34;
		EnterRecursionRule(_localctx, 34, RULE_details, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			switch ( Interpreter.AdaptivePredict(_input,24,_ctx) ) {
			case 1:
				{
				State = 233;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==Union || _la==Substract) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 234; details(3);
				}
				break;

			case 2:
				{
				State = 235; detailQuery();
				}
				break;

			case 3:
				{
				State = 236; Match(T__14);
				State = 237; details(0);
				State = 238; Match(T__15);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 250;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,26,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 248;
					switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
					case 1:
						{
						_localctx = new DetailsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_details);
						State = 242;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 243; _localctx.Op = Match(Intersect);
						State = 244; details(6);
						}
						break;

					case 2:
						{
						_localctx = new DetailsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_details);
						State = 245;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 246;
						_localctx.Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==Union || _la==Substract) ) {
							_localctx.Op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 247; details(5);
						}
						break;
					}
					} 
				}
				State = 252;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,26,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DetailQueryContext : ParserRuleContext {
		public IToken Direction;
		public ITerminalNode DetailTitleSubTitle() { return GetToken(ConsoleParser.DetailTitleSubTitle, 0); }
		public ITerminalNode DoubleQuotedString() { return GetToken(ConsoleParser.DoubleQuotedString, 0); }
		public ITerminalNode SingleQuotedString() { return GetToken(ConsoleParser.SingleQuotedString, 0); }
		public ITerminalNode DetailTitle() { return GetToken(ConsoleParser.DetailTitle, 0); }
		public DetailQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_detailQuery; } }
	}

	[RuleVersion(0)]
	public DetailQueryContext detailQuery() {
		DetailQueryContext _localctx = new DetailQueryContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_detailQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
			case 1:
				{
				State = 253;
				_la = _input.La(1);
				if ( !(_la==DetailTitle || _la==DetailTitleSubTitle) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 257;
			switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
			case 1:
				{
				State = 256; Match(SingleQuotedString);
				}
				break;
			}
			State = 260;
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				State = 259; Match(DoubleQuotedString);
				}
				break;
			}
			State = 263;
			switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				State = 262;
				_localctx.Direction = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__16 || _la==T__17) ) {
					_localctx.Direction = _errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public RangeCoreContext Core;
		public RangeCoreContext rangeCore() {
			return GetRuleContext<RangeCoreContext>(0);
		}
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_range);
		try {
			State = 271;
			switch (_input.La(1)) {
			case T__7:
				EnterOuterAlt(_localctx, 1);
				{
				State = 265; Match(T__7);
				}
				break;
			case T__18:
			case T__19:
			case T__20:
			case RangeNull:
			case RangeAllNotNull:
			case RangeAYear:
			case RangeAMonth:
			case RangeDeltaMonth:
			case RangeADay:
			case RangeDeltaDay:
			case RangeDeltaWeek:
			case Substract:
				EnterOuterAlt(_localctx, 2);
				{
				State = 266; _localctx.Core = rangeCore();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 3);
				{
				State = 267; Match(T__8);
				State = 268; _localctx.Core = rangeCore();
				State = 269; Match(T__9);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeCoreContext : ParserRuleContext {
		public RangeCertainPointContext Begin;
		public RangeCertainPointContext End;
		public IToken Op;
		public RangeCertainPointContext Certain;
		public ITerminalNode RangeNull() { return GetToken(ConsoleParser.RangeNull, 0); }
		public RangeCertainPointContext rangeCertainPoint(int i) {
			return GetRuleContext<RangeCertainPointContext>(i);
		}
		public ITerminalNode RangeAllNotNull() { return GetToken(ConsoleParser.RangeAllNotNull, 0); }
		public IReadOnlyList<RangeCertainPointContext> rangeCertainPoint() {
			return GetRuleContexts<RangeCertainPointContext>();
		}
		public RangeCoreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeCore; } }
	}

	[RuleVersion(0)]
	public RangeCoreContext rangeCore() {
		RangeCoreContext _localctx = new RangeCoreContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_rangeCore);
		int _la;
		try {
			State = 283;
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 273; Match(RangeNull);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 274; Match(RangeAllNotNull);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 275; _localctx.Begin = rangeCertainPoint();
				State = 276;
				_la = _input.La(1);
				if ( !(_la==T__18 || _la==Substract) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 278;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__19) | (1L << T__20) | (1L << RangeAYear) | (1L << RangeAMonth) | (1L << RangeDeltaMonth) | (1L << RangeADay) | (1L << RangeDeltaDay) | (1L << RangeDeltaWeek))) != 0)) {
					{
					State = 277; _localctx.End = rangeCertainPoint();
					}
				}

				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 280;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__18 || _la==Substract) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 281; _localctx.End = rangeCertainPoint();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 282; _localctx.Certain = rangeCertainPoint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangePointContext : ParserRuleContext {
		public IToken All;
		public ITerminalNode RangeNull() { return GetToken(ConsoleParser.RangeNull, 0); }
		public RangeCertainPointContext rangeCertainPoint() {
			return GetRuleContext<RangeCertainPointContext>(0);
		}
		public RangePointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangePoint; } }
	}

	[RuleVersion(0)]
	public RangePointContext rangePoint() {
		RangePointContext _localctx = new RangePointContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_rangePoint);
		try {
			State = 288;
			switch (_input.La(1)) {
			case RangeNull:
				EnterOuterAlt(_localctx, 1);
				{
				State = 285; Match(RangeNull);
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 286; _localctx.All = Match(T__7);
				}
				break;
			case T__19:
			case T__20:
			case RangeAYear:
			case RangeAMonth:
			case RangeDeltaMonth:
			case RangeADay:
			case RangeDeltaDay:
			case RangeDeltaWeek:
				EnterOuterAlt(_localctx, 3);
				{
				State = 287; rangeCertainPoint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeCertainPointContext : ParserRuleContext {
		public RangeWeekContext rangeWeek() {
			return GetRuleContext<RangeWeekContext>(0);
		}
		public RangeYearContext rangeYear() {
			return GetRuleContext<RangeYearContext>(0);
		}
		public RangeMonthContext rangeMonth() {
			return GetRuleContext<RangeMonthContext>(0);
		}
		public RangeDayContext rangeDay() {
			return GetRuleContext<RangeDayContext>(0);
		}
		public RangeCertainPointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeCertainPoint; } }
	}

	[RuleVersion(0)]
	public RangeCertainPointContext rangeCertainPoint() {
		RangeCertainPointContext _localctx = new RangeCertainPointContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_rangeCertainPoint);
		try {
			State = 294;
			switch (_input.La(1)) {
			case RangeAYear:
				EnterOuterAlt(_localctx, 1);
				{
				State = 290; rangeYear();
				}
				break;
			case T__19:
			case T__20:
			case RangeAMonth:
			case RangeDeltaMonth:
				EnterOuterAlt(_localctx, 2);
				{
				State = 291; rangeMonth();
				}
				break;
			case RangeDeltaWeek:
				EnterOuterAlt(_localctx, 3);
				{
				State = 292; rangeWeek();
				}
				break;
			case RangeADay:
			case RangeDeltaDay:
				EnterOuterAlt(_localctx, 4);
				{
				State = 293; rangeDay();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeYearContext : ParserRuleContext {
		public ITerminalNode RangeAYear() { return GetToken(ConsoleParser.RangeAYear, 0); }
		public RangeYearContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeYear; } }
	}

	[RuleVersion(0)]
	public RangeYearContext rangeYear() {
		RangeYearContext _localctx = new RangeYearContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_rangeYear);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296; Match(RangeAYear);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeMonthContext : ParserRuleContext {
		public IToken Modifier;
		public ITerminalNode RangeDeltaMonth() { return GetToken(ConsoleParser.RangeDeltaMonth, 0); }
		public ITerminalNode RangeAMonth() { return GetToken(ConsoleParser.RangeAMonth, 0); }
		public RangeMonthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeMonth; } }
	}

	[RuleVersion(0)]
	public RangeMonthContext rangeMonth() {
		RangeMonthContext _localctx = new RangeMonthContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_rangeMonth);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			_la = _input.La(1);
			if (_la==T__19 || _la==T__20) {
				{
				State = 298;
				_localctx.Modifier = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__19 || _la==T__20) ) {
					_localctx.Modifier = _errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			State = 301;
			_la = _input.La(1);
			if ( !(_la==RangeAMonth || _la==RangeDeltaMonth) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeWeekContext : ParserRuleContext {
		public ITerminalNode RangeDeltaWeek() { return GetToken(ConsoleParser.RangeDeltaWeek, 0); }
		public RangeWeekContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeWeek; } }
	}

	[RuleVersion(0)]
	public RangeWeekContext rangeWeek() {
		RangeWeekContext _localctx = new RangeWeekContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_rangeWeek);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303; Match(RangeDeltaWeek);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeDayContext : ParserRuleContext {
		public ITerminalNode RangeADay() { return GetToken(ConsoleParser.RangeADay, 0); }
		public ITerminalNode RangeDeltaDay() { return GetToken(ConsoleParser.RangeDeltaDay, 0); }
		public RangeDayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeDay; } }
	}

	[RuleVersion(0)]
	public RangeDayContext rangeDay() {
		RangeDayContext _localctx = new RangeDayContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_rangeDay);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			_la = _input.La(1);
			if ( !(_la==RangeADay || _la==RangeDeltaDay) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetContext : ParserRuleContext {
		public AssetRegisterContext assetRegister() {
			return GetRuleContext<AssetRegisterContext>(0);
		}
		public AssetUnregisterContext assetUnregister() {
			return GetRuleContext<AssetUnregisterContext>(0);
		}
		public AssetResetHardContext assetResetHard() {
			return GetRuleContext<AssetResetHardContext>(0);
		}
		public AssetResetSoftContext assetResetSoft() {
			return GetRuleContext<AssetResetSoftContext>(0);
		}
		public AssetApplyContext assetApply() {
			return GetRuleContext<AssetApplyContext>(0);
		}
		public AssetListContext assetList() {
			return GetRuleContext<AssetListContext>(0);
		}
		public AssetQueryContext assetQuery() {
			return GetRuleContext<AssetQueryContext>(0);
		}
		public AssetCheckContext assetCheck() {
			return GetRuleContext<AssetCheckContext>(0);
		}
		public AssetRedepContext assetRedep() {
			return GetRuleContext<AssetRedepContext>(0);
		}
		public AssetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asset; } }
	}

	[RuleVersion(0)]
	public AssetContext asset() {
		AssetContext _localctx = new AssetContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_asset);
		try {
			State = 316;
			switch ( Interpreter.AdaptivePredict(_input,37,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 307; assetList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 308; assetQuery();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 309; assetRegister();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 310; assetUnregister();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 311; assetRedep();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 312; assetResetSoft();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 313; assetResetHard();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 314; assetApply();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 315; assetCheck();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetListContext : ParserRuleContext {
		public ITerminalNode AOList() { return GetToken(ConsoleParser.AOList, 0); }
		public ITerminalNode AOAll() { return GetToken(ConsoleParser.AOAll, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangePointContext rangePoint() {
			return GetRuleContext<RangePointContext>(0);
		}
		public AssetListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetList; } }
	}

	[RuleVersion(0)]
	public AssetListContext assetList() {
		AssetListContext _localctx = new AssetListContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_assetList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318; Match(T__21);
			State = 320;
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				{
				State = 319;
				_la = _input.La(1);
				if ( !(_la==AOAll || _la==AOList) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 323;
			switch ( Interpreter.AdaptivePredict(_input,39,_ctx) ) {
			case 1:
				{
				State = 322; rangePoint();
				}
				break;
			}
			State = 326;
			switch ( Interpreter.AdaptivePredict(_input,40,_ctx) ) {
			case 1:
				{
				State = 325; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetQueryContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOQuery() { return GetToken(ConsoleParser.AOQuery, 0); }
		public AssetQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetQuery; } }
	}

	[RuleVersion(0)]
	public AssetQueryContext assetQuery() {
		AssetQueryContext _localctx = new AssetQueryContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_assetQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328; Match(T__21);
			State = 329; Match(AOQuery);
			State = 331;
			switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
			case 1:
				{
				State = 330; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetRegisterContext : ParserRuleContext {
		public ITerminalNode AORegister() { return GetToken(ConsoleParser.AORegister, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AssetRegisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetRegister; } }
	}

	[RuleVersion(0)]
	public AssetRegisterContext assetRegister() {
		AssetRegisterContext _localctx = new AssetRegisterContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_assetRegister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333; Match(T__21);
			State = 334; Match(AORegister);
			State = 336;
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				{
				State = 335; distributedQ(0);
				}
				break;
			}
			State = 339;
			_la = _input.La(1);
			if (((((_la - 8)) & ~0x3f) == 0 && ((1L << (_la - 8)) & ((1L << (T__7 - 8)) | (1L << (T__8 - 8)) | (1L << (T__18 - 8)) | (1L << (T__19 - 8)) | (1L << (T__20 - 8)) | (1L << (RangeNull - 8)) | (1L << (RangeAllNotNull - 8)) | (1L << (RangeAYear - 8)) | (1L << (RangeAMonth - 8)) | (1L << (RangeDeltaMonth - 8)) | (1L << (RangeADay - 8)) | (1L << (RangeDeltaDay - 8)) | (1L << (RangeDeltaWeek - 8)) | (1L << (Substract - 8)))) != 0)) {
				{
				State = 338; range();
				}
			}

			State = 343;
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 341; Match(T__1);
				State = 342; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetUnregisterContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode AOUnregister() { return GetToken(ConsoleParser.AOUnregister, 0); }
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AssetUnregisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetUnregister; } }
	}

	[RuleVersion(0)]
	public AssetUnregisterContext assetUnregister() {
		AssetUnregisterContext _localctx = new AssetUnregisterContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_assetUnregister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345; Match(T__21);
			State = 346; Match(AOUnregister);
			State = 348;
			switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
			case 1:
				{
				State = 347; distributedQ(0);
				}
				break;
			}
			State = 351;
			_la = _input.La(1);
			if (((((_la - 8)) & ~0x3f) == 0 && ((1L << (_la - 8)) & ((1L << (T__7 - 8)) | (1L << (T__8 - 8)) | (1L << (T__18 - 8)) | (1L << (T__19 - 8)) | (1L << (T__20 - 8)) | (1L << (RangeNull - 8)) | (1L << (RangeAllNotNull - 8)) | (1L << (RangeAYear - 8)) | (1L << (RangeAMonth - 8)) | (1L << (RangeDeltaMonth - 8)) | (1L << (RangeADay - 8)) | (1L << (RangeDeltaDay - 8)) | (1L << (RangeDeltaWeek - 8)) | (1L << (Substract - 8)))) != 0)) {
				{
				State = 350; range();
				}
			}

			State = 355;
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 353; Match(T__1);
				State = 354; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetRedepContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode ARedep() { return GetToken(ConsoleParser.ARedep, 0); }
		public AssetRedepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetRedep; } }
	}

	[RuleVersion(0)]
	public AssetRedepContext assetRedep() {
		AssetRedepContext _localctx = new AssetRedepContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_assetRedep);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357; Match(T__21);
			State = 358; Match(ARedep);
			State = 360;
			switch ( Interpreter.AdaptivePredict(_input,48,_ctx) ) {
			case 1:
				{
				State = 359; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetResetSoftContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOResetSoft() { return GetToken(ConsoleParser.AOResetSoft, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AssetResetSoftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetResetSoft; } }
	}

	[RuleVersion(0)]
	public AssetResetSoftContext assetResetSoft() {
		AssetResetSoftContext _localctx = new AssetResetSoftContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_assetResetSoft);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362; Match(T__21);
			State = 363; Match(AOResetSoft);
			State = 365;
			switch ( Interpreter.AdaptivePredict(_input,49,_ctx) ) {
			case 1:
				{
				State = 364; distributedQ(0);
				}
				break;
			}
			State = 368;
			_la = _input.La(1);
			if (((((_la - 8)) & ~0x3f) == 0 && ((1L << (_la - 8)) & ((1L << (T__7 - 8)) | (1L << (T__8 - 8)) | (1L << (T__18 - 8)) | (1L << (T__19 - 8)) | (1L << (T__20 - 8)) | (1L << (RangeNull - 8)) | (1L << (RangeAllNotNull - 8)) | (1L << (RangeAYear - 8)) | (1L << (RangeAMonth - 8)) | (1L << (RangeDeltaMonth - 8)) | (1L << (RangeADay - 8)) | (1L << (RangeDeltaDay - 8)) | (1L << (RangeDeltaWeek - 8)) | (1L << (Substract - 8)))) != 0)) {
				{
				State = 367; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetResetHardContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOResetHard() { return GetToken(ConsoleParser.AOResetHard, 0); }
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AssetResetHardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetResetHard; } }
	}

	[RuleVersion(0)]
	public AssetResetHardContext assetResetHard() {
		AssetResetHardContext _localctx = new AssetResetHardContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_assetResetHard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370; Match(T__21);
			State = 371; Match(AOResetHard);
			State = 373;
			switch ( Interpreter.AdaptivePredict(_input,51,_ctx) ) {
			case 1:
				{
				State = 372; distributedQ(0);
				}
				break;
			}
			State = 377;
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 375; Match(T__1);
				State = 376; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetApplyContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOCollapse() { return GetToken(ConsoleParser.AOCollapse, 0); }
		public ITerminalNode AOApply() { return GetToken(ConsoleParser.AOApply, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AssetApplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetApply; } }
	}

	[RuleVersion(0)]
	public AssetApplyContext assetApply() {
		AssetApplyContext _localctx = new AssetApplyContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_assetApply);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379; Match(T__21);
			State = 380; Match(AOApply);
			State = 382;
			switch ( Interpreter.AdaptivePredict(_input,53,_ctx) ) {
			case 1:
				{
				State = 381; Match(AOCollapse);
				}
				break;
			}
			State = 385;
			switch ( Interpreter.AdaptivePredict(_input,54,_ctx) ) {
			case 1:
				{
				State = 384; distributedQ(0);
				}
				break;
			}
			State = 388;
			_la = _input.La(1);
			if (((((_la - 8)) & ~0x3f) == 0 && ((1L << (_la - 8)) & ((1L << (T__7 - 8)) | (1L << (T__8 - 8)) | (1L << (T__18 - 8)) | (1L << (T__19 - 8)) | (1L << (T__20 - 8)) | (1L << (RangeNull - 8)) | (1L << (RangeAllNotNull - 8)) | (1L << (RangeAYear - 8)) | (1L << (RangeAMonth - 8)) | (1L << (RangeDeltaMonth - 8)) | (1L << (RangeADay - 8)) | (1L << (RangeDeltaDay - 8)) | (1L << (RangeDeltaWeek - 8)) | (1L << (Substract - 8)))) != 0)) {
				{
				State = 387; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetCheckContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOCheck() { return GetToken(ConsoleParser.AOCheck, 0); }
		public AssetCheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetCheck; } }
	}

	[RuleVersion(0)]
	public AssetCheckContext assetCheck() {
		AssetCheckContext _localctx = new AssetCheckContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_assetCheck);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390; Match(T__21);
			State = 391; Match(AOCheck);
			State = 393;
			switch ( Interpreter.AdaptivePredict(_input,56,_ctx) ) {
			case 1:
				{
				State = 392; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortContext : ParserRuleContext {
		public AmortReamoContext amortReamo() {
			return GetRuleContext<AmortReamoContext>(0);
		}
		public AmortQueryContext amortQuery() {
			return GetRuleContext<AmortQueryContext>(0);
		}
		public AmortCheckContext amortCheck() {
			return GetRuleContext<AmortCheckContext>(0);
		}
		public AmortResetSoftContext amortResetSoft() {
			return GetRuleContext<AmortResetSoftContext>(0);
		}
		public AmortRegisterContext amortRegister() {
			return GetRuleContext<AmortRegisterContext>(0);
		}
		public AmortUnregisterContext amortUnregister() {
			return GetRuleContext<AmortUnregisterContext>(0);
		}
		public AmortApplyContext amortApply() {
			return GetRuleContext<AmortApplyContext>(0);
		}
		public AmortListContext amortList() {
			return GetRuleContext<AmortListContext>(0);
		}
		public AmortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amort; } }
	}

	[RuleVersion(0)]
	public AmortContext amort() {
		AmortContext _localctx = new AmortContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_amort);
		try {
			State = 403;
			switch ( Interpreter.AdaptivePredict(_input,57,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 395; amortList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 396; amortQuery();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 397; amortRegister();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 398; amortUnregister();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 399; amortReamo();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 400; amortResetSoft();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 401; amortApply();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 402; amortCheck();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortListContext : ParserRuleContext {
		public ITerminalNode AOList() { return GetToken(ConsoleParser.AOList, 0); }
		public ITerminalNode AOAll() { return GetToken(ConsoleParser.AOAll, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangePointContext rangePoint() {
			return GetRuleContext<RangePointContext>(0);
		}
		public AmortListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortList; } }
	}

	[RuleVersion(0)]
	public AmortListContext amortList() {
		AmortListContext _localctx = new AmortListContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_amortList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 405; Match(T__22);
			State = 407;
			switch ( Interpreter.AdaptivePredict(_input,58,_ctx) ) {
			case 1:
				{
				State = 406;
				_la = _input.La(1);
				if ( !(_la==AOAll || _la==AOList) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 410;
			switch ( Interpreter.AdaptivePredict(_input,59,_ctx) ) {
			case 1:
				{
				State = 409; rangePoint();
				}
				break;
			}
			State = 413;
			switch ( Interpreter.AdaptivePredict(_input,60,_ctx) ) {
			case 1:
				{
				State = 412; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortQueryContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOQuery() { return GetToken(ConsoleParser.AOQuery, 0); }
		public AmortQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortQuery; } }
	}

	[RuleVersion(0)]
	public AmortQueryContext amortQuery() {
		AmortQueryContext _localctx = new AmortQueryContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_amortQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415; Match(T__22);
			State = 416; Match(AOQuery);
			State = 418;
			switch ( Interpreter.AdaptivePredict(_input,61,_ctx) ) {
			case 1:
				{
				State = 417; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortRegisterContext : ParserRuleContext {
		public ITerminalNode AORegister() { return GetToken(ConsoleParser.AORegister, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AmortRegisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortRegister; } }
	}

	[RuleVersion(0)]
	public AmortRegisterContext amortRegister() {
		AmortRegisterContext _localctx = new AmortRegisterContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_amortRegister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420; Match(T__22);
			State = 421; Match(AORegister);
			State = 423;
			switch ( Interpreter.AdaptivePredict(_input,62,_ctx) ) {
			case 1:
				{
				State = 422; distributedQ(0);
				}
				break;
			}
			State = 426;
			_la = _input.La(1);
			if (((((_la - 8)) & ~0x3f) == 0 && ((1L << (_la - 8)) & ((1L << (T__7 - 8)) | (1L << (T__8 - 8)) | (1L << (T__18 - 8)) | (1L << (T__19 - 8)) | (1L << (T__20 - 8)) | (1L << (RangeNull - 8)) | (1L << (RangeAllNotNull - 8)) | (1L << (RangeAYear - 8)) | (1L << (RangeAMonth - 8)) | (1L << (RangeDeltaMonth - 8)) | (1L << (RangeADay - 8)) | (1L << (RangeDeltaDay - 8)) | (1L << (RangeDeltaWeek - 8)) | (1L << (Substract - 8)))) != 0)) {
				{
				State = 425; range();
				}
			}

			State = 430;
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 428; Match(T__1);
				State = 429; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortUnregisterContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode AOUnregister() { return GetToken(ConsoleParser.AOUnregister, 0); }
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AmortUnregisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortUnregister; } }
	}

	[RuleVersion(0)]
	public AmortUnregisterContext amortUnregister() {
		AmortUnregisterContext _localctx = new AmortUnregisterContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_amortUnregister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 432; Match(T__22);
			State = 433; Match(AOUnregister);
			State = 435;
			switch ( Interpreter.AdaptivePredict(_input,65,_ctx) ) {
			case 1:
				{
				State = 434; distributedQ(0);
				}
				break;
			}
			State = 438;
			_la = _input.La(1);
			if (((((_la - 8)) & ~0x3f) == 0 && ((1L << (_la - 8)) & ((1L << (T__7 - 8)) | (1L << (T__8 - 8)) | (1L << (T__18 - 8)) | (1L << (T__19 - 8)) | (1L << (T__20 - 8)) | (1L << (RangeNull - 8)) | (1L << (RangeAllNotNull - 8)) | (1L << (RangeAYear - 8)) | (1L << (RangeAMonth - 8)) | (1L << (RangeDeltaMonth - 8)) | (1L << (RangeADay - 8)) | (1L << (RangeDeltaDay - 8)) | (1L << (RangeDeltaWeek - 8)) | (1L << (Substract - 8)))) != 0)) {
				{
				State = 437; range();
				}
			}

			State = 442;
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 440; Match(T__1);
				State = 441; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortReamoContext : ParserRuleContext {
		public ITerminalNode OReamo() { return GetToken(ConsoleParser.OReamo, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public AmortReamoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortReamo; } }
	}

	[RuleVersion(0)]
	public AmortReamoContext amortReamo() {
		AmortReamoContext _localctx = new AmortReamoContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_amortReamo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444; Match(T__22);
			State = 445; Match(OReamo);
			State = 447;
			switch ( Interpreter.AdaptivePredict(_input,68,_ctx) ) {
			case 1:
				{
				State = 446; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortResetSoftContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOResetSoft() { return GetToken(ConsoleParser.AOResetSoft, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AmortResetSoftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortResetSoft; } }
	}

	[RuleVersion(0)]
	public AmortResetSoftContext amortResetSoft() {
		AmortResetSoftContext _localctx = new AmortResetSoftContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_amortResetSoft);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 449; Match(T__22);
			State = 450; Match(AOResetSoft);
			State = 452;
			switch ( Interpreter.AdaptivePredict(_input,69,_ctx) ) {
			case 1:
				{
				State = 451; distributedQ(0);
				}
				break;
			}
			State = 455;
			_la = _input.La(1);
			if (((((_la - 8)) & ~0x3f) == 0 && ((1L << (_la - 8)) & ((1L << (T__7 - 8)) | (1L << (T__8 - 8)) | (1L << (T__18 - 8)) | (1L << (T__19 - 8)) | (1L << (T__20 - 8)) | (1L << (RangeNull - 8)) | (1L << (RangeAllNotNull - 8)) | (1L << (RangeAYear - 8)) | (1L << (RangeAMonth - 8)) | (1L << (RangeDeltaMonth - 8)) | (1L << (RangeADay - 8)) | (1L << (RangeDeltaDay - 8)) | (1L << (RangeDeltaWeek - 8)) | (1L << (Substract - 8)))) != 0)) {
				{
				State = 454; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortApplyContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOCollapse() { return GetToken(ConsoleParser.AOCollapse, 0); }
		public ITerminalNode AOApply() { return GetToken(ConsoleParser.AOApply, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AmortApplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortApply; } }
	}

	[RuleVersion(0)]
	public AmortApplyContext amortApply() {
		AmortApplyContext _localctx = new AmortApplyContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_amortApply);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457; Match(T__22);
			State = 458; Match(AOApply);
			State = 460;
			switch ( Interpreter.AdaptivePredict(_input,71,_ctx) ) {
			case 1:
				{
				State = 459; Match(AOCollapse);
				}
				break;
			}
			State = 463;
			switch ( Interpreter.AdaptivePredict(_input,72,_ctx) ) {
			case 1:
				{
				State = 462; distributedQ(0);
				}
				break;
			}
			State = 466;
			_la = _input.La(1);
			if (((((_la - 8)) & ~0x3f) == 0 && ((1L << (_la - 8)) & ((1L << (T__7 - 8)) | (1L << (T__8 - 8)) | (1L << (T__18 - 8)) | (1L << (T__19 - 8)) | (1L << (T__20 - 8)) | (1L << (RangeNull - 8)) | (1L << (RangeAllNotNull - 8)) | (1L << (RangeAYear - 8)) | (1L << (RangeAMonth - 8)) | (1L << (RangeDeltaMonth - 8)) | (1L << (RangeADay - 8)) | (1L << (RangeDeltaDay - 8)) | (1L << (RangeDeltaWeek - 8)) | (1L << (Substract - 8)))) != 0)) {
				{
				State = 465; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortCheckContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOCheck() { return GetToken(ConsoleParser.AOCheck, 0); }
		public AmortCheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortCheck; } }
	}

	[RuleVersion(0)]
	public AmortCheckContext amortCheck() {
		AmortCheckContext _localctx = new AmortCheckContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_amortCheck);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468; Match(T__22);
			State = 469; Match(AOCheck);
			State = 471;
			switch ( Interpreter.AdaptivePredict(_input,74,_ctx) ) {
			case 1:
				{
				State = 470; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DistributedQContext : ParserRuleContext {
		public IToken Op;
		public DistributedQAtomContext distributedQAtom() {
			return GetRuleContext<DistributedQAtomContext>(0);
		}
		public DistributedQContext distributedQ(int i) {
			return GetRuleContext<DistributedQContext>(i);
		}
		public IReadOnlyList<DistributedQContext> distributedQ() {
			return GetRuleContexts<DistributedQContext>();
		}
		public DistributedQContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distributedQ; } }
	}

	[RuleVersion(0)]
	public DistributedQContext distributedQ() {
		return distributedQ(0);
	}

	private DistributedQContext distributedQ(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		DistributedQContext _localctx = new DistributedQContext(_ctx, _parentState);
		DistributedQContext _prevctx = _localctx;
		int _startState = 92;
		EnterRecursionRule(_localctx, 92, RULE_distributedQ, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 481;
			switch ( Interpreter.AdaptivePredict(_input,75,_ctx) ) {
			case 1:
				{
				State = 474;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==Union || _la==Substract) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 475; distributedQ(3);
				}
				break;

			case 2:
				{
				State = 476; distributedQAtom();
				}
				break;

			case 3:
				{
				State = 477; Match(T__14);
				State = 478; distributedQ(0);
				State = 479; Match(T__15);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 491;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,77,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 489;
					switch ( Interpreter.AdaptivePredict(_input,76,_ctx) ) {
					case 1:
						{
						_localctx = new DistributedQContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_distributedQ);
						State = 483;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 484; _localctx.Op = Match(Intersect);
						State = 485; distributedQ(6);
						}
						break;

					case 2:
						{
						_localctx = new DistributedQContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_distributedQ);
						State = 486;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 487;
						_localctx.Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==Union || _la==Substract) ) {
							_localctx.Op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 488; distributedQ(5);
						}
						break;
					}
					} 
				}
				State = 493;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,77,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DistributedQAtomContext : ParserRuleContext {
		public ITerminalNode DollarQuotedString() { return GetToken(ConsoleParser.DollarQuotedString, 0); }
		public ITerminalNode PercentQuotedString() { return GetToken(ConsoleParser.PercentQuotedString, 0); }
		public ITerminalNode Guid() { return GetToken(ConsoleParser.Guid, 0); }
		public RangeCoreContext rangeCore() {
			return GetRuleContext<RangeCoreContext>(0);
		}
		public DistributedQAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distributedQAtom; } }
	}

	[RuleVersion(0)]
	public DistributedQAtomContext distributedQAtom() {
		DistributedQAtomContext _localctx = new DistributedQAtomContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_distributedQAtom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495;
			switch ( Interpreter.AdaptivePredict(_input,78,_ctx) ) {
			case 1:
				{
				State = 494; Match(Guid);
				}
				break;
			}
			State = 498;
			switch ( Interpreter.AdaptivePredict(_input,79,_ctx) ) {
			case 1:
				{
				State = 497; Match(DollarQuotedString);
				}
				break;
			}
			State = 501;
			switch ( Interpreter.AdaptivePredict(_input,80,_ctx) ) {
			case 1:
				{
				State = 500; Match(PercentQuotedString);
				}
				break;
			}
			State = 507;
			switch ( Interpreter.AdaptivePredict(_input,81,_ctx) ) {
			case 1:
				{
				State = 503; Match(T__23);
				State = 504; rangeCore();
				State = 505; Match(T__24);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 15: return vouchersB_sempred((VouchersBContext)_localctx, predIndex);

		case 17: return details_sempred((DetailsContext)_localctx, predIndex);

		case 46: return distributedQ_sempred((DistributedQContext)_localctx, predIndex);
		}
		return true;
	}
	private bool vouchersB_sempred(VouchersBContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 5);

		case 1: return Precpred(_ctx, 4);
		}
		return true;
	}
	private bool distributedQ_sempred(DistributedQContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(_ctx, 5);

		case 5: return Precpred(_ctx, 4);
		}
		return true;
	}
	private bool details_sempred(DetailsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 5);

		case 3: return Precpred(_ctx, 4);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3I\x200\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x3\x2\x3"+
		"\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2i\n\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4"+
		"\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x5\x5u\n\x5\x3\x6\x3\x6\x5\x6y\n\x6\x3"+
		"\x6\x3\x6\x5\x6}\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\x6\x6\x83\n\x6\r\x6\xE\x6"+
		"\x84\x3\a\x3\a\x5\a\x89\n\a\x3\a\x3\a\x5\a\x8D\n\a\x3\a\x3\a\x3\a\x3\b"+
		"\x3\b\x5\b\x94\n\b\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3"+
		"\f\x3\f\x5\f\xA2\n\f\x3\f\x5\f\xA5\n\f\x3\r\x3\r\x5\r\xA9\n\r\x3\r\x3"+
		"\r\x3\r\x3\r\x3\r\x5\r\xB0\n\r\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\xB6\n\xE"+
		"\x3\xF\x3\xF\x3\xF\x5\xF\xBB\n\xF\x3\x10\x3\x10\x5\x10\xBF\n\x10\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x5\x11\xCC\n\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\a\x11\xD4"+
		"\n\x11\f\x11\xE\x11\xD7\v\x11\x3\x12\x5\x12\xDA\n\x12\x3\x12\x5\x12\xDD"+
		"\n\x12\x3\x12\x5\x12\xE0\n\x12\x3\x12\x5\x12\xE3\n\x12\x3\x12\x5\x12\xE6"+
		"\n\x12\x3\x12\x5\x12\xE9\n\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13"+
		"\x3\x13\x3\x13\x5\x13\xF3\n\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\a\x13\xFB\n\x13\f\x13\xE\x13\xFE\v\x13\x3\x14\x5\x14\x101\n\x14\x3"+
		"\x14\x5\x14\x104\n\x14\x3\x14\x5\x14\x107\n\x14\x3\x14\x5\x14\x10A\n\x14"+
		"\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x112\n\x15\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x5\x16\x119\n\x16\x3\x16\x3\x16\x3\x16\x5\x16"+
		"\x11E\n\x16\x3\x17\x3\x17\x3\x17\x5\x17\x123\n\x17\x3\x18\x3\x18\x3\x18"+
		"\x3\x18\x5\x18\x129\n\x18\x3\x19\x3\x19\x3\x1A\x5\x1A\x12E\n\x1A\x3\x1A"+
		"\x3\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D"+
		"\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x13F\n\x1D\x3\x1E\x3\x1E\x5\x1E\x143"+
		"\n\x1E\x3\x1E\x5\x1E\x146\n\x1E\x3\x1E\x5\x1E\x149\n\x1E\x3\x1F\x3\x1F"+
		"\x3\x1F\x5\x1F\x14E\n\x1F\x3 \x3 \x3 \x5 \x153\n \x3 \x5 \x156\n \x3 "+
		"\x3 \x5 \x15A\n \x3!\x3!\x3!\x5!\x15F\n!\x3!\x5!\x162\n!\x3!\x3!\x5!\x166"+
		"\n!\x3\"\x3\"\x3\"\x5\"\x16B\n\"\x3#\x3#\x3#\x5#\x170\n#\x3#\x5#\x173"+
		"\n#\x3$\x3$\x3$\x5$\x178\n$\x3$\x3$\x5$\x17C\n$\x3%\x3%\x3%\x5%\x181\n"+
		"%\x3%\x5%\x184\n%\x3%\x5%\x187\n%\x3&\x3&\x3&\x5&\x18C\n&\x3\'\x3\'\x3"+
		"\'\x3\'\x3\'\x3\'\x3\'\x3\'\x5\'\x196\n\'\x3(\x3(\x5(\x19A\n(\x3(\x5("+
		"\x19D\n(\x3(\x5(\x1A0\n(\x3)\x3)\x3)\x5)\x1A5\n)\x3*\x3*\x3*\x5*\x1AA"+
		"\n*\x3*\x5*\x1AD\n*\x3*\x3*\x5*\x1B1\n*\x3+\x3+\x3+\x5+\x1B6\n+\x3+\x5"+
		"+\x1B9\n+\x3+\x3+\x5+\x1BD\n+\x3,\x3,\x3,\x5,\x1C2\n,\x3-\x3-\x3-\x5-"+
		"\x1C7\n-\x3-\x5-\x1CA\n-\x3.\x3.\x3.\x5.\x1CF\n.\x3.\x5.\x1D2\n.\x3.\x5"+
		".\x1D5\n.\x3/\x3/\x3/\x5/\x1DA\n/\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3"+
		"\x30\x3\x30\x3\x30\x5\x30\x1E4\n\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30"+
		"\x3\x30\a\x30\x1EC\n\x30\f\x30\xE\x30\x1EF\v\x30\x3\x31\x5\x31\x1F2\n"+
		"\x31\x3\x31\x5\x31\x1F5\n\x31\x3\x31\x5\x31\x1F8\n\x31\x3\x31\x3\x31\x3"+
		"\x31\x3\x31\x5\x31\x1FE\n\x31\x3\x31\x2\x2\x5 $^\x32\x2\x2\x4\x2\x6\x2"+
		"\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2"+
		"\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38"+
		"\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V"+
		"\x2X\x2Z\x2\\\x2^\x2`\x2\x2\xE\x3\x2\x1C&\x3\x2\x44\x45\x3\x2\a\b\x3\x2"+
		"GH\x4\x2\r\r\x10\x10\x3\x2\x42\x43\x3\x2\x13\x14\x4\x2\x15\x15HH\x3\x2"+
		"\x16\x17\x3\x2\x38\x39\x3\x2:;\x3\x2\'(\x23D\x2h\x3\x2\x2\x2\x4l\x3\x2"+
		"\x2\x2\x6n\x3\x2\x2\x2\bt\x3\x2\x2\x2\nv\x3\x2\x2\x2\f\x86\x3\x2\x2\x2"+
		"\xE\x91\x3\x2\x2\x2\x10\x97\x3\x2\x2\x2\x12\x99\x3\x2\x2\x2\x14\x9C\x3"+
		"\x2\x2\x2\x16\x9F\x3\x2\x2\x2\x18\xAF\x3\x2\x2\x2\x1A\xB5\x3\x2\x2\x2"+
		"\x1C\xBA\x3\x2\x2\x2\x1E\xBE\x3\x2\x2\x2 \xCB\x3\x2\x2\x2\"\xD9\x3\x2"+
		"\x2\x2$\xF2\x3\x2\x2\x2&\x100\x3\x2\x2\x2(\x111\x3\x2\x2\x2*\x11D\x3\x2"+
		"\x2\x2,\x122\x3\x2\x2\x2.\x128\x3\x2\x2\x2\x30\x12A\x3\x2\x2\x2\x32\x12D"+
		"\x3\x2\x2\x2\x34\x131\x3\x2\x2\x2\x36\x133\x3\x2\x2\x2\x38\x13E\x3\x2"+
		"\x2\x2:\x140\x3\x2\x2\x2<\x14A\x3\x2\x2\x2>\x14F\x3\x2\x2\x2@\x15B\x3"+
		"\x2\x2\x2\x42\x167\x3\x2\x2\x2\x44\x16C\x3\x2\x2\x2\x46\x174\x3\x2\x2"+
		"\x2H\x17D\x3\x2\x2\x2J\x188\x3\x2\x2\x2L\x195\x3\x2\x2\x2N\x197\x3\x2"+
		"\x2\x2P\x1A1\x3\x2\x2\x2R\x1A6\x3\x2\x2\x2T\x1B2\x3\x2\x2\x2V\x1BE\x3"+
		"\x2\x2\x2X\x1C3\x3\x2\x2\x2Z\x1CB\x3\x2\x2\x2\\\x1D6\x3\x2\x2\x2^\x1E3"+
		"\x3\x2\x2\x2`\x1F1\x3\x2\x2\x2\x62i\x5\x1E\x10\x2\x63i\x5\x14\v\x2\x64"+
		"i\x5\b\x5\x2\x65i\x5\x38\x1D\x2\x66i\x5L\'\x2gi\x5\x4\x3\x2h\x62\x3\x2"+
		"\x2\x2h\x63\x3\x2\x2\x2h\x64\x3\x2\x2\x2h\x65\x3\x2\x2\x2h\x66\x3\x2\x2"+
		"\x2hg\x3\x2\x2\x2ij\x3\x2\x2\x2jk\a\x2\x2\x3k\x3\x3\x2\x2\x2lm\t\x2\x2"+
		"\x2m\x5\x3\x2\x2\x2no\a\x3\x2\x2op\x5\b\x5\x2p\a\x3\x2\x2\x2qu\x5\n\x6"+
		"\x2ru\x5\f\a\x2su\x5\xE\b\x2tq\x3\x2\x2\x2tr\x3\x2\x2\x2ts\x3\x2\x2\x2"+
		"u\t\x3\x2\x2\x2vx\x5\x10\t\x2wy\x5\x12\n\x2xw\x3\x2\x2\x2xy\x3\x2\x2\x2"+
		"y|\x3\x2\x2\x2z{\a\x4\x2\x2{}\a@\x2\x2|z\x3\x2\x2\x2|}\x3\x2\x2\x2}~\x3"+
		"\x2\x2\x2~\x7F\a\x4\x2\x2\x7F\x82\x5\b\x5\x2\x80\x81\a\x5\x2\x2\x81\x83"+
		"\x5\b\x5\x2\x82\x80\x3\x2\x2\x2\x83\x84\x3\x2\x2\x2\x84\x82\x3\x2\x2\x2"+
		"\x84\x85\x3\x2\x2\x2\x85\v\x3\x2\x2\x2\x86\x88\x5\x10\t\x2\x87\x89\x5"+
		"\x12\n\x2\x88\x87\x3\x2\x2\x2\x88\x89\x3\x2\x2\x2\x89\x8C\x3\x2\x2\x2"+
		"\x8A\x8B\a\x4\x2\x2\x8B\x8D\a@\x2\x2\x8C\x8A\x3\x2\x2\x2\x8C\x8D\x3\x2"+
		"\x2\x2\x8D\x8E\x3\x2\x2\x2\x8E\x8F\a\x4\x2\x2\x8F\x90\x5\x14\v\x2\x90"+
		"\r\x3\x2\x2\x2\x91\x93\x5\x10\t\x2\x92\x94\x5\x12\n\x2\x93\x92\x3\x2\x2"+
		"\x2\x93\x94\x3\x2\x2\x2\x94\x95\x3\x2\x2\x2\x95\x96\a\x6\x2\x2\x96\xF"+
		"\x3\x2\x2\x2\x97\x98\a?\x2\x2\x98\x11\x3\x2\x2\x2\x99\x9A\a\x46\x2\x2"+
		"\x9A\x9B\t\x3\x2\x2\x9B\x13\x3\x2\x2\x2\x9C\x9D\x5\x1A\xE\x2\x9D\x9E\x5"+
		"\x16\f\x2\x9E\x15\x3\x2\x2\x2\x9F\xA1\t\x4\x2\x2\xA0\xA2\a\x33\x2\x2\xA1"+
		"\xA0\x3\x2\x2\x2\xA1\xA2\x3\x2\x2\x2\xA2\xA4\x3\x2\x2\x2\xA3\xA5\x5\x18"+
		"\r\x2\xA4\xA3\x3\x2\x2\x2\xA4\xA5\x3\x2\x2\x2\xA5\x17\x3\x2\x2\x2\xA6"+
		"\xA8\a\t\x2\x2\xA7\xA9\a\n\x2\x2\xA8\xA7\x3\x2\x2\x2\xA8\xA9\x3\x2\x2"+
		"\x2\xA9\xB0\x3\x2\x2\x2\xAA\xAB\a\t\x2\x2\xAB\xAC\a\v\x2\x2\xAC\xAD\x5"+
		"*\x16\x2\xAD\xAE\a\f\x2\x2\xAE\xB0\x3\x2\x2\x2\xAF\xA6\x3\x2\x2\x2\xAF"+
		"\xAA\x3\x2\x2\x2\xB0\x19\x3\x2\x2\x2\xB1\xB2\x5\x1E\x10\x2\xB2\xB3\x5"+
		"\x1C\xF\x2\xB3\xB6\x3\x2\x2\x2\xB4\xB6\x5\"\x12\x2\xB5\xB1\x3\x2\x2\x2"+
		"\xB5\xB4\x3\x2\x2\x2\xB6\x1B\x3\x2\x2\x2\xB7\xBB\a\r\x2\x2\xB8\xB9\a\x4"+
		"\x2\x2\xB9\xBB\x5$\x13\x2\xBA\xB7\x3\x2\x2\x2\xBA\xB8\x3\x2\x2\x2\xBB"+
		"\x1D\x3\x2\x2\x2\xBC\xBF\x5 \x11\x2\xBD\xBF\x5\"\x12\x2\xBE\xBC\x3\x2"+
		"\x2\x2\xBE\xBD\x3\x2\x2\x2\xBF\x1F\x3\x2\x2\x2\xC0\xC1\b\x11\x1\x2\xC1"+
		"\xC2\t\x5\x2\x2\xC2\xCC\x5 \x11\x5\xC3\xC4\a\xE\x2\x2\xC4\xC5\x5\"\x12"+
		"\x2\xC5\xC6\a\xF\x2\x2\xC6\xCC\x3\x2\x2\x2\xC7\xC8\a\xE\x2\x2\xC8\xC9"+
		"\x5 \x11\x2\xC9\xCA\a\xF\x2\x2\xCA\xCC\x3\x2\x2\x2\xCB\xC0\x3\x2\x2\x2"+
		"\xCB\xC3\x3\x2\x2\x2\xCB\xC7\x3\x2\x2\x2\xCC\xD5\x3\x2\x2\x2\xCD\xCE\f"+
		"\a\x2\x2\xCE\xCF\a\x46\x2\x2\xCF\xD4\x5 \x11\b\xD0\xD1\f\x6\x2\x2\xD1"+
		"\xD2\t\x5\x2\x2\xD2\xD4\x5 \x11\a\xD3\xCD\x3\x2\x2\x2\xD3\xD0\x3\x2\x2"+
		"\x2\xD4\xD7\x3\x2\x2\x2\xD5\xD3\x3\x2\x2\x2\xD5\xD6\x3\x2\x2\x2\xD6!\x3"+
		"\x2\x2\x2\xD7\xD5\x3\x2\x2\x2\xD8\xDA\x5$\x13\x2\xD9\xD8\x3\x2\x2\x2\xD9"+
		"\xDA\x3\x2\x2\x2\xDA\xDC\x3\x2\x2\x2\xDB\xDD\t\x6\x2\x2\xDC\xDB\x3\x2"+
		"\x2\x2\xDC\xDD\x3\x2\x2\x2\xDD\xDF\x3\x2\x2\x2\xDE\xE0\x5(\x15\x2\xDF"+
		"\xDE\x3\x2\x2\x2\xDF\xE0\x3\x2\x2\x2\xE0\xE2\x3\x2\x2\x2\xE1\xE3\a?\x2"+
		"\x2\xE2\xE1\x3\x2\x2\x2\xE2\xE3\x3\x2\x2\x2\xE3\xE5\x3\x2\x2\x2\xE4\xE6"+
		"\a>\x2\x2\xE5\xE4\x3\x2\x2\x2\xE5\xE6\x3\x2\x2\x2\xE6\xE8\x3\x2\x2\x2"+
		"\xE7\xE9\a=\x2\x2\xE8\xE7\x3\x2\x2\x2\xE8\xE9\x3\x2\x2\x2\xE9#\x3\x2\x2"+
		"\x2\xEA\xEB\b\x13\x1\x2\xEB\xEC\t\x5\x2\x2\xEC\xF3\x5$\x13\x5\xED\xF3"+
		"\x5&\x14\x2\xEE\xEF\a\x11\x2\x2\xEF\xF0\x5$\x13\x2\xF0\xF1\a\x12\x2\x2"+
		"\xF1\xF3\x3\x2\x2\x2\xF2\xEA\x3\x2\x2\x2\xF2\xED\x3\x2\x2\x2\xF2\xEE\x3"+
		"\x2\x2\x2\xF3\xFC\x3\x2\x2\x2\xF4\xF5\f\a\x2\x2\xF5\xF6\a\x46\x2\x2\xF6"+
		"\xFB\x5$\x13\b\xF7\xF8\f\x6\x2\x2\xF8\xF9\t\x5\x2\x2\xF9\xFB\x5$\x13\a"+
		"\xFA\xF4\x3\x2\x2\x2\xFA\xF7\x3\x2\x2\x2\xFB\xFE\x3\x2\x2\x2\xFC\xFA\x3"+
		"\x2\x2\x2\xFC\xFD\x3\x2\x2\x2\xFD%\x3\x2\x2\x2\xFE\xFC\x3\x2\x2\x2\xFF"+
		"\x101\t\a\x2\x2\x100\xFF\x3\x2\x2\x2\x100\x101\x3\x2\x2\x2\x101\x103\x3"+
		"\x2\x2\x2\x102\x104\a\x41\x2\x2\x103\x102\x3\x2\x2\x2\x103\x104\x3\x2"+
		"\x2\x2\x104\x106\x3\x2\x2\x2\x105\x107\a@\x2\x2\x106\x105\x3\x2\x2\x2"+
		"\x106\x107\x3\x2\x2\x2\x107\x109\x3\x2\x2\x2\x108\x10A\t\b\x2\x2\x109"+
		"\x108\x3\x2\x2\x2\x109\x10A\x3\x2\x2\x2\x10A\'\x3\x2\x2\x2\x10B\x112\a"+
		"\n\x2\x2\x10C\x112\x5*\x16\x2\x10D\x10E\a\v\x2\x2\x10E\x10F\x5*\x16\x2"+
		"\x10F\x110\a\f\x2\x2\x110\x112\x3\x2\x2\x2\x111\x10B\x3\x2\x2\x2\x111"+
		"\x10C\x3\x2\x2\x2\x111\x10D\x3\x2\x2\x2\x112)\x3\x2\x2\x2\x113\x11E\a"+
		"\x35\x2\x2\x114\x11E\a\x36\x2\x2\x115\x116\x5.\x18\x2\x116\x118\t\t\x2"+
		"\x2\x117\x119\x5.\x18\x2\x118\x117\x3\x2\x2\x2\x118\x119\x3\x2\x2\x2\x119"+
		"\x11E\x3\x2\x2\x2\x11A\x11B\t\t\x2\x2\x11B\x11E\x5.\x18\x2\x11C\x11E\x5"+
		".\x18\x2\x11D\x113\x3\x2\x2\x2\x11D\x114\x3\x2\x2\x2\x11D\x115\x3\x2\x2"+
		"\x2\x11D\x11A\x3\x2\x2\x2\x11D\x11C\x3\x2\x2\x2\x11E+\x3\x2\x2\x2\x11F"+
		"\x123\a\x35\x2\x2\x120\x123\a\n\x2\x2\x121\x123\x5.\x18\x2\x122\x11F\x3"+
		"\x2\x2\x2\x122\x120\x3\x2\x2\x2\x122\x121\x3\x2\x2\x2\x123-\x3\x2\x2\x2"+
		"\x124\x129\x5\x30\x19\x2\x125\x129\x5\x32\x1A\x2\x126\x129\x5\x34\x1B"+
		"\x2\x127\x129\x5\x36\x1C\x2\x128\x124\x3\x2\x2\x2\x128\x125\x3\x2\x2\x2"+
		"\x128\x126\x3\x2\x2\x2\x128\x127\x3\x2\x2\x2\x129/\x3\x2\x2\x2\x12A\x12B"+
		"\a\x37\x2\x2\x12B\x31\x3\x2\x2\x2\x12C\x12E\t\n\x2\x2\x12D\x12C\x3\x2"+
		"\x2\x2\x12D\x12E\x3\x2\x2\x2\x12E\x12F\x3\x2\x2\x2\x12F\x130\t\v\x2\x2"+
		"\x130\x33\x3\x2\x2\x2\x131\x132\a<\x2\x2\x132\x35\x3\x2\x2\x2\x133\x134"+
		"\t\f\x2\x2\x134\x37\x3\x2\x2\x2\x135\x13F\x5:\x1E\x2\x136\x13F\x5<\x1F"+
		"\x2\x137\x13F\x5> \x2\x138\x13F\x5@!\x2\x139\x13F\x5\x42\"\x2\x13A\x13F"+
		"\x5\x44#\x2\x13B\x13F\x5\x46$\x2\x13C\x13F\x5H%\x2\x13D\x13F\x5J&\x2\x13E"+
		"\x135\x3\x2\x2\x2\x13E\x136\x3\x2\x2\x2\x13E\x137\x3\x2\x2\x2\x13E\x138"+
		"\x3\x2\x2\x2\x13E\x139\x3\x2\x2\x2\x13E\x13A\x3\x2\x2\x2\x13E\x13B\x3"+
		"\x2\x2\x2\x13E\x13C\x3\x2\x2\x2\x13E\x13D\x3\x2\x2\x2\x13F\x39\x3\x2\x2"+
		"\x2\x140\x142\a\x18\x2\x2\x141\x143\t\r\x2\x2\x142\x141\x3\x2\x2\x2\x142"+
		"\x143\x3\x2\x2\x2\x143\x145\x3\x2\x2\x2\x144\x146\x5,\x17\x2\x145\x144"+
		"\x3\x2\x2\x2\x145\x146\x3\x2\x2\x2\x146\x148\x3\x2\x2\x2\x147\x149\x5"+
		"^\x30\x2\x148\x147\x3\x2\x2\x2\x148\x149\x3\x2\x2\x2\x149;\x3\x2\x2\x2"+
		"\x14A\x14B\a\x18\x2\x2\x14B\x14D\a)\x2\x2\x14C\x14E\x5^\x30\x2\x14D\x14C"+
		"\x3\x2\x2\x2\x14D\x14E\x3\x2\x2\x2\x14E=\x3\x2\x2\x2\x14F\x150\a\x18\x2"+
		"\x2\x150\x152\a*\x2\x2\x151\x153\x5^\x30\x2\x152\x151\x3\x2\x2\x2\x152"+
		"\x153\x3\x2\x2\x2\x153\x155\x3\x2\x2\x2\x154\x156\x5(\x15\x2\x155\x154"+
		"\x3\x2\x2\x2\x155\x156\x3\x2\x2\x2\x156\x159\x3\x2\x2\x2\x157\x158\a\x4"+
		"\x2\x2\x158\x15A\x5\x1E\x10\x2\x159\x157\x3\x2\x2\x2\x159\x15A\x3\x2\x2"+
		"\x2\x15A?\x3\x2\x2\x2\x15B\x15C\a\x18\x2\x2\x15C\x15E\a+\x2\x2\x15D\x15F"+
		"\x5^\x30\x2\x15E\x15D\x3\x2\x2\x2\x15E\x15F\x3\x2\x2\x2\x15F\x161\x3\x2"+
		"\x2\x2\x160\x162\x5(\x15\x2\x161\x160\x3\x2\x2\x2\x161\x162\x3\x2\x2\x2"+
		"\x162\x165\x3\x2\x2\x2\x163\x164\a\x4\x2\x2\x164\x166\x5\x1E\x10\x2\x165"+
		"\x163\x3\x2\x2\x2\x165\x166\x3\x2\x2\x2\x166\x41\x3\x2\x2\x2\x167\x168"+
		"\a\x18\x2\x2\x168\x16A\a,\x2\x2\x169\x16B\x5^\x30\x2\x16A\x169\x3\x2\x2"+
		"\x2\x16A\x16B\x3\x2\x2\x2\x16B\x43\x3\x2\x2\x2\x16C\x16D\a\x18\x2\x2\x16D"+
		"\x16F\a.\x2\x2\x16E\x170\x5^\x30\x2\x16F\x16E\x3\x2\x2\x2\x16F\x170\x3"+
		"\x2\x2\x2\x170\x172\x3\x2\x2\x2\x171\x173\x5(\x15\x2\x172\x171\x3\x2\x2"+
		"\x2\x172\x173\x3\x2\x2\x2\x173\x45\x3\x2\x2\x2\x174\x175\a\x18\x2\x2\x175"+
		"\x177\a/\x2\x2\x176\x178\x5^\x30\x2\x177\x176\x3\x2\x2\x2\x177\x178\x3"+
		"\x2\x2\x2\x178\x17B\x3\x2\x2\x2\x179\x17A\a\x4\x2\x2\x17A\x17C\x5\x1E"+
		"\x10\x2\x17B\x179\x3\x2\x2\x2\x17B\x17C\x3\x2\x2\x2\x17CG\x3\x2\x2\x2"+
		"\x17D\x17E\a\x18\x2\x2\x17E\x180\a\x30\x2\x2\x17F\x181\a\x31\x2\x2\x180"+
		"\x17F\x3\x2\x2\x2\x180\x181\x3\x2\x2\x2\x181\x183\x3\x2\x2\x2\x182\x184"+
		"\x5^\x30\x2\x183\x182\x3\x2\x2\x2\x183\x184\x3\x2\x2\x2\x184\x186\x3\x2"+
		"\x2\x2\x185\x187\x5(\x15\x2\x186\x185\x3\x2\x2\x2\x186\x187\x3\x2\x2\x2"+
		"\x187I\x3\x2\x2\x2\x188\x189\a\x18\x2\x2\x189\x18B\a\x32\x2\x2\x18A\x18C"+
		"\x5^\x30\x2\x18B\x18A\x3\x2\x2\x2\x18B\x18C\x3\x2\x2\x2\x18CK\x3\x2\x2"+
		"\x2\x18D\x196\x5N(\x2\x18E\x196\x5P)\x2\x18F\x196\x5R*\x2\x190\x196\x5"+
		"T+\x2\x191\x196\x5V,\x2\x192\x196\x5X-\x2\x193\x196\x5Z.\x2\x194\x196"+
		"\x5\\/\x2\x195\x18D\x3\x2\x2\x2\x195\x18E\x3\x2\x2\x2\x195\x18F\x3\x2"+
		"\x2\x2\x195\x190\x3\x2\x2\x2\x195\x191\x3\x2\x2\x2\x195\x192\x3\x2\x2"+
		"\x2\x195\x193\x3\x2\x2\x2\x195\x194\x3\x2\x2\x2\x196M\x3\x2\x2\x2\x197"+
		"\x199\a\x19\x2\x2\x198\x19A\t\r\x2\x2\x199\x198\x3\x2\x2\x2\x199\x19A"+
		"\x3\x2\x2\x2\x19A\x19C\x3\x2\x2\x2\x19B\x19D\x5,\x17\x2\x19C\x19B\x3\x2"+
		"\x2\x2\x19C\x19D\x3\x2\x2\x2\x19D\x19F\x3\x2\x2\x2\x19E\x1A0\x5^\x30\x2"+
		"\x19F\x19E\x3\x2\x2\x2\x19F\x1A0\x3\x2\x2\x2\x1A0O\x3\x2\x2\x2\x1A1\x1A2"+
		"\a\x19\x2\x2\x1A2\x1A4\a)\x2\x2\x1A3\x1A5\x5^\x30\x2\x1A4\x1A3\x3\x2\x2"+
		"\x2\x1A4\x1A5\x3\x2\x2\x2\x1A5Q\x3\x2\x2\x2\x1A6\x1A7\a\x19\x2\x2\x1A7"+
		"\x1A9\a*\x2\x2\x1A8\x1AA\x5^\x30\x2\x1A9\x1A8\x3\x2\x2\x2\x1A9\x1AA\x3"+
		"\x2\x2\x2\x1AA\x1AC\x3\x2\x2\x2\x1AB\x1AD\x5(\x15\x2\x1AC\x1AB\x3\x2\x2"+
		"\x2\x1AC\x1AD\x3\x2\x2\x2\x1AD\x1B0\x3\x2\x2\x2\x1AE\x1AF\a\x4\x2\x2\x1AF"+
		"\x1B1\x5\x1E\x10\x2\x1B0\x1AE\x3\x2\x2\x2\x1B0\x1B1\x3\x2\x2\x2\x1B1S"+
		"\x3\x2\x2\x2\x1B2\x1B3\a\x19\x2\x2\x1B3\x1B5\a+\x2\x2\x1B4\x1B6\x5^\x30"+
		"\x2\x1B5\x1B4\x3\x2\x2\x2\x1B5\x1B6\x3\x2\x2\x2\x1B6\x1B8\x3\x2\x2\x2"+
		"\x1B7\x1B9\x5(\x15\x2\x1B8\x1B7\x3\x2\x2\x2\x1B8\x1B9\x3\x2\x2\x2\x1B9"+
		"\x1BC\x3\x2\x2\x2\x1BA\x1BB\a\x4\x2\x2\x1BB\x1BD\x5\x1E\x10\x2\x1BC\x1BA"+
		"\x3\x2\x2\x2\x1BC\x1BD\x3\x2\x2\x2\x1BDU\x3\x2\x2\x2\x1BE\x1BF\a\x19\x2"+
		"\x2\x1BF\x1C1\a-\x2\x2\x1C0\x1C2\x5^\x30\x2\x1C1\x1C0\x3\x2\x2\x2\x1C1"+
		"\x1C2\x3\x2\x2\x2\x1C2W\x3\x2\x2\x2\x1C3\x1C4\a\x19\x2\x2\x1C4\x1C6\a"+
		".\x2\x2\x1C5\x1C7\x5^\x30\x2\x1C6\x1C5\x3\x2\x2\x2\x1C6\x1C7\x3\x2\x2"+
		"\x2\x1C7\x1C9\x3\x2\x2\x2\x1C8\x1CA\x5(\x15\x2\x1C9\x1C8\x3\x2\x2\x2\x1C9"+
		"\x1CA\x3\x2\x2\x2\x1CAY\x3\x2\x2\x2\x1CB\x1CC\a\x19\x2\x2\x1CC\x1CE\a"+
		"\x30\x2\x2\x1CD\x1CF\a\x31\x2\x2\x1CE\x1CD\x3\x2\x2\x2\x1CE\x1CF\x3\x2"+
		"\x2\x2\x1CF\x1D1\x3\x2\x2\x2\x1D0\x1D2\x5^\x30\x2\x1D1\x1D0\x3\x2\x2\x2"+
		"\x1D1\x1D2\x3\x2\x2\x2\x1D2\x1D4\x3\x2\x2\x2\x1D3\x1D5\x5(\x15\x2\x1D4"+
		"\x1D3\x3\x2\x2\x2\x1D4\x1D5\x3\x2\x2\x2\x1D5[\x3\x2\x2\x2\x1D6\x1D7\a"+
		"\x19\x2\x2\x1D7\x1D9\a\x32\x2\x2\x1D8\x1DA\x5^\x30\x2\x1D9\x1D8\x3\x2"+
		"\x2\x2\x1D9\x1DA\x3\x2\x2\x2\x1DA]\x3\x2\x2\x2\x1DB\x1DC\b\x30\x1\x2\x1DC"+
		"\x1DD\t\x5\x2\x2\x1DD\x1E4\x5^\x30\x5\x1DE\x1E4\x5`\x31\x2\x1DF\x1E0\a"+
		"\x11\x2\x2\x1E0\x1E1\x5^\x30\x2\x1E1\x1E2\a\x12\x2\x2\x1E2\x1E4\x3\x2"+
		"\x2\x2\x1E3\x1DB\x3\x2\x2\x2\x1E3\x1DE\x3\x2\x2\x2\x1E3\x1DF\x3\x2\x2"+
		"\x2\x1E4\x1ED\x3\x2\x2\x2\x1E5\x1E6\f\a\x2\x2\x1E6\x1E7\a\x46\x2\x2\x1E7"+
		"\x1EC\x5^\x30\b\x1E8\x1E9\f\x6\x2\x2\x1E9\x1EA\t\x5\x2\x2\x1EA\x1EC\x5"+
		"^\x30\a\x1EB\x1E5\x3\x2\x2\x2\x1EB\x1E8\x3\x2\x2\x2\x1EC\x1EF\x3\x2\x2"+
		"\x2\x1ED\x1EB\x3\x2\x2\x2\x1ED\x1EE\x3\x2\x2\x2\x1EE_\x3\x2\x2\x2\x1EF"+
		"\x1ED\x3\x2\x2\x2\x1F0\x1F2\a\x34\x2\x2\x1F1\x1F0\x3\x2\x2\x2\x1F1\x1F2"+
		"\x3\x2\x2\x2\x1F2\x1F4\x3\x2\x2\x2\x1F3\x1F5\a?\x2\x2\x1F4\x1F3\x3\x2"+
		"\x2\x2\x1F4\x1F5\x3\x2\x2\x2\x1F5\x1F7\x3\x2\x2\x2\x1F6\x1F8\a>\x2\x2"+
		"\x1F7\x1F6\x3\x2\x2\x2\x1F7\x1F8\x3\x2\x2\x2\x1F8\x1FD\x3\x2\x2\x2\x1F9"+
		"\x1FA\a\x1A\x2\x2\x1FA\x1FB\x5*\x16\x2\x1FB\x1FC\a\x1B\x2\x2\x1FC\x1FE"+
		"\x3\x2\x2\x2\x1FD\x1F9\x3\x2\x2\x2\x1FD\x1FE\x3\x2\x2\x2\x1FE\x61\x3\x2"+
		"\x2\x2Thtx|\x84\x88\x8C\x93\xA1\xA4\xA8\xAF\xB5\xBA\xBE\xCB\xD3\xD5\xD9"+
		"\xDC\xDF\xE2\xE5\xE8\xF2\xFA\xFC\x100\x103\x106\x109\x111\x118\x11D\x122"+
		"\x128\x12D\x13E\x142\x145\x148\x14D\x152\x155\x159\x15E\x161\x165\x16A"+
		"\x16F\x172\x177\x17B\x180\x183\x186\x18B\x195\x199\x19C\x19F\x1A4\x1A9"+
		"\x1AC\x1B0\x1B5\x1B8\x1BC\x1C1\x1C6\x1C9\x1CE\x1D1\x1D4\x1D9\x1E3\x1EB"+
		"\x1ED\x1F1\x1F4\x1F7\x1FD";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace AccountingServer.Console
