//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.4.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\b1f6c1c4\Documents\GitHub\ProfessionalAccounting\Server\AccountingServer.QueryGeneration\Console.g4 by ANTLR 4.4.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace AccountingServer.Console {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.4.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class ConsoleParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, ChartArea=29, Series=30, Ignore=31, 
		Launch=32, Connect=33, Shutdown=34, Backup=35, Mobile=36, Fetch=37, Help=38, 
		Titles=39, Exit=40, Check=41, EditNamedQueries=42, AOAll=43, AOList=44, 
		AOQuery=45, AORegister=46, AOUnregister=47, ARedep=48, OReamo=49, AOResetSoft=50, 
		AOResetHard=51, AOApply=52, AOCollapse=53, AOCheck=54, SubtotalFields=55, 
		Guid=56, RangeNull=57, RangeAllNotNull=58, RangeAYear=59, RangeAMonth=60, 
		RangeDeltaMonth=61, RangeADay=62, RangeDeltaDay=63, RangeDeltaWeek=64, 
		VoucherType=65, CaretQuotedString=66, PercentQuotedString=67, DollarQuotedString=68, 
		DoubleQuotedString=69, SingleQuotedString=70, DetailTitle=71, DetailTitleSubTitle=72, 
		Float=73, Percent=74, Intersect=75, Union=76, Substract=77, WS=78;
	public const int
		RULE_command = 0, RULE_otherCommand = 1, RULE_chart = 2, RULE_chartLevels = 3, 
		RULE_chartLevel = 4, RULE_report = 5, RULE_namedQueryTemplate = 6, RULE_namedQuery = 7, 
		RULE_namedQueries = 8, RULE_namedQ = 9, RULE_namedQueryReference = 10, 
		RULE_name = 11, RULE_coef = 12, RULE_groupedQuery = 13, RULE_subtotal = 14, 
		RULE_subtotalAggr = 15, RULE_voucherDetailQuery = 16, RULE_emit = 17, 
		RULE_vouchers = 18, RULE_vouchersB = 19, RULE_voucherQuery = 20, RULE_details = 21, 
		RULE_detailQuery = 22, RULE_range = 23, RULE_rangeCore = 24, RULE_rangePoint = 25, 
		RULE_rangeCertainPoint = 26, RULE_rangeYear = 27, RULE_rangeMonth = 28, 
		RULE_rangeWeek = 29, RULE_rangeDay = 30, RULE_asset = 31, RULE_assetList = 32, 
		RULE_assetQuery = 33, RULE_assetRegister = 34, RULE_assetUnregister = 35, 
		RULE_assetRedep = 36, RULE_assetResetSoft = 37, RULE_assetResetHard = 38, 
		RULE_assetApply = 39, RULE_assetCheck = 40, RULE_amort = 41, RULE_amortList = 42, 
		RULE_amortQuery = 43, RULE_amortRegister = 44, RULE_amortUnregister = 45, 
		RULE_amortReamo = 46, RULE_amortResetSoft = 47, RULE_amortApply = 48, 
		RULE_amortCheck = 49, RULE_distributedQ = 50, RULE_distributedQAtom = 51;
	public static readonly string[] ruleNames = {
		"command", "otherCommand", "chart", "chartLevels", "chartLevel", "report", 
		"namedQueryTemplate", "namedQuery", "namedQueries", "namedQ", "namedQueryReference", 
		"name", "coef", "groupedQuery", "subtotal", "subtotalAggr", "voucherDetailQuery", 
		"emit", "vouchers", "vouchersB", "voucherQuery", "details", "detailQuery", 
		"range", "rangeCore", "rangePoint", "rangeCertainPoint", "rangeYear", 
		"rangeMonth", "rangeWeek", "rangeDay", "asset", "assetList", "assetQuery", 
		"assetRegister", "assetUnregister", "assetRedep", "assetResetSoft", "assetResetHard", 
		"assetApply", "assetCheck", "amort", "amortList", "amortQuery", "amortRegister", 
		"amortUnregister", "amortReamo", "amortResetSoft", "amortApply", "amortCheck", 
		"distributedQ", "distributedQAtom"
	};

	private static readonly string[] _LiteralNames = {
		null, "'ch'", "';'", "':'", "'='", "'rp'", "'::'", "'|'", "'`'", "'``'", 
		"'D'", "'[]'", "'['", "']'", "'A'", "'{'", "'}'", "'E'", "'('", "')'", 
		"'>'", "'<'", "'~'", "'@'", "'#'", "'a'", "'o'", "'[['", "']]'", "'chartArea'", 
		"'series'", "'ignore'", null, null, null, "'backup'", null, "'fetch'", 
		null, null, "'exit'", null, "'nq'", "'-all'", null, null, null, null, 
		null, null, "'-reset-soft'", "'-reset-hard'", null, null, "'-chk'", null, 
		null, "'null'", "'~null'", null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "'*'", "'+'", "'-'", "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "ChartArea", "Series", "Ignore", "Launch", 
		"Connect", "Shutdown", "Backup", "Mobile", "Fetch", "Help", "Titles", 
		"Exit", "Check", "EditNamedQueries", "AOAll", "AOList", "AOQuery", "AORegister", 
		"AOUnregister", "ARedep", "OReamo", "AOResetSoft", "AOResetHard", "AOApply", 
		"AOCollapse", "AOCheck", "SubtotalFields", "Guid", "RangeNull", "RangeAllNotNull", 
		"RangeAYear", "RangeAMonth", "RangeDeltaMonth", "RangeADay", "RangeDeltaDay", 
		"RangeDeltaWeek", "VoucherType", "CaretQuotedString", "PercentQuotedString", 
		"DollarQuotedString", "DoubleQuotedString", "SingleQuotedString", "DetailTitle", 
		"DetailTitleSubTitle", "Float", "Percent", "Intersect", "Union", "Substract", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Console.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }


		protected const int EOF = Eof;

	public ConsoleParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CommandContext : ParserRuleContext {
		public AssetContext asset() {
			return GetRuleContext<AssetContext>(0);
		}
		public GroupedQueryContext groupedQuery() {
			return GetRuleContext<GroupedQueryContext>(0);
		}
		public ChartContext chart() {
			return GetRuleContext<ChartContext>(0);
		}
		public AmortContext amort() {
			return GetRuleContext<AmortContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(ConsoleParser.Eof, 0); }
		public OtherCommandContext otherCommand() {
			return GetRuleContext<OtherCommandContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public ReportContext report() {
			return GetRuleContext<ReportContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_command);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 104; vouchers();
				}
				break;

			case 2:
				{
				State = 105; groupedQuery();
				}
				break;

			case 3:
				{
				State = 106; chart();
				}
				break;

			case 4:
				{
				State = 107; report();
				}
				break;

			case 5:
				{
				State = 108; asset();
				}
				break;

			case 6:
				{
				State = 109; amort();
				}
				break;

			case 7:
				{
				State = 110; otherCommand();
				}
				break;
			}
			State = 113; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherCommandContext : ParserRuleContext {
		public ITerminalNode Connect() { return GetToken(ConsoleParser.Connect, 0); }
		public ITerminalNode Backup() { return GetToken(ConsoleParser.Backup, 0); }
		public ITerminalNode EditNamedQueries() { return GetToken(ConsoleParser.EditNamedQueries, 0); }
		public ITerminalNode Shutdown() { return GetToken(ConsoleParser.Shutdown, 0); }
		public ITerminalNode Fetch() { return GetToken(ConsoleParser.Fetch, 0); }
		public ITerminalNode Mobile() { return GetToken(ConsoleParser.Mobile, 0); }
		public ITerminalNode Help() { return GetToken(ConsoleParser.Help, 0); }
		public ITerminalNode Check() { return GetToken(ConsoleParser.Check, 0); }
		public ITerminalNode Launch() { return GetToken(ConsoleParser.Launch, 0); }
		public ITerminalNode Exit() { return GetToken(ConsoleParser.Exit, 0); }
		public ITerminalNode Titles() { return GetToken(ConsoleParser.Titles, 0); }
		public OtherCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherCommand; } }
	}

	[RuleVersion(0)]
	public OtherCommandContext otherCommand() {
		OtherCommandContext _localctx = new OtherCommandContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_otherCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Launch) | (1L << Connect) | (1L << Shutdown) | (1L << Backup) | (1L << Mobile) | (1L << Fetch) | (1L << Help) | (1L << Titles) | (1L << Exit) | (1L << Check) | (1L << EditNamedQueries))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChartContext : ParserRuleContext {
		public NamedQueryContext namedQuery() {
			return GetRuleContext<NamedQueryContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ChartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chart; } }
	}

	[RuleVersion(0)]
	public ChartContext chart() {
		ChartContext _localctx = new ChartContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_chart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; Match(T__0);
			State = 118; namedQuery();
			State = 120;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__10 - 4)) | (1L << (T__11 - 4)) | (1L << (T__21 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 119; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChartLevelsContext : ParserRuleContext {
		public ChartLevelContext chartLevel(int i) {
			return GetRuleContext<ChartLevelContext>(i);
		}
		public IReadOnlyList<ChartLevelContext> chartLevel() {
			return GetRuleContexts<ChartLevelContext>();
		}
		public ChartLevelsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chartLevels; } }
	}

	[RuleVersion(0)]
	public ChartLevelsContext chartLevels() {
		ChartLevelsContext _localctx = new ChartLevelsContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_chartLevels);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122; chartLevel();
			State = 127;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__1) {
				{
				{
				State = 123; Match(T__1);
				State = 124; chartLevel();
				}
				}
				State = 129;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChartLevelContext : ParserRuleContext {
		public ITerminalNode Series() { return GetToken(ConsoleParser.Series, 0); }
		public ITerminalNode SingleQuotedString(int i) {
			return GetToken(ConsoleParser.SingleQuotedString, i);
		}
		public ITerminalNode Ignore() { return GetToken(ConsoleParser.Ignore, 0); }
		public IReadOnlyList<ITerminalNode> SingleQuotedString() { return GetTokens(ConsoleParser.SingleQuotedString); }
		public ITerminalNode ChartArea() { return GetToken(ConsoleParser.ChartArea, 0); }
		public ChartLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chartLevel; } }
	}

	[RuleVersion(0)]
	public ChartLevelContext chartLevel() {
		ChartLevelContext _localctx = new ChartLevelContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_chartLevel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ChartArea) | (1L << Series) | (1L << Ignore))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 140;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 131; Match(T__2);
				State = 137;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==SingleQuotedString) {
					{
					{
					State = 132; Match(SingleQuotedString);
					State = 133; Match(T__3);
					State = 134; Match(SingleQuotedString);
					}
					}
					State = 139;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReportContext : ParserRuleContext {
		public NamedQueryContext namedQuery() {
			return GetRuleContext<NamedQueryContext>(0);
		}
		public GroupedQueryContext groupedQuery() {
			return GetRuleContext<GroupedQueryContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ReportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_report; } }
	}

	[RuleVersion(0)]
	public ReportContext report() {
		ReportContext _localctx = new ReportContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_report);
		int _la;
		try {
			State = 149;
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 142; Match(T__4);
				State = 143; namedQuery();
				State = 145;
				_la = _input.La(1);
				if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__10 - 4)) | (1L << (T__11 - 4)) | (1L << (T__21 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
					{
					State = 144; range();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 147; Match(T__4);
				State = 148; groupedQuery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedQueryTemplateContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NamedQueryTemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedQueryTemplate; } }
	}

	[RuleVersion(0)]
	public NamedQueryTemplateContext namedQueryTemplate() {
		NamedQueryTemplateContext _localctx = new NamedQueryTemplateContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_namedQueryTemplate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151; name();
			State = 152; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedQueryContext : ParserRuleContext {
		public NamedQContext namedQ() {
			return GetRuleContext<NamedQContext>(0);
		}
		public NamedQueryReferenceContext namedQueryReference() {
			return GetRuleContext<NamedQueryReferenceContext>(0);
		}
		public NamedQueriesContext namedQueries() {
			return GetRuleContext<NamedQueriesContext>(0);
		}
		public NamedQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedQuery; } }
	}

	[RuleVersion(0)]
	public NamedQueryContext namedQuery() {
		NamedQueryContext _localctx = new NamedQueryContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_namedQuery);
		try {
			State = 157;
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 154; namedQueries();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 155; namedQ();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 156; namedQueryReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedQueriesContext : ParserRuleContext {
		public CoefContext coef() {
			return GetRuleContext<CoefContext>(0);
		}
		public IReadOnlyList<NamedQueryContext> namedQuery() {
			return GetRuleContexts<NamedQueryContext>();
		}
		public ITerminalNode DoubleQuotedString() { return GetToken(ConsoleParser.DoubleQuotedString, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NamedQueryContext namedQuery(int i) {
			return GetRuleContext<NamedQueryContext>(i);
		}
		public NamedQueriesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedQueries; } }
	}

	[RuleVersion(0)]
	public NamedQueriesContext namedQueries() {
		NamedQueriesContext _localctx = new NamedQueriesContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_namedQueries);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159; name();
			State = 161;
			_la = _input.La(1);
			if (_la==Intersect) {
				{
				State = 160; coef();
				}
			}

			State = 164;
			_la = _input.La(1);
			if (_la==DoubleQuotedString) {
				{
				State = 163; Match(DoubleQuotedString);
				}
			}

			State = 166; Match(T__5);
			State = 167; namedQuery();
			State = 172;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__6) {
				{
				{
				State = 168; Match(T__6);
				State = 169; namedQuery();
				}
				}
				State = 174;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 175; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedQContext : ParserRuleContext {
		public CoefContext coef() {
			return GetRuleContext<CoefContext>(0);
		}
		public GroupedQueryContext groupedQuery() {
			return GetRuleContext<GroupedQueryContext>(0);
		}
		public ITerminalNode DoubleQuotedString() { return GetToken(ConsoleParser.DoubleQuotedString, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NamedQContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedQ; } }
	}

	[RuleVersion(0)]
	public NamedQContext namedQ() {
		NamedQContext _localctx = new NamedQContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_namedQ);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177; name();
			State = 179;
			_la = _input.La(1);
			if (_la==Intersect) {
				{
				State = 178; coef();
				}
			}

			State = 182;
			_la = _input.La(1);
			if (_la==DoubleQuotedString) {
				{
				State = 181; Match(DoubleQuotedString);
				}
			}

			State = 184; Match(T__2);
			State = 185; groupedQuery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedQueryReferenceContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NamedQueryReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedQueryReference; } }
	}

	[RuleVersion(0)]
	public NamedQueryReferenceContext namedQueryReference() {
		NamedQueryReferenceContext _localctx = new NamedQueryReferenceContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_namedQueryReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187; name();
			State = 188; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public ITerminalNode DollarQuotedString() { return GetToken(ConsoleParser.DollarQuotedString, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190; Match(DollarQuotedString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CoefContext : ParserRuleContext {
		public ITerminalNode Percent() { return GetToken(ConsoleParser.Percent, 0); }
		public ITerminalNode Float() { return GetToken(ConsoleParser.Float, 0); }
		public CoefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coef; } }
	}

	[RuleVersion(0)]
	public CoefContext coef() {
		CoefContext _localctx = new CoefContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_coef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192; Match(Intersect);
			State = 193;
			_la = _input.La(1);
			if ( !(_la==Float || _la==Percent) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupedQueryContext : ParserRuleContext {
		public SubtotalContext subtotal() {
			return GetRuleContext<SubtotalContext>(0);
		}
		public VoucherDetailQueryContext voucherDetailQuery() {
			return GetRuleContext<VoucherDetailQueryContext>(0);
		}
		public GroupedQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupedQuery; } }
	}

	[RuleVersion(0)]
	public GroupedQueryContext groupedQuery() {
		GroupedQueryContext _localctx = new GroupedQueryContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_groupedQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195; voucherDetailQuery();
			State = 196; subtotal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtotalContext : ParserRuleContext {
		public IToken SubtotalMark;
		public ITerminalNode SubtotalFields() { return GetToken(ConsoleParser.SubtotalFields, 0); }
		public SubtotalAggrContext subtotalAggr() {
			return GetRuleContext<SubtotalAggrContext>(0);
		}
		public SubtotalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtotal; } }
	}

	[RuleVersion(0)]
	public SubtotalContext subtotal() {
		SubtotalContext _localctx = new SubtotalContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_subtotal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			_localctx.SubtotalMark = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==T__7 || _la==T__8) ) {
				_localctx.SubtotalMark = _errHandler.RecoverInline(this);
			}
			Consume();
			State = 200;
			_la = _input.La(1);
			if (_la==SubtotalFields) {
				{
				State = 199; Match(SubtotalFields);
				}
			}

			State = 203;
			_la = _input.La(1);
			if (_la==T__9) {
				{
				State = 202; subtotalAggr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtotalAggrContext : ParserRuleContext {
		public IToken IsAll;
		public RangeCoreContext rangeCore() {
			return GetRuleContext<RangeCoreContext>(0);
		}
		public SubtotalAggrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtotalAggr; } }
	}

	[RuleVersion(0)]
	public SubtotalAggrContext subtotalAggr() {
		SubtotalAggrContext _localctx = new SubtotalAggrContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_subtotalAggr);
		try {
			State = 214;
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 205; Match(T__9);
				State = 207;
				switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
				case 1:
					{
					State = 206; _localctx.IsAll = Match(T__10);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 209; Match(T__9);
				State = 210; Match(T__11);
				State = 211; rangeCore();
				State = 212; Match(T__12);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoucherDetailQueryContext : ParserRuleContext {
		public VoucherQueryContext voucherQuery() {
			return GetRuleContext<VoucherQueryContext>(0);
		}
		public EmitContext emit() {
			return GetRuleContext<EmitContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public VoucherDetailQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voucherDetailQuery; } }
	}

	[RuleVersion(0)]
	public VoucherDetailQueryContext voucherDetailQuery() {
		VoucherDetailQueryContext _localctx = new VoucherDetailQueryContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_voucherDetailQuery);
		try {
			State = 220;
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 216; vouchers();
				State = 217; emit();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 219; voucherQuery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmitContext : ParserRuleContext {
		public IToken Op;
		public DetailsContext details() {
			return GetRuleContext<DetailsContext>(0);
		}
		public EmitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emit; } }
	}

	[RuleVersion(0)]
	public EmitContext emit() {
		EmitContext _localctx = new EmitContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_emit);
		try {
			State = 225;
			switch (_input.La(1)) {
			case T__13:
				EnterOuterAlt(_localctx, 1);
				{
				State = 222; _localctx.Op = Match(T__13);
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 223; Match(T__2);
				State = 224; details(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VouchersContext : ParserRuleContext {
		public VoucherQueryContext voucherQuery() {
			return GetRuleContext<VoucherQueryContext>(0);
		}
		public VouchersBContext vouchersB() {
			return GetRuleContext<VouchersBContext>(0);
		}
		public VouchersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vouchers; } }
	}

	[RuleVersion(0)]
	public VouchersContext vouchers() {
		VouchersContext _localctx = new VouchersContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_vouchers);
		try {
			State = 229;
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 227; vouchersB(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 228; voucherQuery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VouchersBContext : ParserRuleContext {
		public IToken Op;
		public VouchersBContext vouchersB(int i) {
			return GetRuleContext<VouchersBContext>(i);
		}
		public VoucherQueryContext voucherQuery() {
			return GetRuleContext<VoucherQueryContext>(0);
		}
		public IReadOnlyList<VouchersBContext> vouchersB() {
			return GetRuleContexts<VouchersBContext>();
		}
		public VouchersBContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vouchersB; } }
	}

	[RuleVersion(0)]
	public VouchersBContext vouchersB() {
		return vouchersB(0);
	}

	private VouchersBContext vouchersB(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		VouchersBContext _localctx = new VouchersBContext(_ctx, _parentState);
		VouchersBContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_vouchersB, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				{
				State = 232;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==Union || _la==Substract) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 233; vouchersB(3);
				}
				break;

			case 2:
				{
				State = 234; Match(T__14);
				State = 235; voucherQuery();
				State = 236; Match(T__15);
				}
				break;

			case 3:
				{
				State = 238; Match(T__14);
				State = 239; vouchersB(0);
				State = 240; Match(T__15);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 252;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 250;
					switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
					case 1:
						{
						_localctx = new VouchersBContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_vouchersB);
						State = 244;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 245; _localctx.Op = Match(Intersect);
						State = 246; vouchersB(6);
						}
						break;

					case 2:
						{
						_localctx = new VouchersBContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_vouchersB);
						State = 247;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 248;
						_localctx.Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==Union || _la==Substract) ) {
							_localctx.Op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 249; vouchersB(5);
						}
						break;
					}
					} 
				}
				State = 254;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VoucherQueryContext : ParserRuleContext {
		public IToken Op;
		public ITerminalNode CaretQuotedString() { return GetToken(ConsoleParser.CaretQuotedString, 0); }
		public ITerminalNode PercentQuotedString() { return GetToken(ConsoleParser.PercentQuotedString, 0); }
		public DetailsContext details() {
			return GetRuleContext<DetailsContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode VoucherType() { return GetToken(ConsoleParser.VoucherType, 0); }
		public VoucherQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voucherQuery; } }
	}

	[RuleVersion(0)]
	public VoucherQueryContext voucherQuery() {
		VoucherQueryContext _localctx = new VoucherQueryContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_voucherQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
			case 1:
				{
				State = 255; details(0);
				}
				break;
			}
			State = 259;
			switch ( Interpreter.AdaptivePredict(_input,24,_ctx) ) {
			case 1:
				{
				State = 258;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__13 || _la==T__16) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 262;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__10 - 4)) | (1L << (T__11 - 4)) | (1L << (T__21 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 261; range();
				}
			}

			State = 265;
			_la = _input.La(1);
			if (_la==CaretQuotedString) {
				{
				State = 264; Match(CaretQuotedString);
				}
			}

			State = 268;
			_la = _input.La(1);
			if (_la==PercentQuotedString) {
				{
				State = 267; Match(PercentQuotedString);
				}
			}

			State = 271;
			_la = _input.La(1);
			if (_la==VoucherType) {
				{
				State = 270; Match(VoucherType);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DetailsContext : ParserRuleContext {
		public IToken Op;
		public DetailsContext details(int i) {
			return GetRuleContext<DetailsContext>(i);
		}
		public IReadOnlyList<DetailsContext> details() {
			return GetRuleContexts<DetailsContext>();
		}
		public DetailQueryContext detailQuery() {
			return GetRuleContext<DetailQueryContext>(0);
		}
		public DetailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_details; } }
	}

	[RuleVersion(0)]
	public DetailsContext details() {
		return details(0);
	}

	private DetailsContext details(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		DetailsContext _localctx = new DetailsContext(_ctx, _parentState);
		DetailsContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_details, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				State = 274;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==Union || _la==Substract) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 275; details(3);
				}
				break;

			case 2:
				{
				State = 276; detailQuery();
				}
				break;

			case 3:
				{
				State = 277; Match(T__17);
				State = 278; details(0);
				State = 279; Match(T__18);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 291;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 289;
					switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
					case 1:
						{
						_localctx = new DetailsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_details);
						State = 283;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 284; _localctx.Op = Match(Intersect);
						State = 285; details(6);
						}
						break;

					case 2:
						{
						_localctx = new DetailsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_details);
						State = 286;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 287;
						_localctx.Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==Union || _la==Substract) ) {
							_localctx.Op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 288; details(5);
						}
						break;
					}
					} 
				}
				State = 293;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DetailQueryContext : ParserRuleContext {
		public IToken Direction;
		public ITerminalNode DetailTitleSubTitle() { return GetToken(ConsoleParser.DetailTitleSubTitle, 0); }
		public ITerminalNode DoubleQuotedString() { return GetToken(ConsoleParser.DoubleQuotedString, 0); }
		public ITerminalNode SingleQuotedString() { return GetToken(ConsoleParser.SingleQuotedString, 0); }
		public ITerminalNode DetailTitle() { return GetToken(ConsoleParser.DetailTitle, 0); }
		public DetailQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_detailQuery; } }
	}

	[RuleVersion(0)]
	public DetailQueryContext detailQuery() {
		DetailQueryContext _localctx = new DetailQueryContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_detailQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				State = 294;
				_la = _input.La(1);
				if ( !(_la==DetailTitle || _la==DetailTitleSubTitle) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 298;
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				{
				State = 297; Match(SingleQuotedString);
				}
				break;
			}
			State = 301;
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				{
				State = 300; Match(DoubleQuotedString);
				}
				break;
			}
			State = 304;
			switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
			case 1:
				{
				State = 303;
				_localctx.Direction = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__19 || _la==T__20) ) {
					_localctx.Direction = _errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public RangeCoreContext Core;
		public RangeCoreContext rangeCore() {
			return GetRuleContext<RangeCoreContext>(0);
		}
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_range);
		try {
			State = 312;
			switch (_input.La(1)) {
			case T__10:
				EnterOuterAlt(_localctx, 1);
				{
				State = 306; Match(T__10);
				}
				break;
			case T__3:
			case T__21:
			case T__22:
			case T__23:
			case RangeNull:
			case RangeAllNotNull:
			case RangeAYear:
			case RangeAMonth:
			case RangeDeltaMonth:
			case RangeADay:
			case RangeDeltaDay:
			case RangeDeltaWeek:
				EnterOuterAlt(_localctx, 2);
				{
				State = 307; _localctx.Core = rangeCore();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 3);
				{
				State = 308; Match(T__11);
				State = 309; _localctx.Core = rangeCore();
				State = 310; Match(T__12);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeCoreContext : ParserRuleContext {
		public RangeCertainPointContext Begin;
		public IToken Op;
		public RangeCertainPointContext End;
		public RangeCertainPointContext Certain;
		public ITerminalNode RangeNull() { return GetToken(ConsoleParser.RangeNull, 0); }
		public RangeCertainPointContext rangeCertainPoint(int i) {
			return GetRuleContext<RangeCertainPointContext>(i);
		}
		public ITerminalNode RangeAllNotNull() { return GetToken(ConsoleParser.RangeAllNotNull, 0); }
		public IReadOnlyList<RangeCertainPointContext> rangeCertainPoint() {
			return GetRuleContexts<RangeCertainPointContext>();
		}
		public RangeCoreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeCore; } }
	}

	[RuleVersion(0)]
	public RangeCoreContext rangeCore() {
		RangeCoreContext _localctx = new RangeCoreContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_rangeCore);
		int _la;
		try {
			State = 324;
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 314; Match(RangeNull);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 315; Match(RangeAllNotNull);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 316; _localctx.Begin = rangeCertainPoint();
				State = 317;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__3 || _la==T__21) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 319;
				_la = _input.La(1);
				if (((((_la - 23)) & ~0x3f) == 0 && ((1L << (_la - 23)) & ((1L << (T__22 - 23)) | (1L << (T__23 - 23)) | (1L << (RangeAYear - 23)) | (1L << (RangeAMonth - 23)) | (1L << (RangeDeltaMonth - 23)) | (1L << (RangeADay - 23)) | (1L << (RangeDeltaDay - 23)) | (1L << (RangeDeltaWeek - 23)))) != 0)) {
					{
					State = 318; _localctx.End = rangeCertainPoint();
					}
				}

				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 321;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__3 || _la==T__21) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 322; _localctx.End = rangeCertainPoint();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 323; _localctx.Certain = rangeCertainPoint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangePointContext : ParserRuleContext {
		public IToken All;
		public ITerminalNode RangeNull() { return GetToken(ConsoleParser.RangeNull, 0); }
		public RangeCertainPointContext rangeCertainPoint() {
			return GetRuleContext<RangeCertainPointContext>(0);
		}
		public RangePointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangePoint; } }
	}

	[RuleVersion(0)]
	public RangePointContext rangePoint() {
		RangePointContext _localctx = new RangePointContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_rangePoint);
		try {
			State = 329;
			switch (_input.La(1)) {
			case RangeNull:
				EnterOuterAlt(_localctx, 1);
				{
				State = 326; Match(RangeNull);
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 2);
				{
				State = 327; _localctx.All = Match(T__10);
				}
				break;
			case T__22:
			case T__23:
			case RangeAYear:
			case RangeAMonth:
			case RangeDeltaMonth:
			case RangeADay:
			case RangeDeltaDay:
			case RangeDeltaWeek:
				EnterOuterAlt(_localctx, 3);
				{
				State = 328; rangeCertainPoint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeCertainPointContext : ParserRuleContext {
		public RangeWeekContext rangeWeek() {
			return GetRuleContext<RangeWeekContext>(0);
		}
		public RangeYearContext rangeYear() {
			return GetRuleContext<RangeYearContext>(0);
		}
		public RangeMonthContext rangeMonth() {
			return GetRuleContext<RangeMonthContext>(0);
		}
		public RangeDayContext rangeDay() {
			return GetRuleContext<RangeDayContext>(0);
		}
		public RangeCertainPointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeCertainPoint; } }
	}

	[RuleVersion(0)]
	public RangeCertainPointContext rangeCertainPoint() {
		RangeCertainPointContext _localctx = new RangeCertainPointContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_rangeCertainPoint);
		try {
			State = 335;
			switch (_input.La(1)) {
			case RangeAYear:
				EnterOuterAlt(_localctx, 1);
				{
				State = 331; rangeYear();
				}
				break;
			case T__22:
			case T__23:
			case RangeAMonth:
			case RangeDeltaMonth:
				EnterOuterAlt(_localctx, 2);
				{
				State = 332; rangeMonth();
				}
				break;
			case RangeDeltaWeek:
				EnterOuterAlt(_localctx, 3);
				{
				State = 333; rangeWeek();
				}
				break;
			case RangeADay:
			case RangeDeltaDay:
				EnterOuterAlt(_localctx, 4);
				{
				State = 334; rangeDay();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeYearContext : ParserRuleContext {
		public ITerminalNode RangeAYear() { return GetToken(ConsoleParser.RangeAYear, 0); }
		public RangeYearContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeYear; } }
	}

	[RuleVersion(0)]
	public RangeYearContext rangeYear() {
		RangeYearContext _localctx = new RangeYearContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_rangeYear);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337; Match(RangeAYear);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeMonthContext : ParserRuleContext {
		public IToken Modifier;
		public ITerminalNode RangeDeltaMonth() { return GetToken(ConsoleParser.RangeDeltaMonth, 0); }
		public ITerminalNode RangeAMonth() { return GetToken(ConsoleParser.RangeAMonth, 0); }
		public RangeMonthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeMonth; } }
	}

	[RuleVersion(0)]
	public RangeMonthContext rangeMonth() {
		RangeMonthContext _localctx = new RangeMonthContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_rangeMonth);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340;
			_la = _input.La(1);
			if (_la==T__22 || _la==T__23) {
				{
				State = 339;
				_localctx.Modifier = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__22 || _la==T__23) ) {
					_localctx.Modifier = _errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			State = 342;
			_la = _input.La(1);
			if ( !(_la==RangeAMonth || _la==RangeDeltaMonth) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeWeekContext : ParserRuleContext {
		public ITerminalNode RangeDeltaWeek() { return GetToken(ConsoleParser.RangeDeltaWeek, 0); }
		public RangeWeekContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeWeek; } }
	}

	[RuleVersion(0)]
	public RangeWeekContext rangeWeek() {
		RangeWeekContext _localctx = new RangeWeekContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_rangeWeek);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344; Match(RangeDeltaWeek);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeDayContext : ParserRuleContext {
		public ITerminalNode RangeADay() { return GetToken(ConsoleParser.RangeADay, 0); }
		public ITerminalNode RangeDeltaDay() { return GetToken(ConsoleParser.RangeDeltaDay, 0); }
		public RangeDayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeDay; } }
	}

	[RuleVersion(0)]
	public RangeDayContext rangeDay() {
		RangeDayContext _localctx = new RangeDayContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_rangeDay);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 346;
			_la = _input.La(1);
			if ( !(_la==RangeADay || _la==RangeDeltaDay) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetContext : ParserRuleContext {
		public AssetRegisterContext assetRegister() {
			return GetRuleContext<AssetRegisterContext>(0);
		}
		public AssetUnregisterContext assetUnregister() {
			return GetRuleContext<AssetUnregisterContext>(0);
		}
		public AssetResetHardContext assetResetHard() {
			return GetRuleContext<AssetResetHardContext>(0);
		}
		public AssetResetSoftContext assetResetSoft() {
			return GetRuleContext<AssetResetSoftContext>(0);
		}
		public AssetApplyContext assetApply() {
			return GetRuleContext<AssetApplyContext>(0);
		}
		public AssetListContext assetList() {
			return GetRuleContext<AssetListContext>(0);
		}
		public AssetQueryContext assetQuery() {
			return GetRuleContext<AssetQueryContext>(0);
		}
		public AssetCheckContext assetCheck() {
			return GetRuleContext<AssetCheckContext>(0);
		}
		public AssetRedepContext assetRedep() {
			return GetRuleContext<AssetRedepContext>(0);
		}
		public AssetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asset; } }
	}

	[RuleVersion(0)]
	public AssetContext asset() {
		AssetContext _localctx = new AssetContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_asset);
		try {
			State = 357;
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 348; assetList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 349; assetQuery();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 350; assetRegister();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 351; assetUnregister();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 352; assetRedep();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 353; assetResetSoft();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 354; assetResetHard();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 355; assetApply();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 356; assetCheck();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetListContext : ParserRuleContext {
		public ITerminalNode AOList() { return GetToken(ConsoleParser.AOList, 0); }
		public ITerminalNode AOAll() { return GetToken(ConsoleParser.AOAll, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangePointContext rangePoint() {
			return GetRuleContext<RangePointContext>(0);
		}
		public AssetListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetList; } }
	}

	[RuleVersion(0)]
	public AssetListContext assetList() {
		AssetListContext _localctx = new AssetListContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_assetList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359; Match(T__24);
			State = 361;
			switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
			case 1:
				{
				State = 360;
				_la = _input.La(1);
				if ( !(_la==AOAll || _la==AOList) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 364;
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				{
				State = 363; rangePoint();
				}
				break;
			}
			State = 367;
			switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
			case 1:
				{
				State = 366; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetQueryContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOQuery() { return GetToken(ConsoleParser.AOQuery, 0); }
		public AssetQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetQuery; } }
	}

	[RuleVersion(0)]
	public AssetQueryContext assetQuery() {
		AssetQueryContext _localctx = new AssetQueryContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_assetQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369; Match(T__24);
			State = 370; Match(AOQuery);
			State = 372;
			switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
			case 1:
				{
				State = 371; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetRegisterContext : ParserRuleContext {
		public ITerminalNode AORegister() { return GetToken(ConsoleParser.AORegister, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AssetRegisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetRegister; } }
	}

	[RuleVersion(0)]
	public AssetRegisterContext assetRegister() {
		AssetRegisterContext _localctx = new AssetRegisterContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_assetRegister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374; Match(T__24);
			State = 375; Match(AORegister);
			State = 377;
			switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
			case 1:
				{
				State = 376; distributedQ(0);
				}
				break;
			}
			State = 380;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__10 - 4)) | (1L << (T__11 - 4)) | (1L << (T__21 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 379; range();
				}
			}

			State = 384;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 382; Match(T__2);
				State = 383; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetUnregisterContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode AOUnregister() { return GetToken(ConsoleParser.AOUnregister, 0); }
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AssetUnregisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetUnregister; } }
	}

	[RuleVersion(0)]
	public AssetUnregisterContext assetUnregister() {
		AssetUnregisterContext _localctx = new AssetUnregisterContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_assetUnregister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386; Match(T__24);
			State = 387; Match(AOUnregister);
			State = 389;
			switch ( Interpreter.AdaptivePredict(_input,50,_ctx) ) {
			case 1:
				{
				State = 388; distributedQ(0);
				}
				break;
			}
			State = 392;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__10 - 4)) | (1L << (T__11 - 4)) | (1L << (T__21 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 391; range();
				}
			}

			State = 396;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 394; Match(T__2);
				State = 395; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetRedepContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode ARedep() { return GetToken(ConsoleParser.ARedep, 0); }
		public AssetRedepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetRedep; } }
	}

	[RuleVersion(0)]
	public AssetRedepContext assetRedep() {
		AssetRedepContext _localctx = new AssetRedepContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_assetRedep);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398; Match(T__24);
			State = 399; Match(ARedep);
			State = 401;
			switch ( Interpreter.AdaptivePredict(_input,53,_ctx) ) {
			case 1:
				{
				State = 400; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetResetSoftContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOResetSoft() { return GetToken(ConsoleParser.AOResetSoft, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AssetResetSoftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetResetSoft; } }
	}

	[RuleVersion(0)]
	public AssetResetSoftContext assetResetSoft() {
		AssetResetSoftContext _localctx = new AssetResetSoftContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_assetResetSoft);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403; Match(T__24);
			State = 404; Match(AOResetSoft);
			State = 406;
			switch ( Interpreter.AdaptivePredict(_input,54,_ctx) ) {
			case 1:
				{
				State = 405; distributedQ(0);
				}
				break;
			}
			State = 409;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__10 - 4)) | (1L << (T__11 - 4)) | (1L << (T__21 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 408; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetResetHardContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOResetHard() { return GetToken(ConsoleParser.AOResetHard, 0); }
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AssetResetHardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetResetHard; } }
	}

	[RuleVersion(0)]
	public AssetResetHardContext assetResetHard() {
		AssetResetHardContext _localctx = new AssetResetHardContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_assetResetHard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411; Match(T__24);
			State = 412; Match(AOResetHard);
			State = 414;
			switch ( Interpreter.AdaptivePredict(_input,56,_ctx) ) {
			case 1:
				{
				State = 413; distributedQ(0);
				}
				break;
			}
			State = 418;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 416; Match(T__2);
				State = 417; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetApplyContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOCollapse() { return GetToken(ConsoleParser.AOCollapse, 0); }
		public ITerminalNode AOApply() { return GetToken(ConsoleParser.AOApply, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AssetApplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetApply; } }
	}

	[RuleVersion(0)]
	public AssetApplyContext assetApply() {
		AssetApplyContext _localctx = new AssetApplyContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_assetApply);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420; Match(T__24);
			State = 421; Match(AOApply);
			State = 423;
			switch ( Interpreter.AdaptivePredict(_input,58,_ctx) ) {
			case 1:
				{
				State = 422; Match(AOCollapse);
				}
				break;
			}
			State = 426;
			switch ( Interpreter.AdaptivePredict(_input,59,_ctx) ) {
			case 1:
				{
				State = 425; distributedQ(0);
				}
				break;
			}
			State = 429;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__10 - 4)) | (1L << (T__11 - 4)) | (1L << (T__21 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 428; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetCheckContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOCheck() { return GetToken(ConsoleParser.AOCheck, 0); }
		public AssetCheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetCheck; } }
	}

	[RuleVersion(0)]
	public AssetCheckContext assetCheck() {
		AssetCheckContext _localctx = new AssetCheckContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_assetCheck);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431; Match(T__24);
			State = 432; Match(AOCheck);
			State = 434;
			switch ( Interpreter.AdaptivePredict(_input,61,_ctx) ) {
			case 1:
				{
				State = 433; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortContext : ParserRuleContext {
		public AmortReamoContext amortReamo() {
			return GetRuleContext<AmortReamoContext>(0);
		}
		public AmortQueryContext amortQuery() {
			return GetRuleContext<AmortQueryContext>(0);
		}
		public AmortCheckContext amortCheck() {
			return GetRuleContext<AmortCheckContext>(0);
		}
		public AmortResetSoftContext amortResetSoft() {
			return GetRuleContext<AmortResetSoftContext>(0);
		}
		public AmortRegisterContext amortRegister() {
			return GetRuleContext<AmortRegisterContext>(0);
		}
		public AmortUnregisterContext amortUnregister() {
			return GetRuleContext<AmortUnregisterContext>(0);
		}
		public AmortApplyContext amortApply() {
			return GetRuleContext<AmortApplyContext>(0);
		}
		public AmortListContext amortList() {
			return GetRuleContext<AmortListContext>(0);
		}
		public AmortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amort; } }
	}

	[RuleVersion(0)]
	public AmortContext amort() {
		AmortContext _localctx = new AmortContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_amort);
		try {
			State = 444;
			switch ( Interpreter.AdaptivePredict(_input,62,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 436; amortList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 437; amortQuery();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 438; amortRegister();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 439; amortUnregister();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 440; amortReamo();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 441; amortResetSoft();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 442; amortApply();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 443; amortCheck();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortListContext : ParserRuleContext {
		public ITerminalNode AOList() { return GetToken(ConsoleParser.AOList, 0); }
		public ITerminalNode AOAll() { return GetToken(ConsoleParser.AOAll, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangePointContext rangePoint() {
			return GetRuleContext<RangePointContext>(0);
		}
		public AmortListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortList; } }
	}

	[RuleVersion(0)]
	public AmortListContext amortList() {
		AmortListContext _localctx = new AmortListContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_amortList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446; Match(T__25);
			State = 448;
			switch ( Interpreter.AdaptivePredict(_input,63,_ctx) ) {
			case 1:
				{
				State = 447;
				_la = _input.La(1);
				if ( !(_la==AOAll || _la==AOList) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 451;
			switch ( Interpreter.AdaptivePredict(_input,64,_ctx) ) {
			case 1:
				{
				State = 450; rangePoint();
				}
				break;
			}
			State = 454;
			switch ( Interpreter.AdaptivePredict(_input,65,_ctx) ) {
			case 1:
				{
				State = 453; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortQueryContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOQuery() { return GetToken(ConsoleParser.AOQuery, 0); }
		public AmortQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortQuery; } }
	}

	[RuleVersion(0)]
	public AmortQueryContext amortQuery() {
		AmortQueryContext _localctx = new AmortQueryContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_amortQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456; Match(T__25);
			State = 457; Match(AOQuery);
			State = 459;
			switch ( Interpreter.AdaptivePredict(_input,66,_ctx) ) {
			case 1:
				{
				State = 458; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortRegisterContext : ParserRuleContext {
		public ITerminalNode AORegister() { return GetToken(ConsoleParser.AORegister, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AmortRegisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortRegister; } }
	}

	[RuleVersion(0)]
	public AmortRegisterContext amortRegister() {
		AmortRegisterContext _localctx = new AmortRegisterContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_amortRegister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461; Match(T__25);
			State = 462; Match(AORegister);
			State = 464;
			switch ( Interpreter.AdaptivePredict(_input,67,_ctx) ) {
			case 1:
				{
				State = 463; distributedQ(0);
				}
				break;
			}
			State = 467;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__10 - 4)) | (1L << (T__11 - 4)) | (1L << (T__21 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 466; range();
				}
			}

			State = 471;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 469; Match(T__2);
				State = 470; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortUnregisterContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode AOUnregister() { return GetToken(ConsoleParser.AOUnregister, 0); }
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AmortUnregisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortUnregister; } }
	}

	[RuleVersion(0)]
	public AmortUnregisterContext amortUnregister() {
		AmortUnregisterContext _localctx = new AmortUnregisterContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_amortUnregister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473; Match(T__25);
			State = 474; Match(AOUnregister);
			State = 476;
			switch ( Interpreter.AdaptivePredict(_input,70,_ctx) ) {
			case 1:
				{
				State = 475; distributedQ(0);
				}
				break;
			}
			State = 479;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__10 - 4)) | (1L << (T__11 - 4)) | (1L << (T__21 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 478; range();
				}
			}

			State = 483;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 481; Match(T__2);
				State = 482; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortReamoContext : ParserRuleContext {
		public ITerminalNode OReamo() { return GetToken(ConsoleParser.OReamo, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public AmortReamoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortReamo; } }
	}

	[RuleVersion(0)]
	public AmortReamoContext amortReamo() {
		AmortReamoContext _localctx = new AmortReamoContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_amortReamo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 485; Match(T__25);
			State = 486; Match(OReamo);
			State = 488;
			switch ( Interpreter.AdaptivePredict(_input,73,_ctx) ) {
			case 1:
				{
				State = 487; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortResetSoftContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOResetSoft() { return GetToken(ConsoleParser.AOResetSoft, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AmortResetSoftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortResetSoft; } }
	}

	[RuleVersion(0)]
	public AmortResetSoftContext amortResetSoft() {
		AmortResetSoftContext _localctx = new AmortResetSoftContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_amortResetSoft);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 490; Match(T__25);
			State = 491; Match(AOResetSoft);
			State = 493;
			switch ( Interpreter.AdaptivePredict(_input,74,_ctx) ) {
			case 1:
				{
				State = 492; distributedQ(0);
				}
				break;
			}
			State = 496;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__10 - 4)) | (1L << (T__11 - 4)) | (1L << (T__21 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 495; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortApplyContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOCollapse() { return GetToken(ConsoleParser.AOCollapse, 0); }
		public ITerminalNode AOApply() { return GetToken(ConsoleParser.AOApply, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AmortApplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortApply; } }
	}

	[RuleVersion(0)]
	public AmortApplyContext amortApply() {
		AmortApplyContext _localctx = new AmortApplyContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_amortApply);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498; Match(T__25);
			State = 499; Match(AOApply);
			State = 501;
			switch ( Interpreter.AdaptivePredict(_input,76,_ctx) ) {
			case 1:
				{
				State = 500; Match(AOCollapse);
				}
				break;
			}
			State = 504;
			switch ( Interpreter.AdaptivePredict(_input,77,_ctx) ) {
			case 1:
				{
				State = 503; distributedQ(0);
				}
				break;
			}
			State = 507;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__10 - 4)) | (1L << (T__11 - 4)) | (1L << (T__21 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 506; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortCheckContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOCheck() { return GetToken(ConsoleParser.AOCheck, 0); }
		public AmortCheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortCheck; } }
	}

	[RuleVersion(0)]
	public AmortCheckContext amortCheck() {
		AmortCheckContext _localctx = new AmortCheckContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_amortCheck);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 509; Match(T__25);
			State = 510; Match(AOCheck);
			State = 512;
			switch ( Interpreter.AdaptivePredict(_input,79,_ctx) ) {
			case 1:
				{
				State = 511; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DistributedQContext : ParserRuleContext {
		public IToken Op;
		public DistributedQAtomContext distributedQAtom() {
			return GetRuleContext<DistributedQAtomContext>(0);
		}
		public DistributedQContext distributedQ(int i) {
			return GetRuleContext<DistributedQContext>(i);
		}
		public IReadOnlyList<DistributedQContext> distributedQ() {
			return GetRuleContexts<DistributedQContext>();
		}
		public DistributedQContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distributedQ; } }
	}

	[RuleVersion(0)]
	public DistributedQContext distributedQ() {
		return distributedQ(0);
	}

	private DistributedQContext distributedQ(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		DistributedQContext _localctx = new DistributedQContext(_ctx, _parentState);
		DistributedQContext _prevctx = _localctx;
		int _startState = 100;
		EnterRecursionRule(_localctx, 100, RULE_distributedQ, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 522;
			switch ( Interpreter.AdaptivePredict(_input,80,_ctx) ) {
			case 1:
				{
				State = 515;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==Union || _la==Substract) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 516; distributedQ(3);
				}
				break;

			case 2:
				{
				State = 517; distributedQAtom();
				}
				break;

			case 3:
				{
				State = 518; Match(T__17);
				State = 519; distributedQ(0);
				State = 520; Match(T__18);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 532;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,82,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 530;
					switch ( Interpreter.AdaptivePredict(_input,81,_ctx) ) {
					case 1:
						{
						_localctx = new DistributedQContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_distributedQ);
						State = 524;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 525; _localctx.Op = Match(Intersect);
						State = 526; distributedQ(6);
						}
						break;

					case 2:
						{
						_localctx = new DistributedQContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_distributedQ);
						State = 527;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 528;
						_localctx.Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==Union || _la==Substract) ) {
							_localctx.Op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 529; distributedQ(5);
						}
						break;
					}
					} 
				}
				State = 534;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,82,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DistributedQAtomContext : ParserRuleContext {
		public ITerminalNode DollarQuotedString() { return GetToken(ConsoleParser.DollarQuotedString, 0); }
		public ITerminalNode PercentQuotedString() { return GetToken(ConsoleParser.PercentQuotedString, 0); }
		public ITerminalNode Guid() { return GetToken(ConsoleParser.Guid, 0); }
		public RangeCoreContext rangeCore() {
			return GetRuleContext<RangeCoreContext>(0);
		}
		public DistributedQAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distributedQAtom; } }
	}

	[RuleVersion(0)]
	public DistributedQAtomContext distributedQAtom() {
		DistributedQAtomContext _localctx = new DistributedQAtomContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_distributedQAtom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 536;
			switch ( Interpreter.AdaptivePredict(_input,83,_ctx) ) {
			case 1:
				{
				State = 535; Match(Guid);
				}
				break;
			}
			State = 539;
			switch ( Interpreter.AdaptivePredict(_input,84,_ctx) ) {
			case 1:
				{
				State = 538; Match(DollarQuotedString);
				}
				break;
			}
			State = 542;
			switch ( Interpreter.AdaptivePredict(_input,85,_ctx) ) {
			case 1:
				{
				State = 541; Match(PercentQuotedString);
				}
				break;
			}
			State = 548;
			switch ( Interpreter.AdaptivePredict(_input,86,_ctx) ) {
			case 1:
				{
				State = 544; Match(T__26);
				State = 545; rangeCore();
				State = 546; Match(T__27);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 19: return vouchersB_sempred((VouchersBContext)_localctx, predIndex);

		case 21: return details_sempred((DetailsContext)_localctx, predIndex);

		case 50: return distributedQ_sempred((DistributedQContext)_localctx, predIndex);
		}
		return true;
	}
	private bool vouchersB_sempred(VouchersBContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 5);

		case 1: return Precpred(_ctx, 4);
		}
		return true;
	}
	private bool distributedQ_sempred(DistributedQContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(_ctx, 5);

		case 5: return Precpred(_ctx, 4);
		}
		return true;
	}
	private bool details_sempred(DetailsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 5);

		case 3: return Precpred(_ctx, 4);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3P\x229\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x3\x2\x3\x2\x3\x2\x3\x2"+
		"\x3\x2\x3\x2\x3\x2\x5\x2r\n\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3"+
		"\x4\x5\x4{\n\x4\x3\x5\x3\x5\x3\x5\a\x5\x80\n\x5\f\x5\xE\x5\x83\v\x5\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6\x8A\n\x6\f\x6\xE\x6\x8D\v\x6\x5\x6\x8F"+
		"\n\x6\x3\a\x3\a\x3\a\x5\a\x94\n\a\x3\a\x3\a\x5\a\x98\n\a\x3\b\x3\b\x3"+
		"\b\x3\t\x3\t\x3\t\x5\t\xA0\n\t\x3\n\x3\n\x5\n\xA4\n\n\x3\n\x5\n\xA7\n"+
		"\n\x3\n\x3\n\x3\n\x3\n\a\n\xAD\n\n\f\n\xE\n\xB0\v\n\x3\n\x3\n\x3\v\x3"+
		"\v\x5\v\xB6\n\v\x3\v\x5\v\xB9\n\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\r\x3"+
		"\r\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x5\x10\xCB\n\x10"+
		"\x3\x10\x5\x10\xCE\n\x10\x3\x11\x3\x11\x5\x11\xD2\n\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x5\x11\xD9\n\x11\x3\x12\x3\x12\x3\x12\x3\x12\x5"+
		"\x12\xDF\n\x12\x3\x13\x3\x13\x3\x13\x5\x13\xE4\n\x13\x3\x14\x3\x14\x5"+
		"\x14\xE8\n\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15"+
		"\x3\x15\x3\x15\x3\x15\x5\x15\xF5\n\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3"+
		"\x15\x3\x15\a\x15\xFD\n\x15\f\x15\xE\x15\x100\v\x15\x3\x16\x5\x16\x103"+
		"\n\x16\x3\x16\x5\x16\x106\n\x16\x3\x16\x5\x16\x109\n\x16\x3\x16\x5\x16"+
		"\x10C\n\x16\x3\x16\x5\x16\x10F\n\x16\x3\x16\x5\x16\x112\n\x16\x3\x17\x3"+
		"\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17\x11C\n\x17\x3\x17"+
		"\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\a\x17\x124\n\x17\f\x17\xE\x17\x127"+
		"\v\x17\x3\x18\x5\x18\x12A\n\x18\x3\x18\x5\x18\x12D\n\x18\x3\x18\x5\x18"+
		"\x130\n\x18\x3\x18\x5\x18\x133\n\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19"+
		"\x3\x19\x5\x19\x13B\n\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x142"+
		"\n\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x147\n\x1A\x3\x1B\x3\x1B\x3\x1B\x5"+
		"\x1B\x14C\n\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x152\n\x1C\x3\x1D\x3"+
		"\x1D\x3\x1E\x5\x1E\x157\n\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x3!"+
		"\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x5!\x168\n!\x3\"\x3\"\x5\"\x16C\n\"\x3"+
		"\"\x5\"\x16F\n\"\x3\"\x5\"\x172\n\"\x3#\x3#\x3#\x5#\x177\n#\x3$\x3$\x3"+
		"$\x5$\x17C\n$\x3$\x5$\x17F\n$\x3$\x3$\x5$\x183\n$\x3%\x3%\x3%\x5%\x188"+
		"\n%\x3%\x5%\x18B\n%\x3%\x3%\x5%\x18F\n%\x3&\x3&\x3&\x5&\x194\n&\x3\'\x3"+
		"\'\x3\'\x5\'\x199\n\'\x3\'\x5\'\x19C\n\'\x3(\x3(\x3(\x5(\x1A1\n(\x3(\x3"+
		"(\x5(\x1A5\n(\x3)\x3)\x3)\x5)\x1AA\n)\x3)\x5)\x1AD\n)\x3)\x5)\x1B0\n)"+
		"\x3*\x3*\x3*\x5*\x1B5\n*\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x5+\x1BF\n+\x3"+
		",\x3,\x5,\x1C3\n,\x3,\x5,\x1C6\n,\x3,\x5,\x1C9\n,\x3-\x3-\x3-\x5-\x1CE"+
		"\n-\x3.\x3.\x3.\x5.\x1D3\n.\x3.\x5.\x1D6\n.\x3.\x3.\x5.\x1DA\n.\x3/\x3"+
		"/\x3/\x5/\x1DF\n/\x3/\x5/\x1E2\n/\x3/\x3/\x5/\x1E6\n/\x3\x30\x3\x30\x3"+
		"\x30\x5\x30\x1EB\n\x30\x3\x31\x3\x31\x3\x31\x5\x31\x1F0\n\x31\x3\x31\x5"+
		"\x31\x1F3\n\x31\x3\x32\x3\x32\x3\x32\x5\x32\x1F8\n\x32\x3\x32\x5\x32\x1FB"+
		"\n\x32\x3\x32\x5\x32\x1FE\n\x32\x3\x33\x3\x33\x3\x33\x5\x33\x203\n\x33"+
		"\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x5\x34\x20D\n"+
		"\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\a\x34\x215\n\x34\f\x34"+
		"\xE\x34\x218\v\x34\x3\x35\x5\x35\x21B\n\x35\x3\x35\x5\x35\x21E\n\x35\x3"+
		"\x35\x5\x35\x221\n\x35\x3\x35\x3\x35\x3\x35\x3\x35\x5\x35\x227\n\x35\x3"+
		"\x35\x2\x2\x5(,\x66\x36\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2"+
		"\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2"+
		"*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2"+
		"\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62"+
		"\x2\x64\x2\x66\x2h\x2\x2\xF\x3\x2\",\x3\x2\x1F!\x3\x2KL\x3\x2\n\v\x3\x2"+
		"NO\x4\x2\x10\x10\x13\x13\x3\x2IJ\x3\x2\x16\x17\x4\x2\x6\x6\x18\x18\x3"+
		"\x2\x19\x1A\x3\x2>?\x3\x2@\x41\x3\x2-.\x268\x2q\x3\x2\x2\x2\x4u\x3\x2"+
		"\x2\x2\x6w\x3\x2\x2\x2\b|\x3\x2\x2\x2\n\x84\x3\x2\x2\x2\f\x97\x3\x2\x2"+
		"\x2\xE\x99\x3\x2\x2\x2\x10\x9F\x3\x2\x2\x2\x12\xA1\x3\x2\x2\x2\x14\xB3"+
		"\x3\x2\x2\x2\x16\xBD\x3\x2\x2\x2\x18\xC0\x3\x2\x2\x2\x1A\xC2\x3\x2\x2"+
		"\x2\x1C\xC5\x3\x2\x2\x2\x1E\xC8\x3\x2\x2\x2 \xD8\x3\x2\x2\x2\"\xDE\x3"+
		"\x2\x2\x2$\xE3\x3\x2\x2\x2&\xE7\x3\x2\x2\x2(\xF4\x3\x2\x2\x2*\x102\x3"+
		"\x2\x2\x2,\x11B\x3\x2\x2\x2.\x129\x3\x2\x2\x2\x30\x13A\x3\x2\x2\x2\x32"+
		"\x146\x3\x2\x2\x2\x34\x14B\x3\x2\x2\x2\x36\x151\x3\x2\x2\x2\x38\x153\x3"+
		"\x2\x2\x2:\x156\x3\x2\x2\x2<\x15A\x3\x2\x2\x2>\x15C\x3\x2\x2\x2@\x167"+
		"\x3\x2\x2\x2\x42\x169\x3\x2\x2\x2\x44\x173\x3\x2\x2\x2\x46\x178\x3\x2"+
		"\x2\x2H\x184\x3\x2\x2\x2J\x190\x3\x2\x2\x2L\x195\x3\x2\x2\x2N\x19D\x3"+
		"\x2\x2\x2P\x1A6\x3\x2\x2\x2R\x1B1\x3\x2\x2\x2T\x1BE\x3\x2\x2\x2V\x1C0"+
		"\x3\x2\x2\x2X\x1CA\x3\x2\x2\x2Z\x1CF\x3\x2\x2\x2\\\x1DB\x3\x2\x2\x2^\x1E7"+
		"\x3\x2\x2\x2`\x1EC\x3\x2\x2\x2\x62\x1F4\x3\x2\x2\x2\x64\x1FF\x3\x2\x2"+
		"\x2\x66\x20C\x3\x2\x2\x2h\x21A\x3\x2\x2\x2jr\x5&\x14\x2kr\x5\x1C\xF\x2"+
		"lr\x5\x6\x4\x2mr\x5\f\a\x2nr\x5@!\x2or\x5T+\x2pr\x5\x4\x3\x2qj\x3\x2\x2"+
		"\x2qk\x3\x2\x2\x2ql\x3\x2\x2\x2qm\x3\x2\x2\x2qn\x3\x2\x2\x2qo\x3\x2\x2"+
		"\x2qp\x3\x2\x2\x2rs\x3\x2\x2\x2st\a\x2\x2\x3t\x3\x3\x2\x2\x2uv\t\x2\x2"+
		"\x2v\x5\x3\x2\x2\x2wx\a\x3\x2\x2xz\x5\x10\t\x2y{\x5\x30\x19\x2zy\x3\x2"+
		"\x2\x2z{\x3\x2\x2\x2{\a\x3\x2\x2\x2|\x81\x5\n\x6\x2}~\a\x4\x2\x2~\x80"+
		"\x5\n\x6\x2\x7F}\x3\x2\x2\x2\x80\x83\x3\x2\x2\x2\x81\x7F\x3\x2\x2\x2\x81"+
		"\x82\x3\x2\x2\x2\x82\t\x3\x2\x2\x2\x83\x81\x3\x2\x2\x2\x84\x8E\t\x3\x2"+
		"\x2\x85\x8B\a\x5\x2\x2\x86\x87\aH\x2\x2\x87\x88\a\x6\x2\x2\x88\x8A\aH"+
		"\x2\x2\x89\x86\x3\x2\x2\x2\x8A\x8D\x3\x2\x2\x2\x8B\x89\x3\x2\x2\x2\x8B"+
		"\x8C\x3\x2\x2\x2\x8C\x8F\x3\x2\x2\x2\x8D\x8B\x3\x2\x2\x2\x8E\x85\x3\x2"+
		"\x2\x2\x8E\x8F\x3\x2\x2\x2\x8F\v\x3\x2\x2\x2\x90\x91\a\a\x2\x2\x91\x93"+
		"\x5\x10\t\x2\x92\x94\x5\x30\x19\x2\x93\x92\x3\x2\x2\x2\x93\x94\x3\x2\x2"+
		"\x2\x94\x98\x3\x2\x2\x2\x95\x96\a\a\x2\x2\x96\x98\x5\x1C\xF\x2\x97\x90"+
		"\x3\x2\x2\x2\x97\x95\x3\x2\x2\x2\x98\r\x3\x2\x2\x2\x99\x9A\x5\x18\r\x2"+
		"\x9A\x9B\a\x5\x2\x2\x9B\xF\x3\x2\x2\x2\x9C\xA0\x5\x12\n\x2\x9D\xA0\x5"+
		"\x14\v\x2\x9E\xA0\x5\x16\f\x2\x9F\x9C\x3\x2\x2\x2\x9F\x9D\x3\x2\x2\x2"+
		"\x9F\x9E\x3\x2\x2\x2\xA0\x11\x3\x2\x2\x2\xA1\xA3\x5\x18\r\x2\xA2\xA4\x5"+
		"\x1A\xE\x2\xA3\xA2\x3\x2\x2\x2\xA3\xA4\x3\x2\x2\x2\xA4\xA6\x3\x2\x2\x2"+
		"\xA5\xA7\aG\x2\x2\xA6\xA5\x3\x2\x2\x2\xA6\xA7\x3\x2\x2\x2\xA7\xA8\x3\x2"+
		"\x2\x2\xA8\xA9\a\b\x2\x2\xA9\xAE\x5\x10\t\x2\xAA\xAB\a\t\x2\x2\xAB\xAD"+
		"\x5\x10\t\x2\xAC\xAA\x3\x2\x2\x2\xAD\xB0\x3\x2\x2\x2\xAE\xAC\x3\x2\x2"+
		"\x2\xAE\xAF\x3\x2\x2\x2\xAF\xB1\x3\x2\x2\x2\xB0\xAE\x3\x2\x2\x2\xB1\xB2"+
		"\a\x4\x2\x2\xB2\x13\x3\x2\x2\x2\xB3\xB5\x5\x18\r\x2\xB4\xB6\x5\x1A\xE"+
		"\x2\xB5\xB4\x3\x2\x2\x2\xB5\xB6\x3\x2\x2\x2\xB6\xB8\x3\x2\x2\x2\xB7\xB9"+
		"\aG\x2\x2\xB8\xB7\x3\x2\x2\x2\xB8\xB9\x3\x2\x2\x2\xB9\xBA\x3\x2\x2\x2"+
		"\xBA\xBB\a\x5\x2\x2\xBB\xBC\x5\x1C\xF\x2\xBC\x15\x3\x2\x2\x2\xBD\xBE\x5"+
		"\x18\r\x2\xBE\xBF\a\x4\x2\x2\xBF\x17\x3\x2\x2\x2\xC0\xC1\a\x46\x2\x2\xC1"+
		"\x19\x3\x2\x2\x2\xC2\xC3\aM\x2\x2\xC3\xC4\t\x4\x2\x2\xC4\x1B\x3\x2\x2"+
		"\x2\xC5\xC6\x5\"\x12\x2\xC6\xC7\x5\x1E\x10\x2\xC7\x1D\x3\x2\x2\x2\xC8"+
		"\xCA\t\x5\x2\x2\xC9\xCB\a\x39\x2\x2\xCA\xC9\x3\x2\x2\x2\xCA\xCB\x3\x2"+
		"\x2\x2\xCB\xCD\x3\x2\x2\x2\xCC\xCE\x5 \x11\x2\xCD\xCC\x3\x2\x2\x2\xCD"+
		"\xCE\x3\x2\x2\x2\xCE\x1F\x3\x2\x2\x2\xCF\xD1\a\f\x2\x2\xD0\xD2\a\r\x2"+
		"\x2\xD1\xD0\x3\x2\x2\x2\xD1\xD2\x3\x2\x2\x2\xD2\xD9\x3\x2\x2\x2\xD3\xD4"+
		"\a\f\x2\x2\xD4\xD5\a\xE\x2\x2\xD5\xD6\x5\x32\x1A\x2\xD6\xD7\a\xF\x2\x2"+
		"\xD7\xD9\x3\x2\x2\x2\xD8\xCF\x3\x2\x2\x2\xD8\xD3\x3\x2\x2\x2\xD9!\x3\x2"+
		"\x2\x2\xDA\xDB\x5&\x14\x2\xDB\xDC\x5$\x13\x2\xDC\xDF\x3\x2\x2\x2\xDD\xDF"+
		"\x5*\x16\x2\xDE\xDA\x3\x2\x2\x2\xDE\xDD\x3\x2\x2\x2\xDF#\x3\x2\x2\x2\xE0"+
		"\xE4\a\x10\x2\x2\xE1\xE2\a\x5\x2\x2\xE2\xE4\x5,\x17\x2\xE3\xE0\x3\x2\x2"+
		"\x2\xE3\xE1\x3\x2\x2\x2\xE4%\x3\x2\x2\x2\xE5\xE8\x5(\x15\x2\xE6\xE8\x5"+
		"*\x16\x2\xE7\xE5\x3\x2\x2\x2\xE7\xE6\x3\x2\x2\x2\xE8\'\x3\x2\x2\x2\xE9"+
		"\xEA\b\x15\x1\x2\xEA\xEB\t\x6\x2\x2\xEB\xF5\x5(\x15\x5\xEC\xED\a\x11\x2"+
		"\x2\xED\xEE\x5*\x16\x2\xEE\xEF\a\x12\x2\x2\xEF\xF5\x3\x2\x2\x2\xF0\xF1"+
		"\a\x11\x2\x2\xF1\xF2\x5(\x15\x2\xF2\xF3\a\x12\x2\x2\xF3\xF5\x3\x2\x2\x2"+
		"\xF4\xE9\x3\x2\x2\x2\xF4\xEC\x3\x2\x2\x2\xF4\xF0\x3\x2\x2\x2\xF5\xFE\x3"+
		"\x2\x2\x2\xF6\xF7\f\a\x2\x2\xF7\xF8\aM\x2\x2\xF8\xFD\x5(\x15\b\xF9\xFA"+
		"\f\x6\x2\x2\xFA\xFB\t\x6\x2\x2\xFB\xFD\x5(\x15\a\xFC\xF6\x3\x2\x2\x2\xFC"+
		"\xF9\x3\x2\x2\x2\xFD\x100\x3\x2\x2\x2\xFE\xFC\x3\x2\x2\x2\xFE\xFF\x3\x2"+
		"\x2\x2\xFF)\x3\x2\x2\x2\x100\xFE\x3\x2\x2\x2\x101\x103\x5,\x17\x2\x102"+
		"\x101\x3\x2\x2\x2\x102\x103\x3\x2\x2\x2\x103\x105\x3\x2\x2\x2\x104\x106"+
		"\t\a\x2\x2\x105\x104\x3\x2\x2\x2\x105\x106\x3\x2\x2\x2\x106\x108\x3\x2"+
		"\x2\x2\x107\x109\x5\x30\x19\x2\x108\x107\x3\x2\x2\x2\x108\x109\x3\x2\x2"+
		"\x2\x109\x10B\x3\x2\x2\x2\x10A\x10C\a\x44\x2\x2\x10B\x10A\x3\x2\x2\x2"+
		"\x10B\x10C\x3\x2\x2\x2\x10C\x10E\x3\x2\x2\x2\x10D\x10F\a\x45\x2\x2\x10E"+
		"\x10D\x3\x2\x2\x2\x10E\x10F\x3\x2\x2\x2\x10F\x111\x3\x2\x2\x2\x110\x112"+
		"\a\x43\x2\x2\x111\x110\x3\x2\x2\x2\x111\x112\x3\x2\x2\x2\x112+\x3\x2\x2"+
		"\x2\x113\x114\b\x17\x1\x2\x114\x115\t\x6\x2\x2\x115\x11C\x5,\x17\x5\x116"+
		"\x11C\x5.\x18\x2\x117\x118\a\x14\x2\x2\x118\x119\x5,\x17\x2\x119\x11A"+
		"\a\x15\x2\x2\x11A\x11C\x3\x2\x2\x2\x11B\x113\x3\x2\x2\x2\x11B\x116\x3"+
		"\x2\x2\x2\x11B\x117\x3\x2\x2\x2\x11C\x125\x3\x2\x2\x2\x11D\x11E\f\a\x2"+
		"\x2\x11E\x11F\aM\x2\x2\x11F\x124\x5,\x17\b\x120\x121\f\x6\x2\x2\x121\x122"+
		"\t\x6\x2\x2\x122\x124\x5,\x17\a\x123\x11D\x3\x2\x2\x2\x123\x120\x3\x2"+
		"\x2\x2\x124\x127\x3\x2\x2\x2\x125\x123\x3\x2\x2\x2\x125\x126\x3\x2\x2"+
		"\x2\x126-\x3\x2\x2\x2\x127\x125\x3\x2\x2\x2\x128\x12A\t\b\x2\x2\x129\x128"+
		"\x3\x2\x2\x2\x129\x12A\x3\x2\x2\x2\x12A\x12C\x3\x2\x2\x2\x12B\x12D\aH"+
		"\x2\x2\x12C\x12B\x3\x2\x2\x2\x12C\x12D\x3\x2\x2\x2\x12D\x12F\x3\x2\x2"+
		"\x2\x12E\x130\aG\x2\x2\x12F\x12E\x3\x2\x2\x2\x12F\x130\x3\x2\x2\x2\x130"+
		"\x132\x3\x2\x2\x2\x131\x133\t\t\x2\x2\x132\x131\x3\x2\x2\x2\x132\x133"+
		"\x3\x2\x2\x2\x133/\x3\x2\x2\x2\x134\x13B\a\r\x2\x2\x135\x13B\x5\x32\x1A"+
		"\x2\x136\x137\a\xE\x2\x2\x137\x138\x5\x32\x1A\x2\x138\x139\a\xF\x2\x2"+
		"\x139\x13B\x3\x2\x2\x2\x13A\x134\x3\x2\x2\x2\x13A\x135\x3\x2\x2\x2\x13A"+
		"\x136\x3\x2\x2\x2\x13B\x31\x3\x2\x2\x2\x13C\x147\a;\x2\x2\x13D\x147\a"+
		"<\x2\x2\x13E\x13F\x5\x36\x1C\x2\x13F\x141\t\n\x2\x2\x140\x142\x5\x36\x1C"+
		"\x2\x141\x140\x3\x2\x2\x2\x141\x142\x3\x2\x2\x2\x142\x147\x3\x2\x2\x2"+
		"\x143\x144\t\n\x2\x2\x144\x147\x5\x36\x1C\x2\x145\x147\x5\x36\x1C\x2\x146"+
		"\x13C\x3\x2\x2\x2\x146\x13D\x3\x2\x2\x2\x146\x13E\x3\x2\x2\x2\x146\x143"+
		"\x3\x2\x2\x2\x146\x145\x3\x2\x2\x2\x147\x33\x3\x2\x2\x2\x148\x14C\a;\x2"+
		"\x2\x149\x14C\a\r\x2\x2\x14A\x14C\x5\x36\x1C\x2\x14B\x148\x3\x2\x2\x2"+
		"\x14B\x149\x3\x2\x2\x2\x14B\x14A\x3\x2\x2\x2\x14C\x35\x3\x2\x2\x2\x14D"+
		"\x152\x5\x38\x1D\x2\x14E\x152\x5:\x1E\x2\x14F\x152\x5<\x1F\x2\x150\x152"+
		"\x5> \x2\x151\x14D\x3\x2\x2\x2\x151\x14E\x3\x2\x2\x2\x151\x14F\x3\x2\x2"+
		"\x2\x151\x150\x3\x2\x2\x2\x152\x37\x3\x2\x2\x2\x153\x154\a=\x2\x2\x154"+
		"\x39\x3\x2\x2\x2\x155\x157\t\v\x2\x2\x156\x155\x3\x2\x2\x2\x156\x157\x3"+
		"\x2\x2\x2\x157\x158\x3\x2\x2\x2\x158\x159\t\f\x2\x2\x159;\x3\x2\x2\x2"+
		"\x15A\x15B\a\x42\x2\x2\x15B=\x3\x2\x2\x2\x15C\x15D\t\r\x2\x2\x15D?\x3"+
		"\x2\x2\x2\x15E\x168\x5\x42\"\x2\x15F\x168\x5\x44#\x2\x160\x168\x5\x46"+
		"$\x2\x161\x168\x5H%\x2\x162\x168\x5J&\x2\x163\x168\x5L\'\x2\x164\x168"+
		"\x5N(\x2\x165\x168\x5P)\x2\x166\x168\x5R*\x2\x167\x15E\x3\x2\x2\x2\x167"+
		"\x15F\x3\x2\x2\x2\x167\x160\x3\x2\x2\x2\x167\x161\x3\x2\x2\x2\x167\x162"+
		"\x3\x2\x2\x2\x167\x163\x3\x2\x2\x2\x167\x164\x3\x2\x2\x2\x167\x165\x3"+
		"\x2\x2\x2\x167\x166\x3\x2\x2\x2\x168\x41\x3\x2\x2\x2\x169\x16B\a\x1B\x2"+
		"\x2\x16A\x16C\t\xE\x2\x2\x16B\x16A\x3\x2\x2\x2\x16B\x16C\x3\x2\x2\x2\x16C"+
		"\x16E\x3\x2\x2\x2\x16D\x16F\x5\x34\x1B\x2\x16E\x16D\x3\x2\x2\x2\x16E\x16F"+
		"\x3\x2\x2\x2\x16F\x171\x3\x2\x2\x2\x170\x172\x5\x66\x34\x2\x171\x170\x3"+
		"\x2\x2\x2\x171\x172\x3\x2\x2\x2\x172\x43\x3\x2\x2\x2\x173\x174\a\x1B\x2"+
		"\x2\x174\x176\a/\x2\x2\x175\x177\x5\x66\x34\x2\x176\x175\x3\x2\x2\x2\x176"+
		"\x177\x3\x2\x2\x2\x177\x45\x3\x2\x2\x2\x178\x179\a\x1B\x2\x2\x179\x17B"+
		"\a\x30\x2\x2\x17A\x17C\x5\x66\x34\x2\x17B\x17A\x3\x2\x2\x2\x17B\x17C\x3"+
		"\x2\x2\x2\x17C\x17E\x3\x2\x2\x2\x17D\x17F\x5\x30\x19\x2\x17E\x17D\x3\x2"+
		"\x2\x2\x17E\x17F\x3\x2\x2\x2\x17F\x182\x3\x2\x2\x2\x180\x181\a\x5\x2\x2"+
		"\x181\x183\x5&\x14\x2\x182\x180\x3\x2\x2\x2\x182\x183\x3\x2\x2\x2\x183"+
		"G\x3\x2\x2\x2\x184\x185\a\x1B\x2\x2\x185\x187\a\x31\x2\x2\x186\x188\x5"+
		"\x66\x34\x2\x187\x186\x3\x2\x2\x2\x187\x188\x3\x2\x2\x2\x188\x18A\x3\x2"+
		"\x2\x2\x189\x18B\x5\x30\x19\x2\x18A\x189\x3\x2\x2\x2\x18A\x18B\x3\x2\x2"+
		"\x2\x18B\x18E\x3\x2\x2\x2\x18C\x18D\a\x5\x2\x2\x18D\x18F\x5&\x14\x2\x18E"+
		"\x18C\x3\x2\x2\x2\x18E\x18F\x3\x2\x2\x2\x18FI\x3\x2\x2\x2\x190\x191\a"+
		"\x1B\x2\x2\x191\x193\a\x32\x2\x2\x192\x194\x5\x66\x34\x2\x193\x192\x3"+
		"\x2\x2\x2\x193\x194\x3\x2\x2\x2\x194K\x3\x2\x2\x2\x195\x196\a\x1B\x2\x2"+
		"\x196\x198\a\x34\x2\x2\x197\x199\x5\x66\x34\x2\x198\x197\x3\x2\x2\x2\x198"+
		"\x199\x3\x2\x2\x2\x199\x19B\x3\x2\x2\x2\x19A\x19C\x5\x30\x19\x2\x19B\x19A"+
		"\x3\x2\x2\x2\x19B\x19C\x3\x2\x2\x2\x19CM\x3\x2\x2\x2\x19D\x19E\a\x1B\x2"+
		"\x2\x19E\x1A0\a\x35\x2\x2\x19F\x1A1\x5\x66\x34\x2\x1A0\x19F\x3\x2\x2\x2"+
		"\x1A0\x1A1\x3\x2\x2\x2\x1A1\x1A4\x3\x2\x2\x2\x1A2\x1A3\a\x5\x2\x2\x1A3"+
		"\x1A5\x5&\x14\x2\x1A4\x1A2\x3\x2\x2\x2\x1A4\x1A5\x3\x2\x2\x2\x1A5O\x3"+
		"\x2\x2\x2\x1A6\x1A7\a\x1B\x2\x2\x1A7\x1A9\a\x36\x2\x2\x1A8\x1AA\a\x37"+
		"\x2\x2\x1A9\x1A8\x3\x2\x2\x2\x1A9\x1AA\x3\x2\x2\x2\x1AA\x1AC\x3\x2\x2"+
		"\x2\x1AB\x1AD\x5\x66\x34\x2\x1AC\x1AB\x3\x2\x2\x2\x1AC\x1AD\x3\x2\x2\x2"+
		"\x1AD\x1AF\x3\x2\x2\x2\x1AE\x1B0\x5\x30\x19\x2\x1AF\x1AE\x3\x2\x2\x2\x1AF"+
		"\x1B0\x3\x2\x2\x2\x1B0Q\x3\x2\x2\x2\x1B1\x1B2\a\x1B\x2\x2\x1B2\x1B4\a"+
		"\x38\x2\x2\x1B3\x1B5\x5\x66\x34\x2\x1B4\x1B3\x3\x2\x2\x2\x1B4\x1B5\x3"+
		"\x2\x2\x2\x1B5S\x3\x2\x2\x2\x1B6\x1BF\x5V,\x2\x1B7\x1BF\x5X-\x2\x1B8\x1BF"+
		"\x5Z.\x2\x1B9\x1BF\x5\\/\x2\x1BA\x1BF\x5^\x30\x2\x1BB\x1BF\x5`\x31\x2"+
		"\x1BC\x1BF\x5\x62\x32\x2\x1BD\x1BF\x5\x64\x33\x2\x1BE\x1B6\x3\x2\x2\x2"+
		"\x1BE\x1B7\x3\x2\x2\x2\x1BE\x1B8\x3\x2\x2\x2\x1BE\x1B9\x3\x2\x2\x2\x1BE"+
		"\x1BA\x3\x2\x2\x2\x1BE\x1BB\x3\x2\x2\x2\x1BE\x1BC\x3\x2\x2\x2\x1BE\x1BD"+
		"\x3\x2\x2\x2\x1BFU\x3\x2\x2\x2\x1C0\x1C2\a\x1C\x2\x2\x1C1\x1C3\t\xE\x2"+
		"\x2\x1C2\x1C1\x3\x2\x2\x2\x1C2\x1C3\x3\x2\x2\x2\x1C3\x1C5\x3\x2\x2\x2"+
		"\x1C4\x1C6\x5\x34\x1B\x2\x1C5\x1C4\x3\x2\x2\x2\x1C5\x1C6\x3\x2\x2\x2\x1C6"+
		"\x1C8\x3\x2\x2\x2\x1C7\x1C9\x5\x66\x34\x2\x1C8\x1C7\x3\x2\x2\x2\x1C8\x1C9"+
		"\x3\x2\x2\x2\x1C9W\x3\x2\x2\x2\x1CA\x1CB\a\x1C\x2\x2\x1CB\x1CD\a/\x2\x2"+
		"\x1CC\x1CE\x5\x66\x34\x2\x1CD\x1CC\x3\x2\x2\x2\x1CD\x1CE\x3\x2\x2\x2\x1CE"+
		"Y\x3\x2\x2\x2\x1CF\x1D0\a\x1C\x2\x2\x1D0\x1D2\a\x30\x2\x2\x1D1\x1D3\x5"+
		"\x66\x34\x2\x1D2\x1D1\x3\x2\x2\x2\x1D2\x1D3\x3\x2\x2\x2\x1D3\x1D5\x3\x2"+
		"\x2\x2\x1D4\x1D6\x5\x30\x19\x2\x1D5\x1D4\x3\x2\x2\x2\x1D5\x1D6\x3\x2\x2"+
		"\x2\x1D6\x1D9\x3\x2\x2\x2\x1D7\x1D8\a\x5\x2\x2\x1D8\x1DA\x5&\x14\x2\x1D9"+
		"\x1D7\x3\x2\x2\x2\x1D9\x1DA\x3\x2\x2\x2\x1DA[\x3\x2\x2\x2\x1DB\x1DC\a"+
		"\x1C\x2\x2\x1DC\x1DE\a\x31\x2\x2\x1DD\x1DF\x5\x66\x34\x2\x1DE\x1DD\x3"+
		"\x2\x2\x2\x1DE\x1DF\x3\x2\x2\x2\x1DF\x1E1\x3\x2\x2\x2\x1E0\x1E2\x5\x30"+
		"\x19\x2\x1E1\x1E0\x3\x2\x2\x2\x1E1\x1E2\x3\x2\x2\x2\x1E2\x1E5\x3\x2\x2"+
		"\x2\x1E3\x1E4\a\x5\x2\x2\x1E4\x1E6\x5&\x14\x2\x1E5\x1E3\x3\x2\x2\x2\x1E5"+
		"\x1E6\x3\x2\x2\x2\x1E6]\x3\x2\x2\x2\x1E7\x1E8\a\x1C\x2\x2\x1E8\x1EA\a"+
		"\x33\x2\x2\x1E9\x1EB\x5\x66\x34\x2\x1EA\x1E9\x3\x2\x2\x2\x1EA\x1EB\x3"+
		"\x2\x2\x2\x1EB_\x3\x2\x2\x2\x1EC\x1ED\a\x1C\x2\x2\x1ED\x1EF\a\x34\x2\x2"+
		"\x1EE\x1F0\x5\x66\x34\x2\x1EF\x1EE\x3\x2\x2\x2\x1EF\x1F0\x3\x2\x2\x2\x1F0"+
		"\x1F2\x3\x2\x2\x2\x1F1\x1F3\x5\x30\x19\x2\x1F2\x1F1\x3\x2\x2\x2\x1F2\x1F3"+
		"\x3\x2\x2\x2\x1F3\x61\x3\x2\x2\x2\x1F4\x1F5\a\x1C\x2\x2\x1F5\x1F7\a\x36"+
		"\x2\x2\x1F6\x1F8\a\x37\x2\x2\x1F7\x1F6\x3\x2\x2\x2\x1F7\x1F8\x3\x2\x2"+
		"\x2\x1F8\x1FA\x3\x2\x2\x2\x1F9\x1FB\x5\x66\x34\x2\x1FA\x1F9\x3\x2\x2\x2"+
		"\x1FA\x1FB\x3\x2\x2\x2\x1FB\x1FD\x3\x2\x2\x2\x1FC\x1FE\x5\x30\x19\x2\x1FD"+
		"\x1FC\x3\x2\x2\x2\x1FD\x1FE\x3\x2\x2\x2\x1FE\x63\x3\x2\x2\x2\x1FF\x200"+
		"\a\x1C\x2\x2\x200\x202\a\x38\x2\x2\x201\x203\x5\x66\x34\x2\x202\x201\x3"+
		"\x2\x2\x2\x202\x203\x3\x2\x2\x2\x203\x65\x3\x2\x2\x2\x204\x205\b\x34\x1"+
		"\x2\x205\x206\t\x6\x2\x2\x206\x20D\x5\x66\x34\x5\x207\x20D\x5h\x35\x2"+
		"\x208\x209\a\x14\x2\x2\x209\x20A\x5\x66\x34\x2\x20A\x20B\a\x15\x2\x2\x20B"+
		"\x20D\x3\x2\x2\x2\x20C\x204\x3\x2\x2\x2\x20C\x207\x3\x2\x2\x2\x20C\x208"+
		"\x3\x2\x2\x2\x20D\x216\x3\x2\x2\x2\x20E\x20F\f\a\x2\x2\x20F\x210\aM\x2"+
		"\x2\x210\x215\x5\x66\x34\b\x211\x212\f\x6\x2\x2\x212\x213\t\x6\x2\x2\x213"+
		"\x215\x5\x66\x34\a\x214\x20E\x3\x2\x2\x2\x214\x211\x3\x2\x2\x2\x215\x218"+
		"\x3\x2\x2\x2\x216\x214\x3\x2\x2\x2\x216\x217\x3\x2\x2\x2\x217g\x3\x2\x2"+
		"\x2\x218\x216\x3\x2\x2\x2\x219\x21B\a:\x2\x2\x21A\x219\x3\x2\x2\x2\x21A"+
		"\x21B\x3\x2\x2\x2\x21B\x21D\x3\x2\x2\x2\x21C\x21E\a\x46\x2\x2\x21D\x21C"+
		"\x3\x2\x2\x2\x21D\x21E\x3\x2\x2\x2\x21E\x220\x3\x2\x2\x2\x21F\x221\a\x45"+
		"\x2\x2\x220\x21F\x3\x2\x2\x2\x220\x221\x3\x2\x2\x2\x221\x226\x3\x2\x2"+
		"\x2\x222\x223\a\x1D\x2\x2\x223\x224\x5\x32\x1A\x2\x224\x225\a\x1E\x2\x2"+
		"\x225\x227\x3\x2\x2\x2\x226\x222\x3\x2\x2\x2\x226\x227\x3\x2\x2\x2\x227"+
		"i\x3\x2\x2\x2Yqz\x81\x8B\x8E\x93\x97\x9F\xA3\xA6\xAE\xB5\xB8\xCA\xCD\xD1"+
		"\xD8\xDE\xE3\xE7\xF4\xFC\xFE\x102\x105\x108\x10B\x10E\x111\x11B\x123\x125"+
		"\x129\x12C\x12F\x132\x13A\x141\x146\x14B\x151\x156\x167\x16B\x16E\x171"+
		"\x176\x17B\x17E\x182\x187\x18A\x18E\x193\x198\x19B\x1A0\x1A4\x1A9\x1AC"+
		"\x1AF\x1B4\x1BE\x1C2\x1C5\x1C8\x1CD\x1D2\x1D5\x1D9\x1DE\x1E1\x1E5\x1EA"+
		"\x1EF\x1F2\x1F7\x1FA\x1FD\x202\x20C\x214\x216\x21A\x21D\x220\x226";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace AccountingServer.Console
