//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.4.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\b1f6c1c4\Documents\GitHub\ProfessionalAccounting\Server\AccountingServer.QueryGeneration\Console.g4 by ANTLR 4.4.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace AccountingServer.Console {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.4.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class ConsoleParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, Launch=42, Connect=43, Shutdown=44, Backup=45, 
		Mobile=46, Fetch=47, Help=48, Titles=49, Exit=50, Check=51, AOAll=52, 
		AOList=53, AOQuery=54, AORegister=55, AOUnregister=56, ARedep=57, OReamo=58, 
		AOResetSoft=59, AOResetHard=60, AOApply=61, AOCollapse=62, AOCheck=63, 
		Guid=64, RangeNull=65, RangeAllNotNull=66, RangeAYear=67, RangeAMonth=68, 
		RangeDeltaMonth=69, RangeADay=70, RangeDeltaDay=71, RangeDeltaWeek=72, 
		VoucherType=73, VoucherRemark=74, VoucherID=75, DoubleQuotedString=76, 
		SingleQuotedString=77, DetailTitle=78, DetailTitleSubTitle=79, Float=80, 
		Percent=81, NameString=82, WS=83;
	public const int
		RULE_command = 0, RULE_otherCommand = 1, RULE_groupedQuery = 2, RULE_chart = 3, 
		RULE_chartArea = 4, RULE_report = 5, RULE_hyperItem = 6, RULE_hyperItemAtom = 7, 
		RULE_name = 8, RULE_coef = 9, RULE_subtotal = 10, RULE_voucherDetailQuery = 11, 
		RULE_emit = 12, RULE_vouchers = 13, RULE_vouchersX = 14, RULE_voucherAtom = 15, 
		RULE_voucherUnary = 16, RULE_voucherQuery = 17, RULE_details = 18, RULE_detailsX = 19, 
		RULE_detailAtom = 20, RULE_detailUnary = 21, RULE_detailQuery = 22, RULE_range = 23, 
		RULE_rangeCore = 24, RULE_rangePoint = 25, RULE_rangeCertainPoint = 26, 
		RULE_rangeYear = 27, RULE_rangeMonth = 28, RULE_rangeWeek = 29, RULE_rangeDay = 30, 
		RULE_asset = 31, RULE_assetList = 32, RULE_assetQuery = 33, RULE_assetRegister = 34, 
		RULE_assetUnregister = 35, RULE_assetRedep = 36, RULE_assetResetSoft = 37, 
		RULE_assetResetHard = 38, RULE_assetApply = 39, RULE_assetCheck = 40, 
		RULE_amort = 41, RULE_amortList = 42, RULE_amortQuery = 43, RULE_amortRegister = 44, 
		RULE_amortUnregister = 45, RULE_amortReamo = 46, RULE_amortResetSoft = 47, 
		RULE_amortResetHard = 48, RULE_amortApply = 49, RULE_amortCheck = 50, 
		RULE_aoQ = 51, RULE_aoQAtom = 52;
	public static readonly string[] ruleNames = {
		"command", "otherCommand", "groupedQuery", "chart", "chartArea", "report", 
		"hyperItem", "hyperItemAtom", "name", "coef", "subtotal", "voucherDetailQuery", 
		"emit", "vouchers", "vouchersX", "voucherAtom", "voucherUnary", "voucherQuery", 
		"details", "detailsX", "detailAtom", "detailUnary", "detailQuery", "range", 
		"rangeCore", "rangePoint", "rangeCertainPoint", "rangeYear", "rangeMonth", 
		"rangeWeek", "rangeDay", "asset", "assetList", "assetQuery", "assetRegister", 
		"assetUnregister", "assetRedep", "assetResetSoft", "assetResetHard", "assetApply", 
		"assetCheck", "amort", "amortList", "amortQuery", "amortRegister", "amortUnregister", 
		"amortReamo", "amortResetSoft", "amortResetHard", "amortApply", "amortCheck", 
		"aoQ", "aoQAtom"
	};

	private static readonly string[] _LiteralNames = {
		null, "'c::'", "'c||'", "'||'", "'c:'", "':'", "'|'", "'_'", "'^'", "'r::'", 
		"'r||'", "'r:'", "'*'", "'`'", "'``'", "'t'", "'s'", "'c'", "'r'", "'d'", 
		"'w'", "'m'", "'f'", "'b'", "'y'", "'D'", "'x'", "'X'", "'A'", "'+'", 
		"'-'", "'('", "')'", "'E'", "'[]'", "'['", "']'", "'~'", "'@'", "'#'", 
		"'a'", "'o'", null, null, null, "'backup'", null, "'fetch'", null, null, 
		"'exit'", null, "'-all'", null, null, null, null, null, null, "'-reset-soft'", 
		"'-reset-hard'", null, null, "'-chk'", null, "'null'", "'~null'", null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "Launch", "Connect", "Shutdown", "Backup", 
		"Mobile", "Fetch", "Help", "Titles", "Exit", "Check", "AOAll", "AOList", 
		"AOQuery", "AORegister", "AOUnregister", "ARedep", "OReamo", "AOResetSoft", 
		"AOResetHard", "AOApply", "AOCollapse", "AOCheck", "Guid", "RangeNull", 
		"RangeAllNotNull", "RangeAYear", "RangeAMonth", "RangeDeltaMonth", "RangeADay", 
		"RangeDeltaDay", "RangeDeltaWeek", "VoucherType", "VoucherRemark", "VoucherID", 
		"DoubleQuotedString", "SingleQuotedString", "DetailTitle", "DetailTitleSubTitle", 
		"Float", "Percent", "NameString", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Console.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }


		protected const int EOF = Eof;

	public ConsoleParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CommandContext : ParserRuleContext {
		public AssetContext asset() {
			return GetRuleContext<AssetContext>(0);
		}
		public GroupedQueryContext groupedQuery() {
			return GetRuleContext<GroupedQueryContext>(0);
		}
		public AmortContext amort() {
			return GetRuleContext<AmortContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(ConsoleParser.Eof, 0); }
		public OtherCommandContext otherCommand() {
			return GetRuleContext<OtherCommandContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_command);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 106; vouchers();
				}
				break;

			case 2:
				{
				State = 107; groupedQuery();
				}
				break;

			case 3:
				{
				State = 108; asset();
				}
				break;

			case 4:
				{
				State = 109; amort();
				}
				break;

			case 5:
				{
				State = 110; otherCommand();
				}
				break;
			}
			State = 113; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherCommandContext : ParserRuleContext {
		public ITerminalNode Connect() { return GetToken(ConsoleParser.Connect, 0); }
		public ITerminalNode Backup() { return GetToken(ConsoleParser.Backup, 0); }
		public ITerminalNode Shutdown() { return GetToken(ConsoleParser.Shutdown, 0); }
		public ITerminalNode Fetch() { return GetToken(ConsoleParser.Fetch, 0); }
		public ITerminalNode Mobile() { return GetToken(ConsoleParser.Mobile, 0); }
		public ITerminalNode Help() { return GetToken(ConsoleParser.Help, 0); }
		public ITerminalNode Check() { return GetToken(ConsoleParser.Check, 0); }
		public ITerminalNode Launch() { return GetToken(ConsoleParser.Launch, 0); }
		public ITerminalNode Exit() { return GetToken(ConsoleParser.Exit, 0); }
		public ITerminalNode Titles() { return GetToken(ConsoleParser.Titles, 0); }
		public OtherCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherCommand; } }
	}

	[RuleVersion(0)]
	public OtherCommandContext otherCommand() {
		OtherCommandContext _localctx = new OtherCommandContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_otherCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Launch) | (1L << Connect) | (1L << Shutdown) | (1L << Backup) | (1L << Mobile) | (1L << Fetch) | (1L << Help) | (1L << Titles) | (1L << Exit) | (1L << Check))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupedQueryContext : ParserRuleContext {
		public SubtotalContext subtotal() {
			return GetRuleContext<SubtotalContext>(0);
		}
		public VoucherDetailQueryContext voucherDetailQuery() {
			return GetRuleContext<VoucherDetailQueryContext>(0);
		}
		public GroupedQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupedQuery; } }
	}

	[RuleVersion(0)]
	public GroupedQueryContext groupedQuery() {
		GroupedQueryContext _localctx = new GroupedQueryContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_groupedQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; voucherDetailQuery();
			State = 118; subtotal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChartContext : ParserRuleContext {
		public ChartAreaContext chartArea() {
			return GetRuleContext<ChartAreaContext>(0);
		}
		public ITerminalNode NameString() { return GetToken(ConsoleParser.NameString, 0); }
		public HyperItemContext hyperItem(int i) {
			return GetRuleContext<HyperItemContext>(i);
		}
		public IReadOnlyList<HyperItemContext> hyperItem() {
			return GetRuleContexts<HyperItemContext>();
		}
		public ChartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chart; } }
	}

	[RuleVersion(0)]
	public ChartContext chart() {
		ChartContext _localctx = new ChartContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_chart);
		int _la;
		try {
			State = 140;
			switch (_input.La(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 120; Match(T__0);
				State = 121; Match(NameString);
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 122; Match(T__1);
				State = 123; chartArea();
				State = 126;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 124; Match(T__2);
					State = 125; hyperItem();
					}
					}
					State = 128;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==T__2 );
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 130; Match(T__3);
				State = 131; Match(NameString);
				State = 132; Match(T__4);
				State = 133; chartArea();
				State = 136;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 134; Match(T__2);
					State = 135; hyperItem();
					}
					}
					State = 138;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==T__2 );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChartAreaContext : ParserRuleContext {
		public IReadOnlyList<HyperItemAtomContext> hyperItemAtom() {
			return GetRuleContexts<HyperItemAtomContext>();
		}
		public ITerminalNode Float(int i) {
			return GetToken(ConsoleParser.Float, i);
		}
		public HyperItemAtomContext hyperItemAtom(int i) {
			return GetRuleContext<HyperItemAtomContext>(i);
		}
		public IReadOnlyList<ITerminalNode> Float() { return GetTokens(ConsoleParser.Float); }
		public ChartAreaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chartArea; } }
	}

	[RuleVersion(0)]
	public ChartAreaContext chartArea() {
		ChartAreaContext _localctx = new ChartAreaContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_chartArea);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; hyperItemAtom();
			State = 147;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 143; Match(T__5);
					State = 144; hyperItemAtom();
					}
					} 
				}
				State = 149;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			}
			State = 150; Match(T__5);
			State = 153;
			_la = _input.La(1);
			if (_la==T__6) {
				{
				State = 151; Match(T__6);
				State = 152; Match(Float);
				}
			}

			State = 157;
			_la = _input.La(1);
			if (_la==T__7) {
				{
				State = 155; Match(T__7);
				State = 156; Match(Float);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReportContext : ParserRuleContext {
		public ChartAreaContext chartArea() {
			return GetRuleContext<ChartAreaContext>(0);
		}
		public ITerminalNode NameString() { return GetToken(ConsoleParser.NameString, 0); }
		public HyperItemContext hyperItem(int i) {
			return GetRuleContext<HyperItemContext>(i);
		}
		public IReadOnlyList<HyperItemContext> hyperItem() {
			return GetRuleContexts<HyperItemContext>();
		}
		public ReportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_report; } }
	}

	[RuleVersion(0)]
	public ReportContext report() {
		ReportContext _localctx = new ReportContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_report);
		int _la;
		try {
			State = 173;
			switch (_input.La(1)) {
			case T__8:
				EnterOuterAlt(_localctx, 1);
				{
				State = 159; Match(T__8);
				State = 160; Match(NameString);
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 161; Match(T__9);
				State = 162; hyperItem();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 3);
				{
				State = 163; Match(T__10);
				State = 164; Match(NameString);
				State = 165; Match(T__4);
				State = 166; chartArea();
				State = 169;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 167; Match(T__2);
					State = 168; hyperItem();
					}
					}
					State = 171;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==T__2 );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HyperItemContext : ParserRuleContext {
		public HyperItemAtomContext hyperItemAtom() {
			return GetRuleContext<HyperItemAtomContext>(0);
		}
		public HyperItemContext hyperItem(int i) {
			return GetRuleContext<HyperItemContext>(i);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public IReadOnlyList<HyperItemContext> hyperItem() {
			return GetRuleContexts<HyperItemContext>();
		}
		public HyperItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hyperItem; } }
	}

	[RuleVersion(0)]
	public HyperItemContext hyperItem() {
		HyperItemContext _localctx = new HyperItemContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_hyperItem);
		try {
			int _alt;
			State = 184;
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 175; name();
				State = 176; hyperItem();
				State = 179;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 177; Match(T__5);
						State = 178; hyperItem();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 181;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 183; hyperItemAtom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HyperItemAtomContext : ParserRuleContext {
		public CoefContext coef() {
			return GetRuleContext<CoefContext>(0);
		}
		public GroupedQueryContext groupedQuery() {
			return GetRuleContext<GroupedQueryContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public HyperItemAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hyperItemAtom; } }
	}

	[RuleVersion(0)]
	public HyperItemAtomContext hyperItemAtom() {
		HyperItemAtomContext _localctx = new HyperItemAtomContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_hyperItemAtom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186; name();
			State = 187; groupedQuery();
			State = 189;
			_la = _input.La(1);
			if (_la==T__11) {
				{
				State = 188; coef();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public ITerminalNode NameString() { return GetToken(ConsoleParser.NameString, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; Match(NameString);
			State = 192; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CoefContext : ParserRuleContext {
		public ITerminalNode Percent() { return GetToken(ConsoleParser.Percent, 0); }
		public ITerminalNode Float() { return GetToken(ConsoleParser.Float, 0); }
		public CoefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coef; } }
	}

	[RuleVersion(0)]
	public CoefContext coef() {
		CoefContext _localctx = new CoefContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_coef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194; Match(T__11);
			State = 195;
			_la = _input.La(1);
			if ( !(_la==Float || _la==Percent) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtotalContext : ParserRuleContext {
		public IToken SubtotalMark;
		public IToken SubtotalFields;
		public IToken AggregationMethod;
		public SubtotalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtotal; } }
	}

	[RuleVersion(0)]
	public SubtotalContext subtotal() {
		SubtotalContext _localctx = new SubtotalContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_subtotal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			_localctx.SubtotalMark = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==T__12 || _la==T__13) ) {
				_localctx.SubtotalMark = _errHandler.RecoverInline(this);
			}
			Consume();
			State = 201;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23))) != 0)) {
				{
				{
				State = 198;
				_localctx.SubtotalFields = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23))) != 0)) ) {
					_localctx.SubtotalFields = _errHandler.RecoverInline(this);
				}
				Consume();
				}
				}
				State = 203;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 205;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__24) | (1L << T__25) | (1L << T__26))) != 0)) {
				{
				State = 204;
				_localctx.AggregationMethod = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__24) | (1L << T__25) | (1L << T__26))) != 0)) ) {
					_localctx.AggregationMethod = _errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoucherDetailQueryContext : ParserRuleContext {
		public VoucherQueryContext voucherQuery() {
			return GetRuleContext<VoucherQueryContext>(0);
		}
		public EmitContext emit() {
			return GetRuleContext<EmitContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public VoucherDetailQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voucherDetailQuery; } }
	}

	[RuleVersion(0)]
	public VoucherDetailQueryContext voucherDetailQuery() {
		VoucherDetailQueryContext _localctx = new VoucherDetailQueryContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_voucherDetailQuery);
		try {
			State = 211;
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 207; vouchers();
				State = 208; emit();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 210; voucherQuery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmitContext : ParserRuleContext {
		public IToken Op;
		public DetailsContext details() {
			return GetRuleContext<DetailsContext>(0);
		}
		public EmitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emit; } }
	}

	[RuleVersion(0)]
	public EmitContext emit() {
		EmitContext _localctx = new EmitContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_emit);
		try {
			State = 216;
			switch (_input.La(1)) {
			case T__27:
				EnterOuterAlt(_localctx, 1);
				{
				State = 213; _localctx.Op = Match(T__27);
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 214; Match(T__4);
				State = 215; details();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VouchersContext : ParserRuleContext {
		public IToken Op;
		public IReadOnlyList<VouchersXContext> vouchersX() {
			return GetRuleContexts<VouchersXContext>();
		}
		public VouchersXContext vouchersX(int i) {
			return GetRuleContext<VouchersXContext>(i);
		}
		public VouchersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vouchers; } }
	}

	[RuleVersion(0)]
	public VouchersContext vouchers() {
		VouchersContext _localctx = new VouchersContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_vouchers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218; vouchersX();
			State = 223;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__28 || _la==T__29) {
				{
				{
				State = 219;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__28 || _la==T__29) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 220; vouchersX();
				}
				}
				State = 225;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VouchersXContext : ParserRuleContext {
		public IToken Op;
		public VoucherAtomContext voucherAtom(int i) {
			return GetRuleContext<VoucherAtomContext>(i);
		}
		public IReadOnlyList<VoucherAtomContext> voucherAtom() {
			return GetRuleContexts<VoucherAtomContext>();
		}
		public VouchersXContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vouchersX; } }
	}

	[RuleVersion(0)]
	public VouchersXContext vouchersX() {
		VouchersXContext _localctx = new VouchersXContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_vouchersX);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226; voucherAtom();
			State = 231;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__11) {
				{
				{
				State = 227; _localctx.Op = Match(T__11);
				State = 228; voucherAtom();
				}
				}
				State = 233;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoucherAtomContext : ParserRuleContext {
		public VoucherUnaryContext voucherUnary() {
			return GetRuleContext<VoucherUnaryContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public VoucherAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voucherAtom; } }
	}

	[RuleVersion(0)]
	public VoucherAtomContext voucherAtom() {
		VoucherAtomContext _localctx = new VoucherAtomContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_voucherAtom);
		try {
			State = 239;
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 234; Match(T__30);
				State = 235; vouchers();
				State = 236; Match(T__31);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 238; voucherUnary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoucherUnaryContext : ParserRuleContext {
		public IToken Op;
		public VoucherQueryContext voucherQuery() {
			return GetRuleContext<VoucherQueryContext>(0);
		}
		public VoucherUnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voucherUnary; } }
	}

	[RuleVersion(0)]
	public VoucherUnaryContext voucherUnary() {
		VoucherUnaryContext _localctx = new VoucherUnaryContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_voucherUnary);
		int _la;
		try {
			State = 244;
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 241;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__28 || _la==T__29) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 242; voucherQuery();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 243; voucherQuery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoucherQueryContext : ParserRuleContext {
		public IToken Op;
		public ITerminalNode VoucherID() { return GetToken(ConsoleParser.VoucherID, 0); }
		public DetailsContext details() {
			return GetRuleContext<DetailsContext>(0);
		}
		public ITerminalNode VoucherRemark() { return GetToken(ConsoleParser.VoucherRemark, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode VoucherType() { return GetToken(ConsoleParser.VoucherType, 0); }
		public VoucherQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voucherQuery; } }
	}

	[RuleVersion(0)]
	public VoucherQueryContext voucherQuery() {
		VoucherQueryContext _localctx = new VoucherQueryContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_voucherQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				{
				State = 246; details();
				}
				break;
			}
			State = 250;
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				{
				State = 249;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__27 || _la==T__32) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 253;
			switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
			case 1:
				{
				State = 252; range();
				}
				break;
			}
			State = 256;
			_la = _input.La(1);
			if (_la==VoucherID) {
				{
				State = 255; Match(VoucherID);
				}
			}

			State = 259;
			_la = _input.La(1);
			if (_la==VoucherRemark) {
				{
				State = 258; Match(VoucherRemark);
				}
			}

			State = 262;
			_la = _input.La(1);
			if (_la==VoucherType) {
				{
				State = 261; Match(VoucherType);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DetailsContext : ParserRuleContext {
		public IToken Op;
		public IReadOnlyList<DetailsXContext> detailsX() {
			return GetRuleContexts<DetailsXContext>();
		}
		public DetailsXContext detailsX(int i) {
			return GetRuleContext<DetailsXContext>(i);
		}
		public DetailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_details; } }
	}

	[RuleVersion(0)]
	public DetailsContext details() {
		DetailsContext _localctx = new DetailsContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_details);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 264; detailsX();
			State = 269;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,26,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 265;
					_localctx.Op = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==T__28 || _la==T__29) ) {
						_localctx.Op = _errHandler.RecoverInline(this);
					}
					Consume();
					State = 266; detailsX();
					}
					} 
				}
				State = 271;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,26,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DetailsXContext : ParserRuleContext {
		public IToken Op;
		public DetailAtomContext detailAtom(int i) {
			return GetRuleContext<DetailAtomContext>(i);
		}
		public IReadOnlyList<DetailAtomContext> detailAtom() {
			return GetRuleContexts<DetailAtomContext>();
		}
		public DetailsXContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_detailsX; } }
	}

	[RuleVersion(0)]
	public DetailsXContext detailsX() {
		DetailsXContext _localctx = new DetailsXContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_detailsX);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 272; detailAtom();
			State = 277;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,27,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 273; _localctx.Op = Match(T__11);
					State = 274; detailAtom();
					}
					} 
				}
				State = 279;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,27,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DetailAtomContext : ParserRuleContext {
		public DetailsContext details() {
			return GetRuleContext<DetailsContext>(0);
		}
		public DetailUnaryContext detailUnary() {
			return GetRuleContext<DetailUnaryContext>(0);
		}
		public DetailAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_detailAtom; } }
	}

	[RuleVersion(0)]
	public DetailAtomContext detailAtom() {
		DetailAtomContext _localctx = new DetailAtomContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_detailAtom);
		try {
			State = 285;
			switch (_input.La(1)) {
			case T__30:
				EnterOuterAlt(_localctx, 1);
				{
				State = 280; Match(T__30);
				State = 281; details();
				State = 282; Match(T__31);
				}
				break;
			case Eof:
			case T__4:
			case T__11:
			case T__12:
			case T__13:
			case T__16:
			case T__18:
			case T__27:
			case T__28:
			case T__29:
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__36:
			case T__37:
			case T__38:
			case RangeNull:
			case RangeAllNotNull:
			case RangeAYear:
			case RangeAMonth:
			case RangeDeltaMonth:
			case RangeADay:
			case RangeDeltaDay:
			case RangeDeltaWeek:
			case VoucherType:
			case VoucherRemark:
			case VoucherID:
			case DoubleQuotedString:
			case SingleQuotedString:
			case DetailTitle:
			case DetailTitleSubTitle:
				EnterOuterAlt(_localctx, 2);
				{
				State = 284; detailUnary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DetailUnaryContext : ParserRuleContext {
		public IToken Op;
		public DetailQueryContext detailQuery() {
			return GetRuleContext<DetailQueryContext>(0);
		}
		public DetailUnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_detailUnary; } }
	}

	[RuleVersion(0)]
	public DetailUnaryContext detailUnary() {
		DetailUnaryContext _localctx = new DetailUnaryContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_detailUnary);
		int _la;
		try {
			State = 290;
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 287;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__28 || _la==T__29) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 288; detailQuery();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 289; detailQuery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DetailQueryContext : ParserRuleContext {
		public IToken Direction;
		public ITerminalNode DetailTitleSubTitle() { return GetToken(ConsoleParser.DetailTitleSubTitle, 0); }
		public ITerminalNode DoubleQuotedString() { return GetToken(ConsoleParser.DoubleQuotedString, 0); }
		public ITerminalNode SingleQuotedString() { return GetToken(ConsoleParser.SingleQuotedString, 0); }
		public ITerminalNode DetailTitle() { return GetToken(ConsoleParser.DetailTitle, 0); }
		public DetailQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_detailQuery; } }
	}

	[RuleVersion(0)]
	public DetailQueryContext detailQuery() {
		DetailQueryContext _localctx = new DetailQueryContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_detailQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			_la = _input.La(1);
			if (_la==DetailTitle || _la==DetailTitleSubTitle) {
				{
				State = 292;
				_la = _input.La(1);
				if ( !(_la==DetailTitle || _la==DetailTitleSubTitle) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			State = 296;
			_la = _input.La(1);
			if (_la==SingleQuotedString) {
				{
				State = 295; Match(SingleQuotedString);
				}
			}

			State = 299;
			_la = _input.La(1);
			if (_la==DoubleQuotedString) {
				{
				State = 298; Match(DoubleQuotedString);
				}
			}

			State = 302;
			_la = _input.La(1);
			if (_la==T__16 || _la==T__18) {
				{
				State = 301;
				_localctx.Direction = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__16 || _la==T__18) ) {
					_localctx.Direction = _errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public RangeCoreContext Core;
		public RangeCoreContext rangeCore() {
			return GetRuleContext<RangeCoreContext>(0);
		}
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_range);
		try {
			State = 310;
			switch (_input.La(1)) {
			case T__33:
				EnterOuterAlt(_localctx, 1);
				{
				State = 304; Match(T__33);
				}
				break;
			case T__29:
			case T__36:
			case T__37:
			case T__38:
			case RangeNull:
			case RangeAllNotNull:
			case RangeAYear:
			case RangeAMonth:
			case RangeDeltaMonth:
			case RangeADay:
			case RangeDeltaDay:
			case RangeDeltaWeek:
				EnterOuterAlt(_localctx, 2);
				{
				State = 305; _localctx.Core = rangeCore();
				}
				break;
			case T__34:
				EnterOuterAlt(_localctx, 3);
				{
				State = 306; Match(T__34);
				State = 307; _localctx.Core = rangeCore();
				State = 308; Match(T__35);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeCoreContext : ParserRuleContext {
		public RangeCertainPointContext Begin;
		public RangeCertainPointContext End;
		public IToken Op;
		public RangeCertainPointContext Certain;
		public ITerminalNode RangeNull() { return GetToken(ConsoleParser.RangeNull, 0); }
		public RangeCertainPointContext rangeCertainPoint(int i) {
			return GetRuleContext<RangeCertainPointContext>(i);
		}
		public ITerminalNode RangeAllNotNull() { return GetToken(ConsoleParser.RangeAllNotNull, 0); }
		public IReadOnlyList<RangeCertainPointContext> rangeCertainPoint() {
			return GetRuleContexts<RangeCertainPointContext>();
		}
		public RangeCoreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeCore; } }
	}

	[RuleVersion(0)]
	public RangeCoreContext rangeCore() {
		RangeCoreContext _localctx = new RangeCoreContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_rangeCore);
		int _la;
		try {
			State = 322;
			switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 312; Match(RangeNull);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 313; Match(RangeAllNotNull);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 314; _localctx.Begin = rangeCertainPoint();
				State = 315;
				_la = _input.La(1);
				if ( !(_la==T__29 || _la==T__36) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 317;
				_la = _input.La(1);
				if (((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & ((1L << (T__37 - 38)) | (1L << (T__38 - 38)) | (1L << (RangeAYear - 38)) | (1L << (RangeAMonth - 38)) | (1L << (RangeDeltaMonth - 38)) | (1L << (RangeADay - 38)) | (1L << (RangeDeltaDay - 38)) | (1L << (RangeDeltaWeek - 38)))) != 0)) {
					{
					State = 316; _localctx.End = rangeCertainPoint();
					}
				}

				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 319;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__29 || _la==T__36) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 320; _localctx.End = rangeCertainPoint();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 321; _localctx.Certain = rangeCertainPoint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangePointContext : ParserRuleContext {
		public IToken All;
		public ITerminalNode RangeNull() { return GetToken(ConsoleParser.RangeNull, 0); }
		public RangeCertainPointContext rangeCertainPoint() {
			return GetRuleContext<RangeCertainPointContext>(0);
		}
		public RangePointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangePoint; } }
	}

	[RuleVersion(0)]
	public RangePointContext rangePoint() {
		RangePointContext _localctx = new RangePointContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_rangePoint);
		try {
			State = 327;
			switch (_input.La(1)) {
			case RangeNull:
				EnterOuterAlt(_localctx, 1);
				{
				State = 324; Match(RangeNull);
				}
				break;
			case T__33:
				EnterOuterAlt(_localctx, 2);
				{
				State = 325; _localctx.All = Match(T__33);
				}
				break;
			case T__37:
			case T__38:
			case RangeAYear:
			case RangeAMonth:
			case RangeDeltaMonth:
			case RangeADay:
			case RangeDeltaDay:
			case RangeDeltaWeek:
				EnterOuterAlt(_localctx, 3);
				{
				State = 326; rangeCertainPoint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeCertainPointContext : ParserRuleContext {
		public RangeWeekContext rangeWeek() {
			return GetRuleContext<RangeWeekContext>(0);
		}
		public RangeYearContext rangeYear() {
			return GetRuleContext<RangeYearContext>(0);
		}
		public RangeMonthContext rangeMonth() {
			return GetRuleContext<RangeMonthContext>(0);
		}
		public RangeDayContext rangeDay() {
			return GetRuleContext<RangeDayContext>(0);
		}
		public RangeCertainPointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeCertainPoint; } }
	}

	[RuleVersion(0)]
	public RangeCertainPointContext rangeCertainPoint() {
		RangeCertainPointContext _localctx = new RangeCertainPointContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_rangeCertainPoint);
		try {
			State = 333;
			switch (_input.La(1)) {
			case RangeAYear:
				EnterOuterAlt(_localctx, 1);
				{
				State = 329; rangeYear();
				}
				break;
			case T__37:
			case T__38:
			case RangeAMonth:
			case RangeDeltaMonth:
				EnterOuterAlt(_localctx, 2);
				{
				State = 330; rangeMonth();
				}
				break;
			case RangeDeltaWeek:
				EnterOuterAlt(_localctx, 3);
				{
				State = 331; rangeWeek();
				}
				break;
			case RangeADay:
			case RangeDeltaDay:
				EnterOuterAlt(_localctx, 4);
				{
				State = 332; rangeDay();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeYearContext : ParserRuleContext {
		public ITerminalNode RangeAYear() { return GetToken(ConsoleParser.RangeAYear, 0); }
		public RangeYearContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeYear; } }
	}

	[RuleVersion(0)]
	public RangeYearContext rangeYear() {
		RangeYearContext _localctx = new RangeYearContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_rangeYear);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335; Match(RangeAYear);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeMonthContext : ParserRuleContext {
		public IToken Modifier;
		public ITerminalNode RangeDeltaMonth() { return GetToken(ConsoleParser.RangeDeltaMonth, 0); }
		public ITerminalNode RangeAMonth() { return GetToken(ConsoleParser.RangeAMonth, 0); }
		public RangeMonthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeMonth; } }
	}

	[RuleVersion(0)]
	public RangeMonthContext rangeMonth() {
		RangeMonthContext _localctx = new RangeMonthContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_rangeMonth);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			_la = _input.La(1);
			if (_la==T__37 || _la==T__38) {
				{
				State = 337;
				_localctx.Modifier = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__37 || _la==T__38) ) {
					_localctx.Modifier = _errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			State = 340;
			_la = _input.La(1);
			if ( !(_la==RangeAMonth || _la==RangeDeltaMonth) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeWeekContext : ParserRuleContext {
		public ITerminalNode RangeDeltaWeek() { return GetToken(ConsoleParser.RangeDeltaWeek, 0); }
		public RangeWeekContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeWeek; } }
	}

	[RuleVersion(0)]
	public RangeWeekContext rangeWeek() {
		RangeWeekContext _localctx = new RangeWeekContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_rangeWeek);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342; Match(RangeDeltaWeek);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeDayContext : ParserRuleContext {
		public ITerminalNode RangeADay() { return GetToken(ConsoleParser.RangeADay, 0); }
		public ITerminalNode RangeDeltaDay() { return GetToken(ConsoleParser.RangeDeltaDay, 0); }
		public RangeDayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeDay; } }
	}

	[RuleVersion(0)]
	public RangeDayContext rangeDay() {
		RangeDayContext _localctx = new RangeDayContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_rangeDay);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344;
			_la = _input.La(1);
			if ( !(_la==RangeADay || _la==RangeDeltaDay) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetContext : ParserRuleContext {
		public AssetRegisterContext assetRegister() {
			return GetRuleContext<AssetRegisterContext>(0);
		}
		public AssetUnregisterContext assetUnregister() {
			return GetRuleContext<AssetUnregisterContext>(0);
		}
		public AssetResetHardContext assetResetHard() {
			return GetRuleContext<AssetResetHardContext>(0);
		}
		public AssetResetSoftContext assetResetSoft() {
			return GetRuleContext<AssetResetSoftContext>(0);
		}
		public AssetApplyContext assetApply() {
			return GetRuleContext<AssetApplyContext>(0);
		}
		public AssetListContext assetList() {
			return GetRuleContext<AssetListContext>(0);
		}
		public AssetQueryContext assetQuery() {
			return GetRuleContext<AssetQueryContext>(0);
		}
		public AssetCheckContext assetCheck() {
			return GetRuleContext<AssetCheckContext>(0);
		}
		public AssetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asset; } }
	}

	[RuleVersion(0)]
	public AssetContext asset() {
		AssetContext _localctx = new AssetContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_asset);
		try {
			State = 354;
			switch ( Interpreter.AdaptivePredict(_input,40,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 346; assetList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 347; assetQuery();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 348; assetRegister();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 349; assetUnregister();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 350; assetResetSoft();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 351; assetResetHard();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 352; assetApply();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 353; assetCheck();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetListContext : ParserRuleContext {
		public ITerminalNode AOList() { return GetToken(ConsoleParser.AOList, 0); }
		public ITerminalNode AOAll() { return GetToken(ConsoleParser.AOAll, 0); }
		public RangePointContext rangePoint() {
			return GetRuleContext<RangePointContext>(0);
		}
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AssetListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetList; } }
	}

	[RuleVersion(0)]
	public AssetListContext assetList() {
		AssetListContext _localctx = new AssetListContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_assetList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356; Match(T__39);
			State = 358;
			_la = _input.La(1);
			if (_la==AOAll || _la==AOList) {
				{
				State = 357;
				_la = _input.La(1);
				if ( !(_la==AOAll || _la==AOList) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			State = 361;
			_la = _input.La(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (T__33 - 34)) | (1L << (T__37 - 34)) | (1L << (T__38 - 34)) | (1L << (RangeNull - 34)) | (1L << (RangeAYear - 34)) | (1L << (RangeAMonth - 34)) | (1L << (RangeDeltaMonth - 34)) | (1L << (RangeADay - 34)) | (1L << (RangeDeltaDay - 34)) | (1L << (RangeDeltaWeek - 34)))) != 0)) {
				{
				State = 360; rangePoint();
				}
			}

			State = 364;
			_la = _input.La(1);
			if (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Guid - 64)) | (1L << (DoubleQuotedString - 64)) | (1L << (SingleQuotedString - 64)))) != 0)) {
				{
				State = 363; aoQ();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetQueryContext : ParserRuleContext {
		public ITerminalNode AOQuery() { return GetToken(ConsoleParser.AOQuery, 0); }
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AssetQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetQuery; } }
	}

	[RuleVersion(0)]
	public AssetQueryContext assetQuery() {
		AssetQueryContext _localctx = new AssetQueryContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_assetQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366; Match(T__39);
			State = 367; Match(AOQuery);
			State = 369;
			_la = _input.La(1);
			if (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Guid - 64)) | (1L << (DoubleQuotedString - 64)) | (1L << (SingleQuotedString - 64)))) != 0)) {
				{
				State = 368; aoQ();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetRegisterContext : ParserRuleContext {
		public ITerminalNode AORegister() { return GetToken(ConsoleParser.AORegister, 0); }
		public VoucherDetailQueryContext voucherDetailQuery() {
			return GetRuleContext<VoucherDetailQueryContext>(0);
		}
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AssetRegisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetRegister; } }
	}

	[RuleVersion(0)]
	public AssetRegisterContext assetRegister() {
		AssetRegisterContext _localctx = new AssetRegisterContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_assetRegister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371; Match(T__39);
			State = 372; Match(AORegister);
			State = 374;
			_la = _input.La(1);
			if (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Guid - 64)) | (1L << (DoubleQuotedString - 64)) | (1L << (SingleQuotedString - 64)))) != 0)) {
				{
				State = 373; aoQ();
				}
			}

			State = 378;
			_la = _input.La(1);
			if (_la==T__4) {
				{
				State = 376; Match(T__4);
				State = 377; voucherDetailQuery();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetUnregisterContext : ParserRuleContext {
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode AOUnregister() { return GetToken(ConsoleParser.AOUnregister, 0); }
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AssetUnregisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetUnregister; } }
	}

	[RuleVersion(0)]
	public AssetUnregisterContext assetUnregister() {
		AssetUnregisterContext _localctx = new AssetUnregisterContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_assetUnregister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380; Match(T__39);
			State = 381; Match(AOUnregister);
			State = 383;
			_la = _input.La(1);
			if (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Guid - 64)) | (1L << (DoubleQuotedString - 64)) | (1L << (SingleQuotedString - 64)))) != 0)) {
				{
				State = 382; aoQ();
				}
			}

			State = 386;
			_la = _input.La(1);
			if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & ((1L << (T__29 - 30)) | (1L << (T__33 - 30)) | (1L << (T__34 - 30)) | (1L << (T__36 - 30)) | (1L << (T__37 - 30)) | (1L << (T__38 - 30)) | (1L << (RangeNull - 30)) | (1L << (RangeAllNotNull - 30)) | (1L << (RangeAYear - 30)) | (1L << (RangeAMonth - 30)) | (1L << (RangeDeltaMonth - 30)) | (1L << (RangeADay - 30)) | (1L << (RangeDeltaDay - 30)) | (1L << (RangeDeltaWeek - 30)))) != 0)) {
				{
				State = 385; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetRedepContext : ParserRuleContext {
		public ITerminalNode ARedep() { return GetToken(ConsoleParser.ARedep, 0); }
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AssetRedepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetRedep; } }
	}

	[RuleVersion(0)]
	public AssetRedepContext assetRedep() {
		AssetRedepContext _localctx = new AssetRedepContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_assetRedep);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388; Match(T__39);
			State = 389; Match(ARedep);
			State = 391;
			_la = _input.La(1);
			if (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Guid - 64)) | (1L << (DoubleQuotedString - 64)) | (1L << (SingleQuotedString - 64)))) != 0)) {
				{
				State = 390; aoQ();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetResetSoftContext : ParserRuleContext {
		public ITerminalNode AOResetSoft() { return GetToken(ConsoleParser.AOResetSoft, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AssetResetSoftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetResetSoft; } }
	}

	[RuleVersion(0)]
	public AssetResetSoftContext assetResetSoft() {
		AssetResetSoftContext _localctx = new AssetResetSoftContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_assetResetSoft);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393; Match(T__39);
			State = 394; Match(AOResetSoft);
			State = 396;
			_la = _input.La(1);
			if (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Guid - 64)) | (1L << (DoubleQuotedString - 64)) | (1L << (SingleQuotedString - 64)))) != 0)) {
				{
				State = 395; aoQ();
				}
			}

			State = 399;
			_la = _input.La(1);
			if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & ((1L << (T__29 - 30)) | (1L << (T__33 - 30)) | (1L << (T__34 - 30)) | (1L << (T__36 - 30)) | (1L << (T__37 - 30)) | (1L << (T__38 - 30)) | (1L << (RangeNull - 30)) | (1L << (RangeAllNotNull - 30)) | (1L << (RangeAYear - 30)) | (1L << (RangeAMonth - 30)) | (1L << (RangeDeltaMonth - 30)) | (1L << (RangeADay - 30)) | (1L << (RangeDeltaDay - 30)) | (1L << (RangeDeltaWeek - 30)))) != 0)) {
				{
				State = 398; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetResetHardContext : ParserRuleContext {
		public ITerminalNode AOResetHard() { return GetToken(ConsoleParser.AOResetHard, 0); }
		public VoucherDetailQueryContext voucherDetailQuery() {
			return GetRuleContext<VoucherDetailQueryContext>(0);
		}
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AssetResetHardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetResetHard; } }
	}

	[RuleVersion(0)]
	public AssetResetHardContext assetResetHard() {
		AssetResetHardContext _localctx = new AssetResetHardContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_assetResetHard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401; Match(T__39);
			State = 402; Match(AOResetHard);
			State = 404;
			_la = _input.La(1);
			if (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Guid - 64)) | (1L << (DoubleQuotedString - 64)) | (1L << (SingleQuotedString - 64)))) != 0)) {
				{
				State = 403; aoQ();
				}
			}

			State = 408;
			_la = _input.La(1);
			if (_la==T__4) {
				{
				State = 406; Match(T__4);
				State = 407; voucherDetailQuery();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetApplyContext : ParserRuleContext {
		public ITerminalNode AOCollapse() { return GetToken(ConsoleParser.AOCollapse, 0); }
		public ITerminalNode AOApply() { return GetToken(ConsoleParser.AOApply, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AssetApplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetApply; } }
	}

	[RuleVersion(0)]
	public AssetApplyContext assetApply() {
		AssetApplyContext _localctx = new AssetApplyContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_assetApply);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410; Match(T__39);
			State = 411; Match(AOApply);
			State = 413;
			_la = _input.La(1);
			if (_la==AOCollapse) {
				{
				State = 412; Match(AOCollapse);
				}
			}

			State = 416;
			_la = _input.La(1);
			if (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Guid - 64)) | (1L << (DoubleQuotedString - 64)) | (1L << (SingleQuotedString - 64)))) != 0)) {
				{
				State = 415; aoQ();
				}
			}

			State = 419;
			_la = _input.La(1);
			if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & ((1L << (T__29 - 30)) | (1L << (T__33 - 30)) | (1L << (T__34 - 30)) | (1L << (T__36 - 30)) | (1L << (T__37 - 30)) | (1L << (T__38 - 30)) | (1L << (RangeNull - 30)) | (1L << (RangeAllNotNull - 30)) | (1L << (RangeAYear - 30)) | (1L << (RangeAMonth - 30)) | (1L << (RangeDeltaMonth - 30)) | (1L << (RangeADay - 30)) | (1L << (RangeDeltaDay - 30)) | (1L << (RangeDeltaWeek - 30)))) != 0)) {
				{
				State = 418; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetCheckContext : ParserRuleContext {
		public ITerminalNode AOCheck() { return GetToken(ConsoleParser.AOCheck, 0); }
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AssetCheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetCheck; } }
	}

	[RuleVersion(0)]
	public AssetCheckContext assetCheck() {
		AssetCheckContext _localctx = new AssetCheckContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_assetCheck);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 421; Match(T__39);
			State = 422; Match(AOCheck);
			State = 424;
			_la = _input.La(1);
			if (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Guid - 64)) | (1L << (DoubleQuotedString - 64)) | (1L << (SingleQuotedString - 64)))) != 0)) {
				{
				State = 423; aoQ();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortContext : ParserRuleContext {
		public AmortQueryContext amortQuery() {
			return GetRuleContext<AmortQueryContext>(0);
		}
		public AmortCheckContext amortCheck() {
			return GetRuleContext<AmortCheckContext>(0);
		}
		public AmortResetSoftContext amortResetSoft() {
			return GetRuleContext<AmortResetSoftContext>(0);
		}
		public AmortRegisterContext amortRegister() {
			return GetRuleContext<AmortRegisterContext>(0);
		}
		public AmortUnregisterContext amortUnregister() {
			return GetRuleContext<AmortUnregisterContext>(0);
		}
		public AmortApplyContext amortApply() {
			return GetRuleContext<AmortApplyContext>(0);
		}
		public AmortListContext amortList() {
			return GetRuleContext<AmortListContext>(0);
		}
		public AmortResetHardContext amortResetHard() {
			return GetRuleContext<AmortResetHardContext>(0);
		}
		public AmortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amort; } }
	}

	[RuleVersion(0)]
	public AmortContext amort() {
		AmortContext _localctx = new AmortContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_amort);
		try {
			State = 434;
			switch ( Interpreter.AdaptivePredict(_input,58,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 426; amortList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 427; amortQuery();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 428; amortRegister();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 429; amortUnregister();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 430; amortResetSoft();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 431; amortResetHard();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 432; amortApply();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 433; amortCheck();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortListContext : ParserRuleContext {
		public ITerminalNode AOList() { return GetToken(ConsoleParser.AOList, 0); }
		public ITerminalNode AOAll() { return GetToken(ConsoleParser.AOAll, 0); }
		public RangePointContext rangePoint() {
			return GetRuleContext<RangePointContext>(0);
		}
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AmortListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortList; } }
	}

	[RuleVersion(0)]
	public AmortListContext amortList() {
		AmortListContext _localctx = new AmortListContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_amortList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436; Match(T__40);
			State = 438;
			_la = _input.La(1);
			if (_la==AOAll || _la==AOList) {
				{
				State = 437;
				_la = _input.La(1);
				if ( !(_la==AOAll || _la==AOList) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			State = 441;
			_la = _input.La(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (T__33 - 34)) | (1L << (T__37 - 34)) | (1L << (T__38 - 34)) | (1L << (RangeNull - 34)) | (1L << (RangeAYear - 34)) | (1L << (RangeAMonth - 34)) | (1L << (RangeDeltaMonth - 34)) | (1L << (RangeADay - 34)) | (1L << (RangeDeltaDay - 34)) | (1L << (RangeDeltaWeek - 34)))) != 0)) {
				{
				State = 440; rangePoint();
				}
			}

			State = 444;
			_la = _input.La(1);
			if (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Guid - 64)) | (1L << (DoubleQuotedString - 64)) | (1L << (SingleQuotedString - 64)))) != 0)) {
				{
				State = 443; aoQ();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortQueryContext : ParserRuleContext {
		public ITerminalNode AOQuery() { return GetToken(ConsoleParser.AOQuery, 0); }
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AmortQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortQuery; } }
	}

	[RuleVersion(0)]
	public AmortQueryContext amortQuery() {
		AmortQueryContext _localctx = new AmortQueryContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_amortQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446; Match(T__40);
			State = 447; Match(AOQuery);
			State = 449;
			_la = _input.La(1);
			if (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Guid - 64)) | (1L << (DoubleQuotedString - 64)) | (1L << (SingleQuotedString - 64)))) != 0)) {
				{
				State = 448; aoQ();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortRegisterContext : ParserRuleContext {
		public ITerminalNode AORegister() { return GetToken(ConsoleParser.AORegister, 0); }
		public VoucherDetailQueryContext voucherDetailQuery() {
			return GetRuleContext<VoucherDetailQueryContext>(0);
		}
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AmortRegisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortRegister; } }
	}

	[RuleVersion(0)]
	public AmortRegisterContext amortRegister() {
		AmortRegisterContext _localctx = new AmortRegisterContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_amortRegister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451; Match(T__40);
			State = 452; Match(AORegister);
			State = 454;
			_la = _input.La(1);
			if (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Guid - 64)) | (1L << (DoubleQuotedString - 64)) | (1L << (SingleQuotedString - 64)))) != 0)) {
				{
				State = 453; aoQ();
				}
			}

			State = 458;
			_la = _input.La(1);
			if (_la==T__4) {
				{
				State = 456; Match(T__4);
				State = 457; voucherDetailQuery();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortUnregisterContext : ParserRuleContext {
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode AOUnregister() { return GetToken(ConsoleParser.AOUnregister, 0); }
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AmortUnregisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortUnregister; } }
	}

	[RuleVersion(0)]
	public AmortUnregisterContext amortUnregister() {
		AmortUnregisterContext _localctx = new AmortUnregisterContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_amortUnregister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460; Match(T__40);
			State = 461; Match(AOUnregister);
			State = 463;
			_la = _input.La(1);
			if (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Guid - 64)) | (1L << (DoubleQuotedString - 64)) | (1L << (SingleQuotedString - 64)))) != 0)) {
				{
				State = 462; aoQ();
				}
			}

			State = 466;
			_la = _input.La(1);
			if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & ((1L << (T__29 - 30)) | (1L << (T__33 - 30)) | (1L << (T__34 - 30)) | (1L << (T__36 - 30)) | (1L << (T__37 - 30)) | (1L << (T__38 - 30)) | (1L << (RangeNull - 30)) | (1L << (RangeAllNotNull - 30)) | (1L << (RangeAYear - 30)) | (1L << (RangeAMonth - 30)) | (1L << (RangeDeltaMonth - 30)) | (1L << (RangeADay - 30)) | (1L << (RangeDeltaDay - 30)) | (1L << (RangeDeltaWeek - 30)))) != 0)) {
				{
				State = 465; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortReamoContext : ParserRuleContext {
		public ITerminalNode OReamo() { return GetToken(ConsoleParser.OReamo, 0); }
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AmortReamoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortReamo; } }
	}

	[RuleVersion(0)]
	public AmortReamoContext amortReamo() {
		AmortReamoContext _localctx = new AmortReamoContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_amortReamo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468; Match(T__40);
			State = 469; Match(OReamo);
			State = 471;
			_la = _input.La(1);
			if (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Guid - 64)) | (1L << (DoubleQuotedString - 64)) | (1L << (SingleQuotedString - 64)))) != 0)) {
				{
				State = 470; aoQ();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortResetSoftContext : ParserRuleContext {
		public ITerminalNode AOResetSoft() { return GetToken(ConsoleParser.AOResetSoft, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AmortResetSoftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortResetSoft; } }
	}

	[RuleVersion(0)]
	public AmortResetSoftContext amortResetSoft() {
		AmortResetSoftContext _localctx = new AmortResetSoftContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_amortResetSoft);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473; Match(T__40);
			State = 474; Match(AOResetSoft);
			State = 476;
			_la = _input.La(1);
			if (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Guid - 64)) | (1L << (DoubleQuotedString - 64)) | (1L << (SingleQuotedString - 64)))) != 0)) {
				{
				State = 475; aoQ();
				}
			}

			State = 479;
			_la = _input.La(1);
			if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & ((1L << (T__29 - 30)) | (1L << (T__33 - 30)) | (1L << (T__34 - 30)) | (1L << (T__36 - 30)) | (1L << (T__37 - 30)) | (1L << (T__38 - 30)) | (1L << (RangeNull - 30)) | (1L << (RangeAllNotNull - 30)) | (1L << (RangeAYear - 30)) | (1L << (RangeAMonth - 30)) | (1L << (RangeDeltaMonth - 30)) | (1L << (RangeADay - 30)) | (1L << (RangeDeltaDay - 30)) | (1L << (RangeDeltaWeek - 30)))) != 0)) {
				{
				State = 478; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortResetHardContext : ParserRuleContext {
		public ITerminalNode AOResetHard() { return GetToken(ConsoleParser.AOResetHard, 0); }
		public VoucherDetailQueryContext voucherDetailQuery() {
			return GetRuleContext<VoucherDetailQueryContext>(0);
		}
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AmortResetHardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortResetHard; } }
	}

	[RuleVersion(0)]
	public AmortResetHardContext amortResetHard() {
		AmortResetHardContext _localctx = new AmortResetHardContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_amortResetHard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481; Match(T__40);
			State = 482; Match(AOResetHard);
			State = 484;
			_la = _input.La(1);
			if (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Guid - 64)) | (1L << (DoubleQuotedString - 64)) | (1L << (SingleQuotedString - 64)))) != 0)) {
				{
				State = 483; aoQ();
				}
			}

			State = 488;
			_la = _input.La(1);
			if (_la==T__4) {
				{
				State = 486; Match(T__4);
				State = 487; voucherDetailQuery();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortApplyContext : ParserRuleContext {
		public ITerminalNode AOCollapse() { return GetToken(ConsoleParser.AOCollapse, 0); }
		public ITerminalNode AOApply() { return GetToken(ConsoleParser.AOApply, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AmortApplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortApply; } }
	}

	[RuleVersion(0)]
	public AmortApplyContext amortApply() {
		AmortApplyContext _localctx = new AmortApplyContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_amortApply);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 490; Match(T__40);
			State = 491; Match(AOApply);
			State = 493;
			_la = _input.La(1);
			if (_la==AOCollapse) {
				{
				State = 492; Match(AOCollapse);
				}
			}

			State = 496;
			_la = _input.La(1);
			if (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Guid - 64)) | (1L << (DoubleQuotedString - 64)) | (1L << (SingleQuotedString - 64)))) != 0)) {
				{
				State = 495; aoQ();
				}
			}

			State = 499;
			_la = _input.La(1);
			if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & ((1L << (T__29 - 30)) | (1L << (T__33 - 30)) | (1L << (T__34 - 30)) | (1L << (T__36 - 30)) | (1L << (T__37 - 30)) | (1L << (T__38 - 30)) | (1L << (RangeNull - 30)) | (1L << (RangeAllNotNull - 30)) | (1L << (RangeAYear - 30)) | (1L << (RangeAMonth - 30)) | (1L << (RangeDeltaMonth - 30)) | (1L << (RangeADay - 30)) | (1L << (RangeDeltaDay - 30)) | (1L << (RangeDeltaWeek - 30)))) != 0)) {
				{
				State = 498; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortCheckContext : ParserRuleContext {
		public ITerminalNode AOCheck() { return GetToken(ConsoleParser.AOCheck, 0); }
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AmortCheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortCheck; } }
	}

	[RuleVersion(0)]
	public AmortCheckContext amortCheck() {
		AmortCheckContext _localctx = new AmortCheckContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_amortCheck);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 501; Match(T__40);
			State = 502; Match(AOCheck);
			State = 504;
			_la = _input.La(1);
			if (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Guid - 64)) | (1L << (DoubleQuotedString - 64)) | (1L << (SingleQuotedString - 64)))) != 0)) {
				{
				State = 503; aoQ();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AoQContext : ParserRuleContext {
		public IReadOnlyList<AoQAtomContext> aoQAtom() {
			return GetRuleContexts<AoQAtomContext>();
		}
		public AoQAtomContext aoQAtom(int i) {
			return GetRuleContext<AoQAtomContext>(i);
		}
		public AoQContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aoQ; } }
	}

	[RuleVersion(0)]
	public AoQContext aoQ() {
		AoQContext _localctx = new AoQContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_aoQ);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 506; aoQAtom();
			State = 511;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__28) {
				{
				{
				State = 507; Match(T__28);
				State = 508; aoQAtom();
				}
				}
				State = 513;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AoQAtomContext : ParserRuleContext {
		public ITerminalNode DoubleQuotedString() { return GetToken(ConsoleParser.DoubleQuotedString, 0); }
		public ITerminalNode Guid() { return GetToken(ConsoleParser.Guid, 0); }
		public ITerminalNode SingleQuotedString() { return GetToken(ConsoleParser.SingleQuotedString, 0); }
		public AoQAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aoQAtom; } }
	}

	[RuleVersion(0)]
	public AoQAtomContext aoQAtom() {
		AoQAtomContext _localctx = new AoQAtomContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_aoQAtom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 514;
			_la = _input.La(1);
			if ( !(((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Guid - 64)) | (1L << (DoubleQuotedString - 64)) | (1L << (SingleQuotedString - 64)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3U\x207\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x3\x2\x3\x2"+
		"\x3\x2\x3\x2\x3\x2\x5\x2r\n\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3"+
		"\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x6\x5\x81\n\x5\r\x5\xE\x5\x82"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x6\x5\x8B\n\x5\r\x5\xE\x5\x8C\x5"+
		"\x5\x8F\n\x5\x3\x6\x3\x6\x3\x6\a\x6\x94\n\x6\f\x6\xE\x6\x97\v\x6\x3\x6"+
		"\x3\x6\x3\x6\x5\x6\x9C\n\x6\x3\x6\x3\x6\x5\x6\xA0\n\x6\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x6\a\xAC\n\a\r\a\xE\a\xAD\x5\a\xB0"+
		"\n\a\x3\b\x3\b\x3\b\x3\b\x6\b\xB6\n\b\r\b\xE\b\xB7\x3\b\x5\b\xBB\n\b\x3"+
		"\t\x3\t\x3\t\x5\t\xC0\n\t\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\f\x3\f\a\f"+
		"\xCA\n\f\f\f\xE\f\xCD\v\f\x3\f\x5\f\xD0\n\f\x3\r\x3\r\x3\r\x3\r\x5\r\xD6"+
		"\n\r\x3\xE\x3\xE\x3\xE\x5\xE\xDB\n\xE\x3\xF\x3\xF\x3\xF\a\xF\xE0\n\xF"+
		"\f\xF\xE\xF\xE3\v\xF\x3\x10\x3\x10\x3\x10\a\x10\xE8\n\x10\f\x10\xE\x10"+
		"\xEB\v\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\xF2\n\x11\x3\x12"+
		"\x3\x12\x3\x12\x5\x12\xF7\n\x12\x3\x13\x5\x13\xFA\n\x13\x3\x13\x5\x13"+
		"\xFD\n\x13\x3\x13\x5\x13\x100\n\x13\x3\x13\x5\x13\x103\n\x13\x3\x13\x5"+
		"\x13\x106\n\x13\x3\x13\x5\x13\x109\n\x13\x3\x14\x3\x14\x3\x14\a\x14\x10E"+
		"\n\x14\f\x14\xE\x14\x111\v\x14\x3\x15\x3\x15\x3\x15\a\x15\x116\n\x15\f"+
		"\x15\xE\x15\x119\v\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x120"+
		"\n\x16\x3\x17\x3\x17\x3\x17\x5\x17\x125\n\x17\x3\x18\x5\x18\x128\n\x18"+
		"\x3\x18\x5\x18\x12B\n\x18\x3\x18\x5\x18\x12E\n\x18\x3\x18\x5\x18\x131"+
		"\n\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x139\n\x19\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x140\n\x1A\x3\x1A\x3\x1A\x3\x1A"+
		"\x5\x1A\x145\n\x1A\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x14A\n\x1B\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x5\x1C\x150\n\x1C\x3\x1D\x3\x1D\x3\x1E\x5\x1E\x155\n\x1E"+
		"\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x5"+
		"!\x165\n!\x3\"\x3\"\x5\"\x169\n\"\x3\"\x5\"\x16C\n\"\x3\"\x5\"\x16F\n"+
		"\"\x3#\x3#\x3#\x5#\x174\n#\x3$\x3$\x3$\x5$\x179\n$\x3$\x3$\x5$\x17D\n"+
		"$\x3%\x3%\x3%\x5%\x182\n%\x3%\x5%\x185\n%\x3&\x3&\x3&\x5&\x18A\n&\x3\'"+
		"\x3\'\x3\'\x5\'\x18F\n\'\x3\'\x5\'\x192\n\'\x3(\x3(\x3(\x5(\x197\n(\x3"+
		"(\x3(\x5(\x19B\n(\x3)\x3)\x3)\x5)\x1A0\n)\x3)\x5)\x1A3\n)\x3)\x5)\x1A6"+
		"\n)\x3*\x3*\x3*\x5*\x1AB\n*\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x5+\x1B5\n"+
		"+\x3,\x3,\x5,\x1B9\n,\x3,\x5,\x1BC\n,\x3,\x5,\x1BF\n,\x3-\x3-\x3-\x5-"+
		"\x1C4\n-\x3.\x3.\x3.\x5.\x1C9\n.\x3.\x3.\x5.\x1CD\n.\x3/\x3/\x3/\x5/\x1D2"+
		"\n/\x3/\x5/\x1D5\n/\x3\x30\x3\x30\x3\x30\x5\x30\x1DA\n\x30\x3\x31\x3\x31"+
		"\x3\x31\x5\x31\x1DF\n\x31\x3\x31\x5\x31\x1E2\n\x31\x3\x32\x3\x32\x3\x32"+
		"\x5\x32\x1E7\n\x32\x3\x32\x3\x32\x5\x32\x1EB\n\x32\x3\x33\x3\x33\x3\x33"+
		"\x5\x33\x1F0\n\x33\x3\x33\x5\x33\x1F3\n\x33\x3\x33\x5\x33\x1F6\n\x33\x3"+
		"\x34\x3\x34\x3\x34\x5\x34\x1FB\n\x34\x3\x35\x3\x35\x3\x35\a\x35\x200\n"+
		"\x35\f\x35\xE\x35\x203\v\x35\x3\x36\x3\x36\x3\x36\x2\x2\x2\x37\x2\x2\x4"+
		"\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A"+
		"\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2"+
		"\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2"+
		"R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2\x2\x11"+
		"\x3\x2,\x35\x3\x2RS\x3\x2\xF\x10\x3\x2\x11\x1A\x3\x2\x1B\x1D\x3\x2\x1F"+
		" \x4\x2\x1E\x1E##\x3\x2PQ\x4\x2\x13\x13\x15\x15\x4\x2  \'\'\x3\x2()\x3"+
		"\x2\x46G\x3\x2HI\x3\x2\x36\x37\x4\x2\x42\x42NO\x236\x2q\x3\x2\x2\x2\x4"+
		"u\x3\x2\x2\x2\x6w\x3\x2\x2\x2\b\x8E\x3\x2\x2\x2\n\x90\x3\x2\x2\x2\f\xAF"+
		"\x3\x2\x2\x2\xE\xBA\x3\x2\x2\x2\x10\xBC\x3\x2\x2\x2\x12\xC1\x3\x2\x2\x2"+
		"\x14\xC4\x3\x2\x2\x2\x16\xC7\x3\x2\x2\x2\x18\xD5\x3\x2\x2\x2\x1A\xDA\x3"+
		"\x2\x2\x2\x1C\xDC\x3\x2\x2\x2\x1E\xE4\x3\x2\x2\x2 \xF1\x3\x2\x2\x2\"\xF6"+
		"\x3\x2\x2\x2$\xF9\x3\x2\x2\x2&\x10A\x3\x2\x2\x2(\x112\x3\x2\x2\x2*\x11F"+
		"\x3\x2\x2\x2,\x124\x3\x2\x2\x2.\x127\x3\x2\x2\x2\x30\x138\x3\x2\x2\x2"+
		"\x32\x144\x3\x2\x2\x2\x34\x149\x3\x2\x2\x2\x36\x14F\x3\x2\x2\x2\x38\x151"+
		"\x3\x2\x2\x2:\x154\x3\x2\x2\x2<\x158\x3\x2\x2\x2>\x15A\x3\x2\x2\x2@\x164"+
		"\x3\x2\x2\x2\x42\x166\x3\x2\x2\x2\x44\x170\x3\x2\x2\x2\x46\x175\x3\x2"+
		"\x2\x2H\x17E\x3\x2\x2\x2J\x186\x3\x2\x2\x2L\x18B\x3\x2\x2\x2N\x193\x3"+
		"\x2\x2\x2P\x19C\x3\x2\x2\x2R\x1A7\x3\x2\x2\x2T\x1B4\x3\x2\x2\x2V\x1B6"+
		"\x3\x2\x2\x2X\x1C0\x3\x2\x2\x2Z\x1C5\x3\x2\x2\x2\\\x1CE\x3\x2\x2\x2^\x1D6"+
		"\x3\x2\x2\x2`\x1DB\x3\x2\x2\x2\x62\x1E3\x3\x2\x2\x2\x64\x1EC\x3\x2\x2"+
		"\x2\x66\x1F7\x3\x2\x2\x2h\x1FC\x3\x2\x2\x2j\x204\x3\x2\x2\x2lr\x5\x1C"+
		"\xF\x2mr\x5\x6\x4\x2nr\x5@!\x2or\x5T+\x2pr\x5\x4\x3\x2ql\x3\x2\x2\x2q"+
		"m\x3\x2\x2\x2qn\x3\x2\x2\x2qo\x3\x2\x2\x2qp\x3\x2\x2\x2rs\x3\x2\x2\x2"+
		"st\a\x2\x2\x3t\x3\x3\x2\x2\x2uv\t\x2\x2\x2v\x5\x3\x2\x2\x2wx\x5\x18\r"+
		"\x2xy\x5\x16\f\x2y\a\x3\x2\x2\x2z{\a\x3\x2\x2{\x8F\aT\x2\x2|}\a\x4\x2"+
		"\x2}\x80\x5\n\x6\x2~\x7F\a\x5\x2\x2\x7F\x81\x5\xE\b\x2\x80~\x3\x2\x2\x2"+
		"\x81\x82\x3\x2\x2\x2\x82\x80\x3\x2\x2\x2\x82\x83\x3\x2\x2\x2\x83\x8F\x3"+
		"\x2\x2\x2\x84\x85\a\x6\x2\x2\x85\x86\aT\x2\x2\x86\x87\a\a\x2\x2\x87\x8A"+
		"\x5\n\x6\x2\x88\x89\a\x5\x2\x2\x89\x8B\x5\xE\b\x2\x8A\x88\x3\x2\x2\x2"+
		"\x8B\x8C\x3\x2\x2\x2\x8C\x8A\x3\x2\x2\x2\x8C\x8D\x3\x2\x2\x2\x8D\x8F\x3"+
		"\x2\x2\x2\x8Ez\x3\x2\x2\x2\x8E|\x3\x2\x2\x2\x8E\x84\x3\x2\x2\x2\x8F\t"+
		"\x3\x2\x2\x2\x90\x95\x5\x10\t\x2\x91\x92\a\b\x2\x2\x92\x94\x5\x10\t\x2"+
		"\x93\x91\x3\x2\x2\x2\x94\x97\x3\x2\x2\x2\x95\x93\x3\x2\x2\x2\x95\x96\x3"+
		"\x2\x2\x2\x96\x98\x3\x2\x2\x2\x97\x95\x3\x2\x2\x2\x98\x9B\a\b\x2\x2\x99"+
		"\x9A\a\t\x2\x2\x9A\x9C\aR\x2\x2\x9B\x99\x3\x2\x2\x2\x9B\x9C\x3\x2\x2\x2"+
		"\x9C\x9F\x3\x2\x2\x2\x9D\x9E\a\n\x2\x2\x9E\xA0\aR\x2\x2\x9F\x9D\x3\x2"+
		"\x2\x2\x9F\xA0\x3\x2\x2\x2\xA0\v\x3\x2\x2\x2\xA1\xA2\a\v\x2\x2\xA2\xB0"+
		"\aT\x2\x2\xA3\xA4\a\f\x2\x2\xA4\xB0\x5\xE\b\x2\xA5\xA6\a\r\x2\x2\xA6\xA7"+
		"\aT\x2\x2\xA7\xA8\a\a\x2\x2\xA8\xAB\x5\n\x6\x2\xA9\xAA\a\x5\x2\x2\xAA"+
		"\xAC\x5\xE\b\x2\xAB\xA9\x3\x2\x2\x2\xAC\xAD\x3\x2\x2\x2\xAD\xAB\x3\x2"+
		"\x2\x2\xAD\xAE\x3\x2\x2\x2\xAE\xB0\x3\x2\x2\x2\xAF\xA1\x3\x2\x2\x2\xAF"+
		"\xA3\x3\x2\x2\x2\xAF\xA5\x3\x2\x2\x2\xB0\r\x3\x2\x2\x2\xB1\xB2\x5\x12"+
		"\n\x2\xB2\xB5\x5\xE\b\x2\xB3\xB4\a\b\x2\x2\xB4\xB6\x5\xE\b\x2\xB5\xB3"+
		"\x3\x2\x2\x2\xB6\xB7\x3\x2\x2\x2\xB7\xB5\x3\x2\x2\x2\xB7\xB8\x3\x2\x2"+
		"\x2\xB8\xBB\x3\x2\x2\x2\xB9\xBB\x5\x10\t\x2\xBA\xB1\x3\x2\x2\x2\xBA\xB9"+
		"\x3\x2\x2\x2\xBB\xF\x3\x2\x2\x2\xBC\xBD\x5\x12\n\x2\xBD\xBF\x5\x6\x4\x2"+
		"\xBE\xC0\x5\x14\v\x2\xBF\xBE\x3\x2\x2\x2\xBF\xC0\x3\x2\x2\x2\xC0\x11\x3"+
		"\x2\x2\x2\xC1\xC2\aT\x2\x2\xC2\xC3\a\a\x2\x2\xC3\x13\x3\x2\x2\x2\xC4\xC5"+
		"\a\xE\x2\x2\xC5\xC6\t\x3\x2\x2\xC6\x15\x3\x2\x2\x2\xC7\xCB\t\x4\x2\x2"+
		"\xC8\xCA\t\x5\x2\x2\xC9\xC8\x3\x2\x2\x2\xCA\xCD\x3\x2\x2\x2\xCB\xC9\x3"+
		"\x2\x2\x2\xCB\xCC\x3\x2\x2\x2\xCC\xCF\x3\x2\x2\x2\xCD\xCB\x3\x2\x2\x2"+
		"\xCE\xD0\t\x6\x2\x2\xCF\xCE\x3\x2\x2\x2\xCF\xD0\x3\x2\x2\x2\xD0\x17\x3"+
		"\x2\x2\x2\xD1\xD2\x5\x1C\xF\x2\xD2\xD3\x5\x1A\xE\x2\xD3\xD6\x3\x2\x2\x2"+
		"\xD4\xD6\x5$\x13\x2\xD5\xD1\x3\x2\x2\x2\xD5\xD4\x3\x2\x2\x2\xD6\x19\x3"+
		"\x2\x2\x2\xD7\xDB\a\x1E\x2\x2\xD8\xD9\a\a\x2\x2\xD9\xDB\x5&\x14\x2\xDA"+
		"\xD7\x3\x2\x2\x2\xDA\xD8\x3\x2\x2\x2\xDB\x1B\x3\x2\x2\x2\xDC\xE1\x5\x1E"+
		"\x10\x2\xDD\xDE\t\a\x2\x2\xDE\xE0\x5\x1E\x10\x2\xDF\xDD\x3\x2\x2\x2\xE0"+
		"\xE3\x3\x2\x2\x2\xE1\xDF\x3\x2\x2\x2\xE1\xE2\x3\x2\x2\x2\xE2\x1D\x3\x2"+
		"\x2\x2\xE3\xE1\x3\x2\x2\x2\xE4\xE9\x5 \x11\x2\xE5\xE6\a\xE\x2\x2\xE6\xE8"+
		"\x5 \x11\x2\xE7\xE5\x3\x2\x2\x2\xE8\xEB\x3\x2\x2\x2\xE9\xE7\x3\x2\x2\x2"+
		"\xE9\xEA\x3\x2\x2\x2\xEA\x1F\x3\x2\x2\x2\xEB\xE9\x3\x2\x2\x2\xEC\xED\a"+
		"!\x2\x2\xED\xEE\x5\x1C\xF\x2\xEE\xEF\a\"\x2\x2\xEF\xF2\x3\x2\x2\x2\xF0"+
		"\xF2\x5\"\x12\x2\xF1\xEC\x3\x2\x2\x2\xF1\xF0\x3\x2\x2\x2\xF2!\x3\x2\x2"+
		"\x2\xF3\xF4\t\a\x2\x2\xF4\xF7\x5$\x13\x2\xF5\xF7\x5$\x13\x2\xF6\xF3\x3"+
		"\x2\x2\x2\xF6\xF5\x3\x2\x2\x2\xF7#\x3\x2\x2\x2\xF8\xFA\x5&\x14\x2\xF9"+
		"\xF8\x3\x2\x2\x2\xF9\xFA\x3\x2\x2\x2\xFA\xFC\x3\x2\x2\x2\xFB\xFD\t\b\x2"+
		"\x2\xFC\xFB\x3\x2\x2\x2\xFC\xFD\x3\x2\x2\x2\xFD\xFF\x3\x2\x2\x2\xFE\x100"+
		"\x5\x30\x19\x2\xFF\xFE\x3\x2\x2\x2\xFF\x100\x3\x2\x2\x2\x100\x102\x3\x2"+
		"\x2\x2\x101\x103\aM\x2\x2\x102\x101\x3\x2\x2\x2\x102\x103\x3\x2\x2\x2"+
		"\x103\x105\x3\x2\x2\x2\x104\x106\aL\x2\x2\x105\x104\x3\x2\x2\x2\x105\x106"+
		"\x3\x2\x2\x2\x106\x108\x3\x2\x2\x2\x107\x109\aK\x2\x2\x108\x107\x3\x2"+
		"\x2\x2\x108\x109\x3\x2\x2\x2\x109%\x3\x2\x2\x2\x10A\x10F\x5(\x15\x2\x10B"+
		"\x10C\t\a\x2\x2\x10C\x10E\x5(\x15\x2\x10D\x10B\x3\x2\x2\x2\x10E\x111\x3"+
		"\x2\x2\x2\x10F\x10D\x3\x2\x2\x2\x10F\x110\x3\x2\x2\x2\x110\'\x3\x2\x2"+
		"\x2\x111\x10F\x3\x2\x2\x2\x112\x117\x5*\x16\x2\x113\x114\a\xE\x2\x2\x114"+
		"\x116\x5*\x16\x2\x115\x113\x3\x2\x2\x2\x116\x119\x3\x2\x2\x2\x117\x115"+
		"\x3\x2\x2\x2\x117\x118\x3\x2\x2\x2\x118)\x3\x2\x2\x2\x119\x117\x3\x2\x2"+
		"\x2\x11A\x11B\a!\x2\x2\x11B\x11C\x5&\x14\x2\x11C\x11D\a\"\x2\x2\x11D\x120"+
		"\x3\x2\x2\x2\x11E\x120\x5,\x17\x2\x11F\x11A\x3\x2\x2\x2\x11F\x11E\x3\x2"+
		"\x2\x2\x120+\x3\x2\x2\x2\x121\x122\t\a\x2\x2\x122\x125\x5.\x18\x2\x123"+
		"\x125\x5.\x18\x2\x124\x121\x3\x2\x2\x2\x124\x123\x3\x2\x2\x2\x125-\x3"+
		"\x2\x2\x2\x126\x128\t\t\x2\x2\x127\x126\x3\x2\x2\x2\x127\x128\x3\x2\x2"+
		"\x2\x128\x12A\x3\x2\x2\x2\x129\x12B\aO\x2\x2\x12A\x129\x3\x2\x2\x2\x12A"+
		"\x12B\x3\x2\x2\x2\x12B\x12D\x3\x2\x2\x2\x12C\x12E\aN\x2\x2\x12D\x12C\x3"+
		"\x2\x2\x2\x12D\x12E\x3\x2\x2\x2\x12E\x130\x3\x2\x2\x2\x12F\x131\t\n\x2"+
		"\x2\x130\x12F\x3\x2\x2\x2\x130\x131\x3\x2\x2\x2\x131/\x3\x2\x2\x2\x132"+
		"\x139\a$\x2\x2\x133\x139\x5\x32\x1A\x2\x134\x135\a%\x2\x2\x135\x136\x5"+
		"\x32\x1A\x2\x136\x137\a&\x2\x2\x137\x139\x3\x2\x2\x2\x138\x132\x3\x2\x2"+
		"\x2\x138\x133\x3\x2\x2\x2\x138\x134\x3\x2\x2\x2\x139\x31\x3\x2\x2\x2\x13A"+
		"\x145\a\x43\x2\x2\x13B\x145\a\x44\x2\x2\x13C\x13D\x5\x36\x1C\x2\x13D\x13F"+
		"\t\v\x2\x2\x13E\x140\x5\x36\x1C\x2\x13F\x13E\x3\x2\x2\x2\x13F\x140\x3"+
		"\x2\x2\x2\x140\x145\x3\x2\x2\x2\x141\x142\t\v\x2\x2\x142\x145\x5\x36\x1C"+
		"\x2\x143\x145\x5\x36\x1C\x2\x144\x13A\x3\x2\x2\x2\x144\x13B\x3\x2\x2\x2"+
		"\x144\x13C\x3\x2\x2\x2\x144\x141\x3\x2\x2\x2\x144\x143\x3\x2\x2\x2\x145"+
		"\x33\x3\x2\x2\x2\x146\x14A\a\x43\x2\x2\x147\x14A\a$\x2\x2\x148\x14A\x5"+
		"\x36\x1C\x2\x149\x146\x3\x2\x2\x2\x149\x147\x3\x2\x2\x2\x149\x148\x3\x2"+
		"\x2\x2\x14A\x35\x3\x2\x2\x2\x14B\x150\x5\x38\x1D\x2\x14C\x150\x5:\x1E"+
		"\x2\x14D\x150\x5<\x1F\x2\x14E\x150\x5> \x2\x14F\x14B\x3\x2\x2\x2\x14F"+
		"\x14C\x3\x2\x2\x2\x14F\x14D\x3\x2\x2\x2\x14F\x14E\x3\x2\x2\x2\x150\x37"+
		"\x3\x2\x2\x2\x151\x152\a\x45\x2\x2\x152\x39\x3\x2\x2\x2\x153\x155\t\f"+
		"\x2\x2\x154\x153\x3\x2\x2\x2\x154\x155\x3\x2\x2\x2\x155\x156\x3\x2\x2"+
		"\x2\x156\x157\t\r\x2\x2\x157;\x3\x2\x2\x2\x158\x159\aJ\x2\x2\x159=\x3"+
		"\x2\x2\x2\x15A\x15B\t\xE\x2\x2\x15B?\x3\x2\x2\x2\x15C\x165\x5\x42\"\x2"+
		"\x15D\x165\x5\x44#\x2\x15E\x165\x5\x46$\x2\x15F\x165\x5H%\x2\x160\x165"+
		"\x5L\'\x2\x161\x165\x5N(\x2\x162\x165\x5P)\x2\x163\x165\x5R*\x2\x164\x15C"+
		"\x3\x2\x2\x2\x164\x15D\x3\x2\x2\x2\x164\x15E\x3\x2\x2\x2\x164\x15F\x3"+
		"\x2\x2\x2\x164\x160\x3\x2\x2\x2\x164\x161\x3\x2\x2\x2\x164\x162\x3\x2"+
		"\x2\x2\x164\x163\x3\x2\x2\x2\x165\x41\x3\x2\x2\x2\x166\x168\a*\x2\x2\x167"+
		"\x169\t\xF\x2\x2\x168\x167\x3\x2\x2\x2\x168\x169\x3\x2\x2\x2\x169\x16B"+
		"\x3\x2\x2\x2\x16A\x16C\x5\x34\x1B\x2\x16B\x16A\x3\x2\x2\x2\x16B\x16C\x3"+
		"\x2\x2\x2\x16C\x16E\x3\x2\x2\x2\x16D\x16F\x5h\x35\x2\x16E\x16D\x3\x2\x2"+
		"\x2\x16E\x16F\x3\x2\x2\x2\x16F\x43\x3\x2\x2\x2\x170\x171\a*\x2\x2\x171"+
		"\x173\a\x38\x2\x2\x172\x174\x5h\x35\x2\x173\x172\x3\x2\x2\x2\x173\x174"+
		"\x3\x2\x2\x2\x174\x45\x3\x2\x2\x2\x175\x176\a*\x2\x2\x176\x178\a\x39\x2"+
		"\x2\x177\x179\x5h\x35\x2\x178\x177\x3\x2\x2\x2\x178\x179\x3\x2\x2\x2\x179"+
		"\x17C\x3\x2\x2\x2\x17A\x17B\a\a\x2\x2\x17B\x17D\x5\x18\r\x2\x17C\x17A"+
		"\x3\x2\x2\x2\x17C\x17D\x3\x2\x2\x2\x17DG\x3\x2\x2\x2\x17E\x17F\a*\x2\x2"+
		"\x17F\x181\a:\x2\x2\x180\x182\x5h\x35\x2\x181\x180\x3\x2\x2\x2\x181\x182"+
		"\x3\x2\x2\x2\x182\x184\x3\x2\x2\x2\x183\x185\x5\x30\x19\x2\x184\x183\x3"+
		"\x2\x2\x2\x184\x185\x3\x2\x2\x2\x185I\x3\x2\x2\x2\x186\x187\a*\x2\x2\x187"+
		"\x189\a;\x2\x2\x188\x18A\x5h\x35\x2\x189\x188\x3\x2\x2\x2\x189\x18A\x3"+
		"\x2\x2\x2\x18AK\x3\x2\x2\x2\x18B\x18C\a*\x2\x2\x18C\x18E\a=\x2\x2\x18D"+
		"\x18F\x5h\x35\x2\x18E\x18D\x3\x2\x2\x2\x18E\x18F\x3\x2\x2\x2\x18F\x191"+
		"\x3\x2\x2\x2\x190\x192\x5\x30\x19\x2\x191\x190\x3\x2\x2\x2\x191\x192\x3"+
		"\x2\x2\x2\x192M\x3\x2\x2\x2\x193\x194\a*\x2\x2\x194\x196\a>\x2\x2\x195"+
		"\x197\x5h\x35\x2\x196\x195\x3\x2\x2\x2\x196\x197\x3\x2\x2\x2\x197\x19A"+
		"\x3\x2\x2\x2\x198\x199\a\a\x2\x2\x199\x19B\x5\x18\r\x2\x19A\x198\x3\x2"+
		"\x2\x2\x19A\x19B\x3\x2\x2\x2\x19BO\x3\x2\x2\x2\x19C\x19D\a*\x2\x2\x19D"+
		"\x19F\a?\x2\x2\x19E\x1A0\a@\x2\x2\x19F\x19E\x3\x2\x2\x2\x19F\x1A0\x3\x2"+
		"\x2\x2\x1A0\x1A2\x3\x2\x2\x2\x1A1\x1A3\x5h\x35\x2\x1A2\x1A1\x3\x2\x2\x2"+
		"\x1A2\x1A3\x3\x2\x2\x2\x1A3\x1A5\x3\x2\x2\x2\x1A4\x1A6\x5\x30\x19\x2\x1A5"+
		"\x1A4\x3\x2\x2\x2\x1A5\x1A6\x3\x2\x2\x2\x1A6Q\x3\x2\x2\x2\x1A7\x1A8\a"+
		"*\x2\x2\x1A8\x1AA\a\x41\x2\x2\x1A9\x1AB\x5h\x35\x2\x1AA\x1A9\x3\x2\x2"+
		"\x2\x1AA\x1AB\x3\x2\x2\x2\x1ABS\x3\x2\x2\x2\x1AC\x1B5\x5V,\x2\x1AD\x1B5"+
		"\x5X-\x2\x1AE\x1B5\x5Z.\x2\x1AF\x1B5\x5\\/\x2\x1B0\x1B5\x5`\x31\x2\x1B1"+
		"\x1B5\x5\x62\x32\x2\x1B2\x1B5\x5\x64\x33\x2\x1B3\x1B5\x5\x66\x34\x2\x1B4"+
		"\x1AC\x3\x2\x2\x2\x1B4\x1AD\x3\x2\x2\x2\x1B4\x1AE\x3\x2\x2\x2\x1B4\x1AF"+
		"\x3\x2\x2\x2\x1B4\x1B0\x3\x2\x2\x2\x1B4\x1B1\x3\x2\x2\x2\x1B4\x1B2\x3"+
		"\x2\x2\x2\x1B4\x1B3\x3\x2\x2\x2\x1B5U\x3\x2\x2\x2\x1B6\x1B8\a+\x2\x2\x1B7"+
		"\x1B9\t\xF\x2\x2\x1B8\x1B7\x3\x2\x2\x2\x1B8\x1B9\x3\x2\x2\x2\x1B9\x1BB"+
		"\x3\x2\x2\x2\x1BA\x1BC\x5\x34\x1B\x2\x1BB\x1BA\x3\x2\x2\x2\x1BB\x1BC\x3"+
		"\x2\x2\x2\x1BC\x1BE\x3\x2\x2\x2\x1BD\x1BF\x5h\x35\x2\x1BE\x1BD\x3\x2\x2"+
		"\x2\x1BE\x1BF\x3\x2\x2\x2\x1BFW\x3\x2\x2\x2\x1C0\x1C1\a+\x2\x2\x1C1\x1C3"+
		"\a\x38\x2\x2\x1C2\x1C4\x5h\x35\x2\x1C3\x1C2\x3\x2\x2\x2\x1C3\x1C4\x3\x2"+
		"\x2\x2\x1C4Y\x3\x2\x2\x2\x1C5\x1C6\a+\x2\x2\x1C6\x1C8\a\x39\x2\x2\x1C7"+
		"\x1C9\x5h\x35\x2\x1C8\x1C7\x3\x2\x2\x2\x1C8\x1C9\x3\x2\x2\x2\x1C9\x1CC"+
		"\x3\x2\x2\x2\x1CA\x1CB\a\a\x2\x2\x1CB\x1CD\x5\x18\r\x2\x1CC\x1CA\x3\x2"+
		"\x2\x2\x1CC\x1CD\x3\x2\x2\x2\x1CD[\x3\x2\x2\x2\x1CE\x1CF\a+\x2\x2\x1CF"+
		"\x1D1\a:\x2\x2\x1D0\x1D2\x5h\x35\x2\x1D1\x1D0\x3\x2\x2\x2\x1D1\x1D2\x3"+
		"\x2\x2\x2\x1D2\x1D4\x3\x2\x2\x2\x1D3\x1D5\x5\x30\x19\x2\x1D4\x1D3\x3\x2"+
		"\x2\x2\x1D4\x1D5\x3\x2\x2\x2\x1D5]\x3\x2\x2\x2\x1D6\x1D7\a+\x2\x2\x1D7"+
		"\x1D9\a<\x2\x2\x1D8\x1DA\x5h\x35\x2\x1D9\x1D8\x3\x2\x2\x2\x1D9\x1DA\x3"+
		"\x2\x2\x2\x1DA_\x3\x2\x2\x2\x1DB\x1DC\a+\x2\x2\x1DC\x1DE\a=\x2\x2\x1DD"+
		"\x1DF\x5h\x35\x2\x1DE\x1DD\x3\x2\x2\x2\x1DE\x1DF\x3\x2\x2\x2\x1DF\x1E1"+
		"\x3\x2\x2\x2\x1E0\x1E2\x5\x30\x19\x2\x1E1\x1E0\x3\x2\x2\x2\x1E1\x1E2\x3"+
		"\x2\x2\x2\x1E2\x61\x3\x2\x2\x2\x1E3\x1E4\a+\x2\x2\x1E4\x1E6\a>\x2\x2\x1E5"+
		"\x1E7\x5h\x35\x2\x1E6\x1E5\x3\x2\x2\x2\x1E6\x1E7\x3\x2\x2\x2\x1E7\x1EA"+
		"\x3\x2\x2\x2\x1E8\x1E9\a\a\x2\x2\x1E9\x1EB\x5\x18\r\x2\x1EA\x1E8\x3\x2"+
		"\x2\x2\x1EA\x1EB\x3\x2\x2\x2\x1EB\x63\x3\x2\x2\x2\x1EC\x1ED\a+\x2\x2\x1ED"+
		"\x1EF\a?\x2\x2\x1EE\x1F0\a@\x2\x2\x1EF\x1EE\x3\x2\x2\x2\x1EF\x1F0\x3\x2"+
		"\x2\x2\x1F0\x1F2\x3\x2\x2\x2\x1F1\x1F3\x5h\x35\x2\x1F2\x1F1\x3\x2\x2\x2"+
		"\x1F2\x1F3\x3\x2\x2\x2\x1F3\x1F5\x3\x2\x2\x2\x1F4\x1F6\x5\x30\x19\x2\x1F5"+
		"\x1F4\x3\x2\x2\x2\x1F5\x1F6\x3\x2\x2\x2\x1F6\x65\x3\x2\x2\x2\x1F7\x1F8"+
		"\a+\x2\x2\x1F8\x1FA\a\x41\x2\x2\x1F9\x1FB\x5h\x35\x2\x1FA\x1F9\x3\x2\x2"+
		"\x2\x1FA\x1FB\x3\x2\x2\x2\x1FBg\x3\x2\x2\x2\x1FC\x201\x5j\x36\x2\x1FD"+
		"\x1FE\a\x1F\x2\x2\x1FE\x200\x5j\x36\x2\x1FF\x1FD\x3\x2\x2\x2\x200\x203"+
		"\x3\x2\x2\x2\x201\x1FF\x3\x2\x2\x2\x201\x202\x3\x2\x2\x2\x202i\x3\x2\x2"+
		"\x2\x203\x201\x3\x2\x2\x2\x204\x205\t\x10\x2\x2\x205k\x3\x2\x2\x2Oq\x82"+
		"\x8C\x8E\x95\x9B\x9F\xAD\xAF\xB7\xBA\xBF\xCB\xCF\xD5\xDA\xE1\xE9\xF1\xF6"+
		"\xF9\xFC\xFF\x102\x105\x108\x10F\x117\x11F\x124\x127\x12A\x12D\x130\x138"+
		"\x13F\x144\x149\x14F\x154\x164\x168\x16B\x16E\x173\x178\x17C\x181\x184"+
		"\x189\x18E\x191\x196\x19A\x19F\x1A2\x1A5\x1AA\x1B4\x1B8\x1BB\x1BE\x1C3"+
		"\x1C8\x1CC\x1D1\x1D4\x1D9\x1DE\x1E1\x1E6\x1EA\x1EF\x1F2\x1F5\x1FA\x201";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace AccountingServer.Console
