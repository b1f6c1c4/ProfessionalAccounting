//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.4.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\b1f6c1c4\Documents\GitHub\ProfessionalAccounting\Server\AccountingServer.QueryGeneration\Console.g4 by ANTLR 4.4.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace AccountingServer.Console {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.4.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class ConsoleParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, Launch=41, Connect=42, Shutdown=43, Backup=44, Mobile=45, 
		Fetch=46, Help=47, Titles=48, Exit=49, Check=50, AOAll=51, AOList=52, 
		AOQuery=53, AORegister=54, AOUnregister=55, ARedep=56, OReamo=57, AOResetSoft=58, 
		AOResetHard=59, AOApply=60, AOCollapse=61, AOCheck=62, Guid=63, RangeNull=64, 
		RangeAllNotNull=65, RangeAYear=66, RangeAMonth=67, RangeDeltaMonth=68, 
		RangeADay=69, RangeDeltaDay=70, RangeDeltaWeek=71, VoucherType=72, PercentQuotedString=73, 
		DollarQuotedString=74, DoubleQuotedString=75, SingleQuotedString=76, DetailTitle=77, 
		DetailTitleSubTitle=78, Float=79, Percent=80, Intersect=81, Union=82, 
		Substract=83, WS=84;
	public const int
		RULE_command = 0, RULE_otherCommand = 1, RULE_groupedQuery = 2, RULE_chart = 3, 
		RULE_chartArea = 4, RULE_report = 5, RULE_hyperItem = 6, RULE_hyperItemAtom = 7, 
		RULE_name = 8, RULE_coef = 9, RULE_subtotal = 10, RULE_voucherDetailQuery = 11, 
		RULE_emit = 12, RULE_vouchers = 13, RULE_vouchersB = 14, RULE_voucherQuery = 15, 
		RULE_details = 16, RULE_detailQuery = 17, RULE_range = 18, RULE_rangeCore = 19, 
		RULE_rangePoint = 20, RULE_rangeCertainPoint = 21, RULE_rangeYear = 22, 
		RULE_rangeMonth = 23, RULE_rangeWeek = 24, RULE_rangeDay = 25, RULE_asset = 26, 
		RULE_assetList = 27, RULE_assetQuery = 28, RULE_assetRegister = 29, RULE_assetUnregister = 30, 
		RULE_assetRedep = 31, RULE_assetResetSoft = 32, RULE_assetResetHard = 33, 
		RULE_assetApply = 34, RULE_assetCheck = 35, RULE_amort = 36, RULE_amortList = 37, 
		RULE_amortQuery = 38, RULE_amortRegister = 39, RULE_amortUnregister = 40, 
		RULE_amortReamo = 41, RULE_amortResetSoft = 42, RULE_amortApply = 43, 
		RULE_amortCheck = 44, RULE_distributedQ = 45, RULE_distributedQAtom = 46;
	public static readonly string[] ruleNames = {
		"command", "otherCommand", "groupedQuery", "chart", "chartArea", "report", 
		"hyperItem", "hyperItemAtom", "name", "coef", "subtotal", "voucherDetailQuery", 
		"emit", "vouchers", "vouchersB", "voucherQuery", "details", "detailQuery", 
		"range", "rangeCore", "rangePoint", "rangeCertainPoint", "rangeYear", 
		"rangeMonth", "rangeWeek", "rangeDay", "asset", "assetList", "assetQuery", 
		"assetRegister", "assetUnregister", "assetRedep", "assetResetSoft", "assetResetHard", 
		"assetApply", "assetCheck", "amort", "amortList", "amortQuery", "amortRegister", 
		"amortUnregister", "amortReamo", "amortResetSoft", "amortApply", "amortCheck", 
		"distributedQ", "distributedQAtom"
	};

	private static readonly string[] _LiteralNames = {
		null, "'c::'", "'c||'", "'||'", "'c:'", "':'", "'|'", "'_'", "'^'", "'r::'", 
		"'r||'", "'r:'", "'`'", "'``'", "'t'", "'s'", "'c'", "'r'", "'d'", "'w'", 
		"'m'", "'f'", "'b'", "'y'", "'D'", "'['", "']'", "'A'", "'{'", "'}'", 
		"'E'", "'('", "')'", "'[]'", "'~'", "'@'", "'#'", "'a'", "'o'", "'[['", 
		"']]'", null, null, null, "'backup'", null, "'fetch'", null, null, "'exit'", 
		null, "'-all'", null, null, null, null, null, null, "'-reset-soft'", "'-reset-hard'", 
		null, null, "'-chk'", null, "'null'", "'~null'", null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "'*'", 
		"'+'", "'-'", "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "Launch", "Connect", "Shutdown", "Backup", 
		"Mobile", "Fetch", "Help", "Titles", "Exit", "Check", "AOAll", "AOList", 
		"AOQuery", "AORegister", "AOUnregister", "ARedep", "OReamo", "AOResetSoft", 
		"AOResetHard", "AOApply", "AOCollapse", "AOCheck", "Guid", "RangeNull", 
		"RangeAllNotNull", "RangeAYear", "RangeAMonth", "RangeDeltaMonth", "RangeADay", 
		"RangeDeltaDay", "RangeDeltaWeek", "VoucherType", "PercentQuotedString", 
		"DollarQuotedString", "DoubleQuotedString", "SingleQuotedString", "DetailTitle", 
		"DetailTitleSubTitle", "Float", "Percent", "Intersect", "Union", "Substract", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Console.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }


		protected const int EOF = Eof;

	public ConsoleParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CommandContext : ParserRuleContext {
		public AssetContext asset() {
			return GetRuleContext<AssetContext>(0);
		}
		public GroupedQueryContext groupedQuery() {
			return GetRuleContext<GroupedQueryContext>(0);
		}
		public AmortContext amort() {
			return GetRuleContext<AmortContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(ConsoleParser.Eof, 0); }
		public OtherCommandContext otherCommand() {
			return GetRuleContext<OtherCommandContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_command);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 94; vouchers();
				}
				break;

			case 2:
				{
				State = 95; groupedQuery();
				}
				break;

			case 3:
				{
				State = 96; asset();
				}
				break;

			case 4:
				{
				State = 97; amort();
				}
				break;

			case 5:
				{
				State = 98; otherCommand();
				}
				break;
			}
			State = 101; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherCommandContext : ParserRuleContext {
		public ITerminalNode Connect() { return GetToken(ConsoleParser.Connect, 0); }
		public ITerminalNode Backup() { return GetToken(ConsoleParser.Backup, 0); }
		public ITerminalNode Shutdown() { return GetToken(ConsoleParser.Shutdown, 0); }
		public ITerminalNode Fetch() { return GetToken(ConsoleParser.Fetch, 0); }
		public ITerminalNode Mobile() { return GetToken(ConsoleParser.Mobile, 0); }
		public ITerminalNode Help() { return GetToken(ConsoleParser.Help, 0); }
		public ITerminalNode Check() { return GetToken(ConsoleParser.Check, 0); }
		public ITerminalNode Launch() { return GetToken(ConsoleParser.Launch, 0); }
		public ITerminalNode Exit() { return GetToken(ConsoleParser.Exit, 0); }
		public ITerminalNode Titles() { return GetToken(ConsoleParser.Titles, 0); }
		public OtherCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherCommand; } }
	}

	[RuleVersion(0)]
	public OtherCommandContext otherCommand() {
		OtherCommandContext _localctx = new OtherCommandContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_otherCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Launch) | (1L << Connect) | (1L << Shutdown) | (1L << Backup) | (1L << Mobile) | (1L << Fetch) | (1L << Help) | (1L << Titles) | (1L << Exit) | (1L << Check))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupedQueryContext : ParserRuleContext {
		public SubtotalContext subtotal() {
			return GetRuleContext<SubtotalContext>(0);
		}
		public VoucherDetailQueryContext voucherDetailQuery() {
			return GetRuleContext<VoucherDetailQueryContext>(0);
		}
		public GroupedQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupedQuery; } }
	}

	[RuleVersion(0)]
	public GroupedQueryContext groupedQuery() {
		GroupedQueryContext _localctx = new GroupedQueryContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_groupedQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105; voucherDetailQuery();
			State = 106; subtotal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChartContext : ParserRuleContext {
		public ITerminalNode DollarQuotedString() { return GetToken(ConsoleParser.DollarQuotedString, 0); }
		public ChartAreaContext chartArea() {
			return GetRuleContext<ChartAreaContext>(0);
		}
		public HyperItemContext hyperItem(int i) {
			return GetRuleContext<HyperItemContext>(i);
		}
		public IReadOnlyList<HyperItemContext> hyperItem() {
			return GetRuleContexts<HyperItemContext>();
		}
		public ChartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chart; } }
	}

	[RuleVersion(0)]
	public ChartContext chart() {
		ChartContext _localctx = new ChartContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_chart);
		int _la;
		try {
			State = 128;
			switch (_input.La(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 108; Match(T__0);
				State = 109; Match(DollarQuotedString);
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 110; Match(T__1);
				State = 111; chartArea();
				State = 114;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 112; Match(T__2);
					State = 113; hyperItem();
					}
					}
					State = 116;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==T__2 );
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 118; Match(T__3);
				State = 119; Match(DollarQuotedString);
				State = 120; Match(T__4);
				State = 121; chartArea();
				State = 124;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 122; Match(T__2);
					State = 123; hyperItem();
					}
					}
					State = 126;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==T__2 );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChartAreaContext : ParserRuleContext {
		public IReadOnlyList<HyperItemAtomContext> hyperItemAtom() {
			return GetRuleContexts<HyperItemAtomContext>();
		}
		public ITerminalNode Float(int i) {
			return GetToken(ConsoleParser.Float, i);
		}
		public HyperItemAtomContext hyperItemAtom(int i) {
			return GetRuleContext<HyperItemAtomContext>(i);
		}
		public IReadOnlyList<ITerminalNode> Float() { return GetTokens(ConsoleParser.Float); }
		public ChartAreaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chartArea; } }
	}

	[RuleVersion(0)]
	public ChartAreaContext chartArea() {
		ChartAreaContext _localctx = new ChartAreaContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_chartArea);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 130; hyperItemAtom();
			State = 135;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 131; Match(T__5);
					State = 132; hyperItemAtom();
					}
					} 
				}
				State = 137;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			}
			State = 138; Match(T__5);
			State = 141;
			_la = _input.La(1);
			if (_la==T__6) {
				{
				State = 139; Match(T__6);
				State = 140; Match(Float);
				}
			}

			State = 145;
			_la = _input.La(1);
			if (_la==T__7) {
				{
				State = 143; Match(T__7);
				State = 144; Match(Float);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReportContext : ParserRuleContext {
		public ITerminalNode DollarQuotedString() { return GetToken(ConsoleParser.DollarQuotedString, 0); }
		public ChartAreaContext chartArea() {
			return GetRuleContext<ChartAreaContext>(0);
		}
		public HyperItemContext hyperItem(int i) {
			return GetRuleContext<HyperItemContext>(i);
		}
		public IReadOnlyList<HyperItemContext> hyperItem() {
			return GetRuleContexts<HyperItemContext>();
		}
		public ReportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_report; } }
	}

	[RuleVersion(0)]
	public ReportContext report() {
		ReportContext _localctx = new ReportContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_report);
		int _la;
		try {
			State = 161;
			switch (_input.La(1)) {
			case T__8:
				EnterOuterAlt(_localctx, 1);
				{
				State = 147; Match(T__8);
				State = 148; Match(DollarQuotedString);
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 149; Match(T__9);
				State = 150; hyperItem();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 3);
				{
				State = 151; Match(T__10);
				State = 152; Match(DollarQuotedString);
				State = 153; Match(T__4);
				State = 154; chartArea();
				State = 157;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 155; Match(T__2);
					State = 156; hyperItem();
					}
					}
					State = 159;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==T__2 );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HyperItemContext : ParserRuleContext {
		public HyperItemAtomContext hyperItemAtom() {
			return GetRuleContext<HyperItemAtomContext>(0);
		}
		public HyperItemContext hyperItem(int i) {
			return GetRuleContext<HyperItemContext>(i);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public IReadOnlyList<HyperItemContext> hyperItem() {
			return GetRuleContexts<HyperItemContext>();
		}
		public HyperItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hyperItem; } }
	}

	[RuleVersion(0)]
	public HyperItemContext hyperItem() {
		HyperItemContext _localctx = new HyperItemContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_hyperItem);
		try {
			int _alt;
			State = 172;
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 163; name();
				State = 164; hyperItem();
				State = 167;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 165; Match(T__5);
						State = 166; hyperItem();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 169;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 171; hyperItemAtom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HyperItemAtomContext : ParserRuleContext {
		public CoefContext coef() {
			return GetRuleContext<CoefContext>(0);
		}
		public GroupedQueryContext groupedQuery() {
			return GetRuleContext<GroupedQueryContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public HyperItemAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hyperItemAtom; } }
	}

	[RuleVersion(0)]
	public HyperItemAtomContext hyperItemAtom() {
		HyperItemAtomContext _localctx = new HyperItemAtomContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_hyperItemAtom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174; name();
			State = 175; groupedQuery();
			State = 177;
			_la = _input.La(1);
			if (_la==Intersect) {
				{
				State = 176; coef();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public ITerminalNode DollarQuotedString() { return GetToken(ConsoleParser.DollarQuotedString, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179; Match(DollarQuotedString);
			State = 180; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CoefContext : ParserRuleContext {
		public ITerminalNode Percent() { return GetToken(ConsoleParser.Percent, 0); }
		public ITerminalNode Float() { return GetToken(ConsoleParser.Float, 0); }
		public CoefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coef; } }
	}

	[RuleVersion(0)]
	public CoefContext coef() {
		CoefContext _localctx = new CoefContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_coef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182; Match(Intersect);
			State = 183;
			_la = _input.La(1);
			if ( !(_la==Float || _la==Percent) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtotalContext : ParserRuleContext {
		public IToken SubtotalMark;
		public IToken SubtotalFields;
		public IToken Aggregation;
		public IToken Ranged;
		public RangeCoreContext rangeCore() {
			return GetRuleContext<RangeCoreContext>(0);
		}
		public SubtotalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtotal; } }
	}

	[RuleVersion(0)]
	public SubtotalContext subtotal() {
		SubtotalContext _localctx = new SubtotalContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_subtotal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			_localctx.SubtotalMark = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==T__11 || _la==T__12) ) {
				_localctx.SubtotalMark = _errHandler.RecoverInline(this);
			}
			Consume();
			State = 189;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22))) != 0)) {
				{
				{
				State = 186;
				_localctx.SubtotalFields = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22))) != 0)) ) {
					_localctx.SubtotalFields = _errHandler.RecoverInline(this);
				}
				Consume();
				}
				}
				State = 191;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 200;
			_la = _input.La(1);
			if (_la==T__23) {
				{
				State = 192; _localctx.Aggregation = Match(T__23);
				State = 198;
				_la = _input.La(1);
				if (_la==T__24) {
					{
					State = 193; _localctx.Ranged = Match(T__24);
					State = 195;
					_la = _input.La(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (T__33 - 34)) | (1L << (T__34 - 34)) | (1L << (T__35 - 34)) | (1L << (RangeNull - 34)) | (1L << (RangeAllNotNull - 34)) | (1L << (RangeAYear - 34)) | (1L << (RangeAMonth - 34)) | (1L << (RangeDeltaMonth - 34)) | (1L << (RangeADay - 34)) | (1L << (RangeDeltaDay - 34)) | (1L << (RangeDeltaWeek - 34)) | (1L << (Substract - 34)))) != 0)) {
						{
						State = 194; rangeCore();
						}
					}

					State = 197; Match(T__25);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoucherDetailQueryContext : ParserRuleContext {
		public VoucherQueryContext voucherQuery() {
			return GetRuleContext<VoucherQueryContext>(0);
		}
		public EmitContext emit() {
			return GetRuleContext<EmitContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public VoucherDetailQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voucherDetailQuery; } }
	}

	[RuleVersion(0)]
	public VoucherDetailQueryContext voucherDetailQuery() {
		VoucherDetailQueryContext _localctx = new VoucherDetailQueryContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_voucherDetailQuery);
		try {
			State = 206;
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 202; vouchers();
				State = 203; emit();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 205; voucherQuery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmitContext : ParserRuleContext {
		public IToken Op;
		public DetailsContext details() {
			return GetRuleContext<DetailsContext>(0);
		}
		public EmitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emit; } }
	}

	[RuleVersion(0)]
	public EmitContext emit() {
		EmitContext _localctx = new EmitContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_emit);
		try {
			State = 211;
			switch (_input.La(1)) {
			case T__26:
				EnterOuterAlt(_localctx, 1);
				{
				State = 208; _localctx.Op = Match(T__26);
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 209; Match(T__4);
				State = 210; details(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VouchersContext : ParserRuleContext {
		public VoucherQueryContext voucherQuery() {
			return GetRuleContext<VoucherQueryContext>(0);
		}
		public VouchersBContext vouchersB() {
			return GetRuleContext<VouchersBContext>(0);
		}
		public VouchersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vouchers; } }
	}

	[RuleVersion(0)]
	public VouchersContext vouchers() {
		VouchersContext _localctx = new VouchersContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_vouchers);
		try {
			State = 215;
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 213; vouchersB(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 214; voucherQuery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VouchersBContext : ParserRuleContext {
		public IToken Op;
		public VouchersBContext vouchersB(int i) {
			return GetRuleContext<VouchersBContext>(i);
		}
		public VoucherQueryContext voucherQuery() {
			return GetRuleContext<VoucherQueryContext>(0);
		}
		public IReadOnlyList<VouchersBContext> vouchersB() {
			return GetRuleContexts<VouchersBContext>();
		}
		public VouchersBContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vouchersB; } }
	}

	[RuleVersion(0)]
	public VouchersBContext vouchersB() {
		return vouchersB(0);
	}

	private VouchersBContext vouchersB(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		VouchersBContext _localctx = new VouchersBContext(_ctx, _parentState);
		VouchersBContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_vouchersB, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				{
				State = 218;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==Union || _la==Substract) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 219; vouchersB(3);
				}
				break;

			case 2:
				{
				State = 220; Match(T__27);
				State = 221; voucherQuery();
				State = 222; Match(T__28);
				}
				break;

			case 3:
				{
				State = 224; Match(T__27);
				State = 225; vouchersB(0);
				State = 226; Match(T__28);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 238;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 236;
					switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
					case 1:
						{
						_localctx = new VouchersBContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_vouchersB);
						State = 230;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 231; _localctx.Op = Match(Intersect);
						State = 232; vouchersB(6);
						}
						break;

					case 2:
						{
						_localctx = new VouchersBContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_vouchersB);
						State = 233;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 234;
						_localctx.Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==Union || _la==Substract) ) {
							_localctx.Op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 235; vouchersB(5);
						}
						break;
					}
					} 
				}
				State = 240;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VoucherQueryContext : ParserRuleContext {
		public IToken Op;
		public ITerminalNode DollarQuotedString() { return GetToken(ConsoleParser.DollarQuotedString, 0); }
		public ITerminalNode PercentQuotedString() { return GetToken(ConsoleParser.PercentQuotedString, 0); }
		public DetailsContext details() {
			return GetRuleContext<DetailsContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode VoucherType() { return GetToken(ConsoleParser.VoucherType, 0); }
		public VoucherQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voucherQuery; } }
	}

	[RuleVersion(0)]
	public VoucherQueryContext voucherQuery() {
		VoucherQueryContext _localctx = new VoucherQueryContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_voucherQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
			case 1:
				{
				State = 241; details(0);
				}
				break;
			}
			State = 245;
			switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
			case 1:
				{
				State = 244;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__26 || _la==T__29) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 248;
			_la = _input.La(1);
			if (((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & ((1L << (T__24 - 25)) | (1L << (T__32 - 25)) | (1L << (T__33 - 25)) | (1L << (T__34 - 25)) | (1L << (T__35 - 25)) | (1L << (RangeNull - 25)) | (1L << (RangeAllNotNull - 25)) | (1L << (RangeAYear - 25)) | (1L << (RangeAMonth - 25)) | (1L << (RangeDeltaMonth - 25)) | (1L << (RangeADay - 25)) | (1L << (RangeDeltaDay - 25)) | (1L << (RangeDeltaWeek - 25)) | (1L << (Substract - 25)))) != 0)) {
				{
				State = 247; range();
				}
			}

			State = 251;
			_la = _input.La(1);
			if (_la==DollarQuotedString) {
				{
				State = 250; Match(DollarQuotedString);
				}
			}

			State = 254;
			_la = _input.La(1);
			if (_la==PercentQuotedString) {
				{
				State = 253; Match(PercentQuotedString);
				}
			}

			State = 257;
			_la = _input.La(1);
			if (_la==VoucherType) {
				{
				State = 256; Match(VoucherType);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DetailsContext : ParserRuleContext {
		public IToken Op;
		public DetailsContext details(int i) {
			return GetRuleContext<DetailsContext>(i);
		}
		public IReadOnlyList<DetailsContext> details() {
			return GetRuleContexts<DetailsContext>();
		}
		public DetailQueryContext detailQuery() {
			return GetRuleContext<DetailQueryContext>(0);
		}
		public DetailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_details; } }
	}

	[RuleVersion(0)]
	public DetailsContext details() {
		return details(0);
	}

	private DetailsContext details(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		DetailsContext _localctx = new DetailsContext(_ctx, _parentState);
		DetailsContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_details, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
			case 1:
				{
				State = 260;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==Union || _la==Substract) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 261; details(3);
				}
				break;

			case 2:
				{
				State = 262; detailQuery();
				}
				break;

			case 3:
				{
				State = 263; Match(T__30);
				State = 264; details(0);
				State = 265; Match(T__31);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 277;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,30,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 275;
					switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
					case 1:
						{
						_localctx = new DetailsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_details);
						State = 269;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 270; _localctx.Op = Match(Intersect);
						State = 271; details(6);
						}
						break;

					case 2:
						{
						_localctx = new DetailsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_details);
						State = 272;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 273;
						_localctx.Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==Union || _la==Substract) ) {
							_localctx.Op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 274; details(5);
						}
						break;
					}
					} 
				}
				State = 279;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,30,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DetailQueryContext : ParserRuleContext {
		public IToken Direction;
		public ITerminalNode DetailTitleSubTitle() { return GetToken(ConsoleParser.DetailTitleSubTitle, 0); }
		public ITerminalNode DoubleQuotedString() { return GetToken(ConsoleParser.DoubleQuotedString, 0); }
		public ITerminalNode SingleQuotedString() { return GetToken(ConsoleParser.SingleQuotedString, 0); }
		public ITerminalNode DetailTitle() { return GetToken(ConsoleParser.DetailTitle, 0); }
		public DetailQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_detailQuery; } }
	}

	[RuleVersion(0)]
	public DetailQueryContext detailQuery() {
		DetailQueryContext _localctx = new DetailQueryContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_detailQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
			case 1:
				{
				State = 280;
				_la = _input.La(1);
				if ( !(_la==DetailTitle || _la==DetailTitleSubTitle) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 284;
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				State = 283; Match(SingleQuotedString);
				}
				break;
			}
			State = 287;
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				{
				State = 286; Match(DoubleQuotedString);
				}
				break;
			}
			State = 290;
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				{
				State = 289;
				_localctx.Direction = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__15 || _la==T__17) ) {
					_localctx.Direction = _errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public RangeCoreContext Core;
		public RangeCoreContext rangeCore() {
			return GetRuleContext<RangeCoreContext>(0);
		}
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_range);
		try {
			State = 298;
			switch (_input.La(1)) {
			case T__32:
				EnterOuterAlt(_localctx, 1);
				{
				State = 292; Match(T__32);
				}
				break;
			case T__33:
			case T__34:
			case T__35:
			case RangeNull:
			case RangeAllNotNull:
			case RangeAYear:
			case RangeAMonth:
			case RangeDeltaMonth:
			case RangeADay:
			case RangeDeltaDay:
			case RangeDeltaWeek:
			case Substract:
				EnterOuterAlt(_localctx, 2);
				{
				State = 293; _localctx.Core = rangeCore();
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 3);
				{
				State = 294; Match(T__24);
				State = 295; _localctx.Core = rangeCore();
				State = 296; Match(T__25);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeCoreContext : ParserRuleContext {
		public RangeCertainPointContext Begin;
		public RangeCertainPointContext End;
		public IToken Op;
		public RangeCertainPointContext Certain;
		public ITerminalNode RangeNull() { return GetToken(ConsoleParser.RangeNull, 0); }
		public RangeCertainPointContext rangeCertainPoint(int i) {
			return GetRuleContext<RangeCertainPointContext>(i);
		}
		public ITerminalNode RangeAllNotNull() { return GetToken(ConsoleParser.RangeAllNotNull, 0); }
		public IReadOnlyList<RangeCertainPointContext> rangeCertainPoint() {
			return GetRuleContexts<RangeCertainPointContext>();
		}
		public RangeCoreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeCore; } }
	}

	[RuleVersion(0)]
	public RangeCoreContext rangeCore() {
		RangeCoreContext _localctx = new RangeCoreContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_rangeCore);
		int _la;
		try {
			State = 310;
			switch ( Interpreter.AdaptivePredict(_input,37,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 300; Match(RangeNull);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 301; Match(RangeAllNotNull);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 302; _localctx.Begin = rangeCertainPoint();
				State = 303;
				_la = _input.La(1);
				if ( !(_la==T__33 || _la==Substract) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 305;
				_la = _input.La(1);
				if (((((_la - 35)) & ~0x3f) == 0 && ((1L << (_la - 35)) & ((1L << (T__34 - 35)) | (1L << (T__35 - 35)) | (1L << (RangeAYear - 35)) | (1L << (RangeAMonth - 35)) | (1L << (RangeDeltaMonth - 35)) | (1L << (RangeADay - 35)) | (1L << (RangeDeltaDay - 35)) | (1L << (RangeDeltaWeek - 35)))) != 0)) {
					{
					State = 304; _localctx.End = rangeCertainPoint();
					}
				}

				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 307;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__33 || _la==Substract) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 308; _localctx.End = rangeCertainPoint();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 309; _localctx.Certain = rangeCertainPoint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangePointContext : ParserRuleContext {
		public IToken All;
		public ITerminalNode RangeNull() { return GetToken(ConsoleParser.RangeNull, 0); }
		public RangeCertainPointContext rangeCertainPoint() {
			return GetRuleContext<RangeCertainPointContext>(0);
		}
		public RangePointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangePoint; } }
	}

	[RuleVersion(0)]
	public RangePointContext rangePoint() {
		RangePointContext _localctx = new RangePointContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_rangePoint);
		try {
			State = 315;
			switch (_input.La(1)) {
			case RangeNull:
				EnterOuterAlt(_localctx, 1);
				{
				State = 312; Match(RangeNull);
				}
				break;
			case T__32:
				EnterOuterAlt(_localctx, 2);
				{
				State = 313; _localctx.All = Match(T__32);
				}
				break;
			case T__34:
			case T__35:
			case RangeAYear:
			case RangeAMonth:
			case RangeDeltaMonth:
			case RangeADay:
			case RangeDeltaDay:
			case RangeDeltaWeek:
				EnterOuterAlt(_localctx, 3);
				{
				State = 314; rangeCertainPoint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeCertainPointContext : ParserRuleContext {
		public RangeWeekContext rangeWeek() {
			return GetRuleContext<RangeWeekContext>(0);
		}
		public RangeYearContext rangeYear() {
			return GetRuleContext<RangeYearContext>(0);
		}
		public RangeMonthContext rangeMonth() {
			return GetRuleContext<RangeMonthContext>(0);
		}
		public RangeDayContext rangeDay() {
			return GetRuleContext<RangeDayContext>(0);
		}
		public RangeCertainPointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeCertainPoint; } }
	}

	[RuleVersion(0)]
	public RangeCertainPointContext rangeCertainPoint() {
		RangeCertainPointContext _localctx = new RangeCertainPointContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_rangeCertainPoint);
		try {
			State = 321;
			switch (_input.La(1)) {
			case RangeAYear:
				EnterOuterAlt(_localctx, 1);
				{
				State = 317; rangeYear();
				}
				break;
			case T__34:
			case T__35:
			case RangeAMonth:
			case RangeDeltaMonth:
				EnterOuterAlt(_localctx, 2);
				{
				State = 318; rangeMonth();
				}
				break;
			case RangeDeltaWeek:
				EnterOuterAlt(_localctx, 3);
				{
				State = 319; rangeWeek();
				}
				break;
			case RangeADay:
			case RangeDeltaDay:
				EnterOuterAlt(_localctx, 4);
				{
				State = 320; rangeDay();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeYearContext : ParserRuleContext {
		public ITerminalNode RangeAYear() { return GetToken(ConsoleParser.RangeAYear, 0); }
		public RangeYearContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeYear; } }
	}

	[RuleVersion(0)]
	public RangeYearContext rangeYear() {
		RangeYearContext _localctx = new RangeYearContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_rangeYear);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323; Match(RangeAYear);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeMonthContext : ParserRuleContext {
		public IToken Modifier;
		public ITerminalNode RangeDeltaMonth() { return GetToken(ConsoleParser.RangeDeltaMonth, 0); }
		public ITerminalNode RangeAMonth() { return GetToken(ConsoleParser.RangeAMonth, 0); }
		public RangeMonthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeMonth; } }
	}

	[RuleVersion(0)]
	public RangeMonthContext rangeMonth() {
		RangeMonthContext _localctx = new RangeMonthContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_rangeMonth);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			_la = _input.La(1);
			if (_la==T__34 || _la==T__35) {
				{
				State = 325;
				_localctx.Modifier = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__34 || _la==T__35) ) {
					_localctx.Modifier = _errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			State = 328;
			_la = _input.La(1);
			if ( !(_la==RangeAMonth || _la==RangeDeltaMonth) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeWeekContext : ParserRuleContext {
		public ITerminalNode RangeDeltaWeek() { return GetToken(ConsoleParser.RangeDeltaWeek, 0); }
		public RangeWeekContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeWeek; } }
	}

	[RuleVersion(0)]
	public RangeWeekContext rangeWeek() {
		RangeWeekContext _localctx = new RangeWeekContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_rangeWeek);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330; Match(RangeDeltaWeek);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeDayContext : ParserRuleContext {
		public ITerminalNode RangeADay() { return GetToken(ConsoleParser.RangeADay, 0); }
		public ITerminalNode RangeDeltaDay() { return GetToken(ConsoleParser.RangeDeltaDay, 0); }
		public RangeDayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeDay; } }
	}

	[RuleVersion(0)]
	public RangeDayContext rangeDay() {
		RangeDayContext _localctx = new RangeDayContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_rangeDay);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			_la = _input.La(1);
			if ( !(_la==RangeADay || _la==RangeDeltaDay) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetContext : ParserRuleContext {
		public AssetRegisterContext assetRegister() {
			return GetRuleContext<AssetRegisterContext>(0);
		}
		public AssetUnregisterContext assetUnregister() {
			return GetRuleContext<AssetUnregisterContext>(0);
		}
		public AssetResetHardContext assetResetHard() {
			return GetRuleContext<AssetResetHardContext>(0);
		}
		public AssetResetSoftContext assetResetSoft() {
			return GetRuleContext<AssetResetSoftContext>(0);
		}
		public AssetApplyContext assetApply() {
			return GetRuleContext<AssetApplyContext>(0);
		}
		public AssetListContext assetList() {
			return GetRuleContext<AssetListContext>(0);
		}
		public AssetQueryContext assetQuery() {
			return GetRuleContext<AssetQueryContext>(0);
		}
		public AssetCheckContext assetCheck() {
			return GetRuleContext<AssetCheckContext>(0);
		}
		public AssetRedepContext assetRedep() {
			return GetRuleContext<AssetRedepContext>(0);
		}
		public AssetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asset; } }
	}

	[RuleVersion(0)]
	public AssetContext asset() {
		AssetContext _localctx = new AssetContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_asset);
		try {
			State = 343;
			switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 334; assetList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 335; assetQuery();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 336; assetRegister();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 337; assetUnregister();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 338; assetRedep();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 339; assetResetSoft();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 340; assetResetHard();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 341; assetApply();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 342; assetCheck();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetListContext : ParserRuleContext {
		public ITerminalNode AOList() { return GetToken(ConsoleParser.AOList, 0); }
		public ITerminalNode AOAll() { return GetToken(ConsoleParser.AOAll, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangePointContext rangePoint() {
			return GetRuleContext<RangePointContext>(0);
		}
		public AssetListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetList; } }
	}

	[RuleVersion(0)]
	public AssetListContext assetList() {
		AssetListContext _localctx = new AssetListContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_assetList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345; Match(T__36);
			State = 347;
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				{
				State = 346;
				_la = _input.La(1);
				if ( !(_la==AOAll || _la==AOList) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 350;
			switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
			case 1:
				{
				State = 349; rangePoint();
				}
				break;
			}
			State = 353;
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				{
				State = 352; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetQueryContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOQuery() { return GetToken(ConsoleParser.AOQuery, 0); }
		public AssetQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetQuery; } }
	}

	[RuleVersion(0)]
	public AssetQueryContext assetQuery() {
		AssetQueryContext _localctx = new AssetQueryContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_assetQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355; Match(T__36);
			State = 356; Match(AOQuery);
			State = 358;
			switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
			case 1:
				{
				State = 357; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetRegisterContext : ParserRuleContext {
		public ITerminalNode AORegister() { return GetToken(ConsoleParser.AORegister, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AssetRegisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetRegister; } }
	}

	[RuleVersion(0)]
	public AssetRegisterContext assetRegister() {
		AssetRegisterContext _localctx = new AssetRegisterContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_assetRegister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360; Match(T__36);
			State = 361; Match(AORegister);
			State = 363;
			switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
			case 1:
				{
				State = 362; distributedQ(0);
				}
				break;
			}
			State = 366;
			_la = _input.La(1);
			if (((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & ((1L << (T__24 - 25)) | (1L << (T__32 - 25)) | (1L << (T__33 - 25)) | (1L << (T__34 - 25)) | (1L << (T__35 - 25)) | (1L << (RangeNull - 25)) | (1L << (RangeAllNotNull - 25)) | (1L << (RangeAYear - 25)) | (1L << (RangeAMonth - 25)) | (1L << (RangeDeltaMonth - 25)) | (1L << (RangeADay - 25)) | (1L << (RangeDeltaDay - 25)) | (1L << (RangeDeltaWeek - 25)) | (1L << (Substract - 25)))) != 0)) {
				{
				State = 365; range();
				}
			}

			State = 370;
			_la = _input.La(1);
			if (_la==T__4) {
				{
				State = 368; Match(T__4);
				State = 369; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetUnregisterContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode AOUnregister() { return GetToken(ConsoleParser.AOUnregister, 0); }
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AssetUnregisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetUnregister; } }
	}

	[RuleVersion(0)]
	public AssetUnregisterContext assetUnregister() {
		AssetUnregisterContext _localctx = new AssetUnregisterContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_assetUnregister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372; Match(T__36);
			State = 373; Match(AOUnregister);
			State = 375;
			switch ( Interpreter.AdaptivePredict(_input,49,_ctx) ) {
			case 1:
				{
				State = 374; distributedQ(0);
				}
				break;
			}
			State = 378;
			_la = _input.La(1);
			if (((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & ((1L << (T__24 - 25)) | (1L << (T__32 - 25)) | (1L << (T__33 - 25)) | (1L << (T__34 - 25)) | (1L << (T__35 - 25)) | (1L << (RangeNull - 25)) | (1L << (RangeAllNotNull - 25)) | (1L << (RangeAYear - 25)) | (1L << (RangeAMonth - 25)) | (1L << (RangeDeltaMonth - 25)) | (1L << (RangeADay - 25)) | (1L << (RangeDeltaDay - 25)) | (1L << (RangeDeltaWeek - 25)) | (1L << (Substract - 25)))) != 0)) {
				{
				State = 377; range();
				}
			}

			State = 382;
			_la = _input.La(1);
			if (_la==T__4) {
				{
				State = 380; Match(T__4);
				State = 381; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetRedepContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode ARedep() { return GetToken(ConsoleParser.ARedep, 0); }
		public AssetRedepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetRedep; } }
	}

	[RuleVersion(0)]
	public AssetRedepContext assetRedep() {
		AssetRedepContext _localctx = new AssetRedepContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_assetRedep);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384; Match(T__36);
			State = 385; Match(ARedep);
			State = 387;
			switch ( Interpreter.AdaptivePredict(_input,52,_ctx) ) {
			case 1:
				{
				State = 386; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetResetSoftContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOResetSoft() { return GetToken(ConsoleParser.AOResetSoft, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AssetResetSoftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetResetSoft; } }
	}

	[RuleVersion(0)]
	public AssetResetSoftContext assetResetSoft() {
		AssetResetSoftContext _localctx = new AssetResetSoftContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_assetResetSoft);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389; Match(T__36);
			State = 390; Match(AOResetSoft);
			State = 392;
			switch ( Interpreter.AdaptivePredict(_input,53,_ctx) ) {
			case 1:
				{
				State = 391; distributedQ(0);
				}
				break;
			}
			State = 395;
			_la = _input.La(1);
			if (((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & ((1L << (T__24 - 25)) | (1L << (T__32 - 25)) | (1L << (T__33 - 25)) | (1L << (T__34 - 25)) | (1L << (T__35 - 25)) | (1L << (RangeNull - 25)) | (1L << (RangeAllNotNull - 25)) | (1L << (RangeAYear - 25)) | (1L << (RangeAMonth - 25)) | (1L << (RangeDeltaMonth - 25)) | (1L << (RangeADay - 25)) | (1L << (RangeDeltaDay - 25)) | (1L << (RangeDeltaWeek - 25)) | (1L << (Substract - 25)))) != 0)) {
				{
				State = 394; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetResetHardContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOResetHard() { return GetToken(ConsoleParser.AOResetHard, 0); }
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AssetResetHardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetResetHard; } }
	}

	[RuleVersion(0)]
	public AssetResetHardContext assetResetHard() {
		AssetResetHardContext _localctx = new AssetResetHardContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_assetResetHard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397; Match(T__36);
			State = 398; Match(AOResetHard);
			State = 400;
			switch ( Interpreter.AdaptivePredict(_input,55,_ctx) ) {
			case 1:
				{
				State = 399; distributedQ(0);
				}
				break;
			}
			State = 404;
			_la = _input.La(1);
			if (_la==T__4) {
				{
				State = 402; Match(T__4);
				State = 403; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetApplyContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOCollapse() { return GetToken(ConsoleParser.AOCollapse, 0); }
		public ITerminalNode AOApply() { return GetToken(ConsoleParser.AOApply, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AssetApplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetApply; } }
	}

	[RuleVersion(0)]
	public AssetApplyContext assetApply() {
		AssetApplyContext _localctx = new AssetApplyContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_assetApply);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406; Match(T__36);
			State = 407; Match(AOApply);
			State = 409;
			switch ( Interpreter.AdaptivePredict(_input,57,_ctx) ) {
			case 1:
				{
				State = 408; Match(AOCollapse);
				}
				break;
			}
			State = 412;
			switch ( Interpreter.AdaptivePredict(_input,58,_ctx) ) {
			case 1:
				{
				State = 411; distributedQ(0);
				}
				break;
			}
			State = 415;
			_la = _input.La(1);
			if (((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & ((1L << (T__24 - 25)) | (1L << (T__32 - 25)) | (1L << (T__33 - 25)) | (1L << (T__34 - 25)) | (1L << (T__35 - 25)) | (1L << (RangeNull - 25)) | (1L << (RangeAllNotNull - 25)) | (1L << (RangeAYear - 25)) | (1L << (RangeAMonth - 25)) | (1L << (RangeDeltaMonth - 25)) | (1L << (RangeADay - 25)) | (1L << (RangeDeltaDay - 25)) | (1L << (RangeDeltaWeek - 25)) | (1L << (Substract - 25)))) != 0)) {
				{
				State = 414; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetCheckContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOCheck() { return GetToken(ConsoleParser.AOCheck, 0); }
		public AssetCheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetCheck; } }
	}

	[RuleVersion(0)]
	public AssetCheckContext assetCheck() {
		AssetCheckContext _localctx = new AssetCheckContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_assetCheck);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417; Match(T__36);
			State = 418; Match(AOCheck);
			State = 420;
			switch ( Interpreter.AdaptivePredict(_input,60,_ctx) ) {
			case 1:
				{
				State = 419; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortContext : ParserRuleContext {
		public AmortReamoContext amortReamo() {
			return GetRuleContext<AmortReamoContext>(0);
		}
		public AmortQueryContext amortQuery() {
			return GetRuleContext<AmortQueryContext>(0);
		}
		public AmortCheckContext amortCheck() {
			return GetRuleContext<AmortCheckContext>(0);
		}
		public AmortResetSoftContext amortResetSoft() {
			return GetRuleContext<AmortResetSoftContext>(0);
		}
		public AmortRegisterContext amortRegister() {
			return GetRuleContext<AmortRegisterContext>(0);
		}
		public AmortUnregisterContext amortUnregister() {
			return GetRuleContext<AmortUnregisterContext>(0);
		}
		public AmortApplyContext amortApply() {
			return GetRuleContext<AmortApplyContext>(0);
		}
		public AmortListContext amortList() {
			return GetRuleContext<AmortListContext>(0);
		}
		public AmortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amort; } }
	}

	[RuleVersion(0)]
	public AmortContext amort() {
		AmortContext _localctx = new AmortContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_amort);
		try {
			State = 430;
			switch ( Interpreter.AdaptivePredict(_input,61,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 422; amortList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 423; amortQuery();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 424; amortRegister();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 425; amortUnregister();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 426; amortReamo();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 427; amortResetSoft();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 428; amortApply();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 429; amortCheck();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortListContext : ParserRuleContext {
		public ITerminalNode AOList() { return GetToken(ConsoleParser.AOList, 0); }
		public ITerminalNode AOAll() { return GetToken(ConsoleParser.AOAll, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangePointContext rangePoint() {
			return GetRuleContext<RangePointContext>(0);
		}
		public AmortListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortList; } }
	}

	[RuleVersion(0)]
	public AmortListContext amortList() {
		AmortListContext _localctx = new AmortListContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_amortList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 432; Match(T__37);
			State = 434;
			switch ( Interpreter.AdaptivePredict(_input,62,_ctx) ) {
			case 1:
				{
				State = 433;
				_la = _input.La(1);
				if ( !(_la==AOAll || _la==AOList) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 437;
			switch ( Interpreter.AdaptivePredict(_input,63,_ctx) ) {
			case 1:
				{
				State = 436; rangePoint();
				}
				break;
			}
			State = 440;
			switch ( Interpreter.AdaptivePredict(_input,64,_ctx) ) {
			case 1:
				{
				State = 439; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortQueryContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOQuery() { return GetToken(ConsoleParser.AOQuery, 0); }
		public AmortQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortQuery; } }
	}

	[RuleVersion(0)]
	public AmortQueryContext amortQuery() {
		AmortQueryContext _localctx = new AmortQueryContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_amortQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442; Match(T__37);
			State = 443; Match(AOQuery);
			State = 445;
			switch ( Interpreter.AdaptivePredict(_input,65,_ctx) ) {
			case 1:
				{
				State = 444; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortRegisterContext : ParserRuleContext {
		public ITerminalNode AORegister() { return GetToken(ConsoleParser.AORegister, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AmortRegisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortRegister; } }
	}

	[RuleVersion(0)]
	public AmortRegisterContext amortRegister() {
		AmortRegisterContext _localctx = new AmortRegisterContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_amortRegister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447; Match(T__37);
			State = 448; Match(AORegister);
			State = 450;
			switch ( Interpreter.AdaptivePredict(_input,66,_ctx) ) {
			case 1:
				{
				State = 449; distributedQ(0);
				}
				break;
			}
			State = 453;
			_la = _input.La(1);
			if (((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & ((1L << (T__24 - 25)) | (1L << (T__32 - 25)) | (1L << (T__33 - 25)) | (1L << (T__34 - 25)) | (1L << (T__35 - 25)) | (1L << (RangeNull - 25)) | (1L << (RangeAllNotNull - 25)) | (1L << (RangeAYear - 25)) | (1L << (RangeAMonth - 25)) | (1L << (RangeDeltaMonth - 25)) | (1L << (RangeADay - 25)) | (1L << (RangeDeltaDay - 25)) | (1L << (RangeDeltaWeek - 25)) | (1L << (Substract - 25)))) != 0)) {
				{
				State = 452; range();
				}
			}

			State = 457;
			_la = _input.La(1);
			if (_la==T__4) {
				{
				State = 455; Match(T__4);
				State = 456; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortUnregisterContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode AOUnregister() { return GetToken(ConsoleParser.AOUnregister, 0); }
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AmortUnregisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortUnregister; } }
	}

	[RuleVersion(0)]
	public AmortUnregisterContext amortUnregister() {
		AmortUnregisterContext _localctx = new AmortUnregisterContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_amortUnregister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459; Match(T__37);
			State = 460; Match(AOUnregister);
			State = 462;
			switch ( Interpreter.AdaptivePredict(_input,69,_ctx) ) {
			case 1:
				{
				State = 461; distributedQ(0);
				}
				break;
			}
			State = 465;
			_la = _input.La(1);
			if (((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & ((1L << (T__24 - 25)) | (1L << (T__32 - 25)) | (1L << (T__33 - 25)) | (1L << (T__34 - 25)) | (1L << (T__35 - 25)) | (1L << (RangeNull - 25)) | (1L << (RangeAllNotNull - 25)) | (1L << (RangeAYear - 25)) | (1L << (RangeAMonth - 25)) | (1L << (RangeDeltaMonth - 25)) | (1L << (RangeADay - 25)) | (1L << (RangeDeltaDay - 25)) | (1L << (RangeDeltaWeek - 25)) | (1L << (Substract - 25)))) != 0)) {
				{
				State = 464; range();
				}
			}

			State = 469;
			_la = _input.La(1);
			if (_la==T__4) {
				{
				State = 467; Match(T__4);
				State = 468; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortReamoContext : ParserRuleContext {
		public ITerminalNode OReamo() { return GetToken(ConsoleParser.OReamo, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public AmortReamoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortReamo; } }
	}

	[RuleVersion(0)]
	public AmortReamoContext amortReamo() {
		AmortReamoContext _localctx = new AmortReamoContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_amortReamo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471; Match(T__37);
			State = 472; Match(OReamo);
			State = 474;
			switch ( Interpreter.AdaptivePredict(_input,72,_ctx) ) {
			case 1:
				{
				State = 473; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortResetSoftContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOResetSoft() { return GetToken(ConsoleParser.AOResetSoft, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AmortResetSoftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortResetSoft; } }
	}

	[RuleVersion(0)]
	public AmortResetSoftContext amortResetSoft() {
		AmortResetSoftContext _localctx = new AmortResetSoftContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_amortResetSoft);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 476; Match(T__37);
			State = 477; Match(AOResetSoft);
			State = 479;
			switch ( Interpreter.AdaptivePredict(_input,73,_ctx) ) {
			case 1:
				{
				State = 478; distributedQ(0);
				}
				break;
			}
			State = 482;
			_la = _input.La(1);
			if (((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & ((1L << (T__24 - 25)) | (1L << (T__32 - 25)) | (1L << (T__33 - 25)) | (1L << (T__34 - 25)) | (1L << (T__35 - 25)) | (1L << (RangeNull - 25)) | (1L << (RangeAllNotNull - 25)) | (1L << (RangeAYear - 25)) | (1L << (RangeAMonth - 25)) | (1L << (RangeDeltaMonth - 25)) | (1L << (RangeADay - 25)) | (1L << (RangeDeltaDay - 25)) | (1L << (RangeDeltaWeek - 25)) | (1L << (Substract - 25)))) != 0)) {
				{
				State = 481; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortApplyContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOCollapse() { return GetToken(ConsoleParser.AOCollapse, 0); }
		public ITerminalNode AOApply() { return GetToken(ConsoleParser.AOApply, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AmortApplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortApply; } }
	}

	[RuleVersion(0)]
	public AmortApplyContext amortApply() {
		AmortApplyContext _localctx = new AmortApplyContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_amortApply);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 484; Match(T__37);
			State = 485; Match(AOApply);
			State = 487;
			switch ( Interpreter.AdaptivePredict(_input,75,_ctx) ) {
			case 1:
				{
				State = 486; Match(AOCollapse);
				}
				break;
			}
			State = 490;
			switch ( Interpreter.AdaptivePredict(_input,76,_ctx) ) {
			case 1:
				{
				State = 489; distributedQ(0);
				}
				break;
			}
			State = 493;
			_la = _input.La(1);
			if (((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & ((1L << (T__24 - 25)) | (1L << (T__32 - 25)) | (1L << (T__33 - 25)) | (1L << (T__34 - 25)) | (1L << (T__35 - 25)) | (1L << (RangeNull - 25)) | (1L << (RangeAllNotNull - 25)) | (1L << (RangeAYear - 25)) | (1L << (RangeAMonth - 25)) | (1L << (RangeDeltaMonth - 25)) | (1L << (RangeADay - 25)) | (1L << (RangeDeltaDay - 25)) | (1L << (RangeDeltaWeek - 25)) | (1L << (Substract - 25)))) != 0)) {
				{
				State = 492; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortCheckContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOCheck() { return GetToken(ConsoleParser.AOCheck, 0); }
		public AmortCheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortCheck; } }
	}

	[RuleVersion(0)]
	public AmortCheckContext amortCheck() {
		AmortCheckContext _localctx = new AmortCheckContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_amortCheck);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495; Match(T__37);
			State = 496; Match(AOCheck);
			State = 498;
			switch ( Interpreter.AdaptivePredict(_input,78,_ctx) ) {
			case 1:
				{
				State = 497; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DistributedQContext : ParserRuleContext {
		public IToken Op;
		public DistributedQAtomContext distributedQAtom() {
			return GetRuleContext<DistributedQAtomContext>(0);
		}
		public DistributedQContext distributedQ(int i) {
			return GetRuleContext<DistributedQContext>(i);
		}
		public IReadOnlyList<DistributedQContext> distributedQ() {
			return GetRuleContexts<DistributedQContext>();
		}
		public DistributedQContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distributedQ; } }
	}

	[RuleVersion(0)]
	public DistributedQContext distributedQ() {
		return distributedQ(0);
	}

	private DistributedQContext distributedQ(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		DistributedQContext _localctx = new DistributedQContext(_ctx, _parentState);
		DistributedQContext _prevctx = _localctx;
		int _startState = 90;
		EnterRecursionRule(_localctx, 90, RULE_distributedQ, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 508;
			switch ( Interpreter.AdaptivePredict(_input,79,_ctx) ) {
			case 1:
				{
				State = 501;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==Union || _la==Substract) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 502; distributedQ(3);
				}
				break;

			case 2:
				{
				State = 503; distributedQAtom();
				}
				break;

			case 3:
				{
				State = 504; Match(T__30);
				State = 505; distributedQ(0);
				State = 506; Match(T__31);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 518;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,81,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 516;
					switch ( Interpreter.AdaptivePredict(_input,80,_ctx) ) {
					case 1:
						{
						_localctx = new DistributedQContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_distributedQ);
						State = 510;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 511; _localctx.Op = Match(Intersect);
						State = 512; distributedQ(6);
						}
						break;

					case 2:
						{
						_localctx = new DistributedQContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_distributedQ);
						State = 513;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 514;
						_localctx.Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==Union || _la==Substract) ) {
							_localctx.Op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 515; distributedQ(5);
						}
						break;
					}
					} 
				}
				State = 520;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,81,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DistributedQAtomContext : ParserRuleContext {
		public ITerminalNode DollarQuotedString() { return GetToken(ConsoleParser.DollarQuotedString, 0); }
		public ITerminalNode PercentQuotedString() { return GetToken(ConsoleParser.PercentQuotedString, 0); }
		public ITerminalNode Guid() { return GetToken(ConsoleParser.Guid, 0); }
		public RangeCoreContext rangeCore() {
			return GetRuleContext<RangeCoreContext>(0);
		}
		public DistributedQAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distributedQAtom; } }
	}

	[RuleVersion(0)]
	public DistributedQAtomContext distributedQAtom() {
		DistributedQAtomContext _localctx = new DistributedQAtomContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_distributedQAtom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 522;
			switch ( Interpreter.AdaptivePredict(_input,82,_ctx) ) {
			case 1:
				{
				State = 521; Match(Guid);
				}
				break;
			}
			State = 525;
			switch ( Interpreter.AdaptivePredict(_input,83,_ctx) ) {
			case 1:
				{
				State = 524; Match(DollarQuotedString);
				}
				break;
			}
			State = 528;
			switch ( Interpreter.AdaptivePredict(_input,84,_ctx) ) {
			case 1:
				{
				State = 527; Match(PercentQuotedString);
				}
				break;
			}
			State = 534;
			switch ( Interpreter.AdaptivePredict(_input,85,_ctx) ) {
			case 1:
				{
				State = 530; Match(T__38);
				State = 531; rangeCore();
				State = 532; Match(T__39);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return vouchersB_sempred((VouchersBContext)_localctx, predIndex);

		case 16: return details_sempred((DetailsContext)_localctx, predIndex);

		case 45: return distributedQ_sempred((DistributedQContext)_localctx, predIndex);
		}
		return true;
	}
	private bool vouchersB_sempred(VouchersBContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 5);

		case 1: return Precpred(_ctx, 4);
		}
		return true;
	}
	private bool distributedQ_sempred(DistributedQContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(_ctx, 5);

		case 5: return Precpred(_ctx, 4);
		}
		return true;
	}
	private bool details_sempred(DetailsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 5);

		case 3: return Precpred(_ctx, 4);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3V\x21B\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x3\x2\x3\x2\x3\x2\x3"+
		"\x2\x3\x2\x5\x2\x66\n\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x6\x5u\n\x5\r\x5\xE\x5v\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x6\x5\x7F\n\x5\r\x5\xE\x5\x80\x5\x5\x83\n\x5"+
		"\x3\x6\x3\x6\x3\x6\a\x6\x88\n\x6\f\x6\xE\x6\x8B\v\x6\x3\x6\x3\x6\x3\x6"+
		"\x5\x6\x90\n\x6\x3\x6\x3\x6\x5\x6\x94\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x6\a\xA0\n\a\r\a\xE\a\xA1\x5\a\xA4\n\a\x3\b\x3"+
		"\b\x3\b\x3\b\x6\b\xAA\n\b\r\b\xE\b\xAB\x3\b\x5\b\xAF\n\b\x3\t\x3\t\x3"+
		"\t\x5\t\xB4\n\t\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\f\x3\f\a\f\xBE\n\f\f"+
		"\f\xE\f\xC1\v\f\x3\f\x3\f\x3\f\x5\f\xC6\n\f\x3\f\x5\f\xC9\n\f\x5\f\xCB"+
		"\n\f\x3\r\x3\r\x3\r\x3\r\x5\r\xD1\n\r\x3\xE\x3\xE\x3\xE\x5\xE\xD6\n\xE"+
		"\x3\xF\x3\xF\x5\xF\xDA\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\xE7\n\x10\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\a\x10\xEF\n\x10\f\x10\xE\x10\xF2\v\x10\x3\x11"+
		"\x5\x11\xF5\n\x11\x3\x11\x5\x11\xF8\n\x11\x3\x11\x5\x11\xFB\n\x11\x3\x11"+
		"\x5\x11\xFE\n\x11\x3\x11\x5\x11\x101\n\x11\x3\x11\x5\x11\x104\n\x11\x3"+
		"\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\x10E\n\x12"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\a\x12\x116\n\x12\f\x12\xE\x12"+
		"\x119\v\x12\x3\x13\x5\x13\x11C\n\x13\x3\x13\x5\x13\x11F\n\x13\x3\x13\x5"+
		"\x13\x122\n\x13\x3\x13\x5\x13\x125\n\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3"+
		"\x14\x3\x14\x5\x14\x12D\n\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15"+
		"\x134\n\x15\x3\x15\x3\x15\x3\x15\x5\x15\x139\n\x15\x3\x16\x3\x16\x3\x16"+
		"\x5\x16\x13E\n\x16\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17\x144\n\x17\x3\x18"+
		"\x3\x18\x3\x19\x5\x19\x149\n\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1B\x3"+
		"\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5"+
		"\x1C\x15A\n\x1C\x3\x1D\x3\x1D\x5\x1D\x15E\n\x1D\x3\x1D\x5\x1D\x161\n\x1D"+
		"\x3\x1D\x5\x1D\x164\n\x1D\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x169\n\x1E\x3\x1F"+
		"\x3\x1F\x3\x1F\x5\x1F\x16E\n\x1F\x3\x1F\x5\x1F\x171\n\x1F\x3\x1F\x3\x1F"+
		"\x5\x1F\x175\n\x1F\x3 \x3 \x3 \x5 \x17A\n \x3 \x5 \x17D\n \x3 \x3 \x5"+
		" \x181\n \x3!\x3!\x3!\x5!\x186\n!\x3\"\x3\"\x3\"\x5\"\x18B\n\"\x3\"\x5"+
		"\"\x18E\n\"\x3#\x3#\x3#\x5#\x193\n#\x3#\x3#\x5#\x197\n#\x3$\x3$\x3$\x5"+
		"$\x19C\n$\x3$\x5$\x19F\n$\x3$\x5$\x1A2\n$\x3%\x3%\x3%\x5%\x1A7\n%\x3&"+
		"\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x5&\x1B1\n&\x3\'\x3\'\x5\'\x1B5\n\'\x3\'"+
		"\x5\'\x1B8\n\'\x3\'\x5\'\x1BB\n\'\x3(\x3(\x3(\x5(\x1C0\n(\x3)\x3)\x3)"+
		"\x5)\x1C5\n)\x3)\x5)\x1C8\n)\x3)\x3)\x5)\x1CC\n)\x3*\x3*\x3*\x5*\x1D1"+
		"\n*\x3*\x5*\x1D4\n*\x3*\x3*\x5*\x1D8\n*\x3+\x3+\x3+\x5+\x1DD\n+\x3,\x3"+
		",\x3,\x5,\x1E2\n,\x3,\x5,\x1E5\n,\x3-\x3-\x3-\x5-\x1EA\n-\x3-\x5-\x1ED"+
		"\n-\x3-\x5-\x1F0\n-\x3.\x3.\x3.\x5.\x1F5\n.\x3/\x3/\x3/\x3/\x3/\x3/\x3"+
		"/\x3/\x5/\x1FF\n/\x3/\x3/\x3/\x3/\x3/\x3/\a/\x207\n/\f/\xE/\x20A\v/\x3"+
		"\x30\x5\x30\x20D\n\x30\x3\x30\x5\x30\x210\n\x30\x3\x30\x5\x30\x213\n\x30"+
		"\x3\x30\x3\x30\x3\x30\x3\x30\x5\x30\x219\n\x30\x3\x30\x2\x2\x5\x1E\"\\"+
		"\x31\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2"+
		"\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32"+
		"\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2"+
		"L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2\x2\xF\x3\x2+\x34\x3\x2QR\x3"+
		"\x2\xE\xF\x3\x2\x10\x19\x3\x2TU\x4\x2\x1D\x1D  \x3\x2OP\x4\x2\x12\x12"+
		"\x14\x14\x4\x2$$UU\x3\x2%&\x3\x2\x45\x46\x3\x2GH\x3\x2\x35\x36\x25D\x2"+
		"\x65\x3\x2\x2\x2\x4i\x3\x2\x2\x2\x6k\x3\x2\x2\x2\b\x82\x3\x2\x2\x2\n\x84"+
		"\x3\x2\x2\x2\f\xA3\x3\x2\x2\x2\xE\xAE\x3\x2\x2\x2\x10\xB0\x3\x2\x2\x2"+
		"\x12\xB5\x3\x2\x2\x2\x14\xB8\x3\x2\x2\x2\x16\xBB\x3\x2\x2\x2\x18\xD0\x3"+
		"\x2\x2\x2\x1A\xD5\x3\x2\x2\x2\x1C\xD9\x3\x2\x2\x2\x1E\xE6\x3\x2\x2\x2"+
		" \xF4\x3\x2\x2\x2\"\x10D\x3\x2\x2\x2$\x11B\x3\x2\x2\x2&\x12C\x3\x2\x2"+
		"\x2(\x138\x3\x2\x2\x2*\x13D\x3\x2\x2\x2,\x143\x3\x2\x2\x2.\x145\x3\x2"+
		"\x2\x2\x30\x148\x3\x2\x2\x2\x32\x14C\x3\x2\x2\x2\x34\x14E\x3\x2\x2\x2"+
		"\x36\x159\x3\x2\x2\x2\x38\x15B\x3\x2\x2\x2:\x165\x3\x2\x2\x2<\x16A\x3"+
		"\x2\x2\x2>\x176\x3\x2\x2\x2@\x182\x3\x2\x2\x2\x42\x187\x3\x2\x2\x2\x44"+
		"\x18F\x3\x2\x2\x2\x46\x198\x3\x2\x2\x2H\x1A3\x3\x2\x2\x2J\x1B0\x3\x2\x2"+
		"\x2L\x1B2\x3\x2\x2\x2N\x1BC\x3\x2\x2\x2P\x1C1\x3\x2\x2\x2R\x1CD\x3\x2"+
		"\x2\x2T\x1D9\x3\x2\x2\x2V\x1DE\x3\x2\x2\x2X\x1E6\x3\x2\x2\x2Z\x1F1\x3"+
		"\x2\x2\x2\\\x1FE\x3\x2\x2\x2^\x20C\x3\x2\x2\x2`\x66\x5\x1C\xF\x2\x61\x66"+
		"\x5\x6\x4\x2\x62\x66\x5\x36\x1C\x2\x63\x66\x5J&\x2\x64\x66\x5\x4\x3\x2"+
		"\x65`\x3\x2\x2\x2\x65\x61\x3\x2\x2\x2\x65\x62\x3\x2\x2\x2\x65\x63\x3\x2"+
		"\x2\x2\x65\x64\x3\x2\x2\x2\x66g\x3\x2\x2\x2gh\a\x2\x2\x3h\x3\x3\x2\x2"+
		"\x2ij\t\x2\x2\x2j\x5\x3\x2\x2\x2kl\x5\x18\r\x2lm\x5\x16\f\x2m\a\x3\x2"+
		"\x2\x2no\a\x3\x2\x2o\x83\aL\x2\x2pq\a\x4\x2\x2qt\x5\n\x6\x2rs\a\x5\x2"+
		"\x2su\x5\xE\b\x2tr\x3\x2\x2\x2uv\x3\x2\x2\x2vt\x3\x2\x2\x2vw\x3\x2\x2"+
		"\x2w\x83\x3\x2\x2\x2xy\a\x6\x2\x2yz\aL\x2\x2z{\a\a\x2\x2{~\x5\n\x6\x2"+
		"|}\a\x5\x2\x2}\x7F\x5\xE\b\x2~|\x3\x2\x2\x2\x7F\x80\x3\x2\x2\x2\x80~\x3"+
		"\x2\x2\x2\x80\x81\x3\x2\x2\x2\x81\x83\x3\x2\x2\x2\x82n\x3\x2\x2\x2\x82"+
		"p\x3\x2\x2\x2\x82x\x3\x2\x2\x2\x83\t\x3\x2\x2\x2\x84\x89\x5\x10\t\x2\x85"+
		"\x86\a\b\x2\x2\x86\x88\x5\x10\t\x2\x87\x85\x3\x2\x2\x2\x88\x8B\x3\x2\x2"+
		"\x2\x89\x87\x3\x2\x2\x2\x89\x8A\x3\x2\x2\x2\x8A\x8C\x3\x2\x2\x2\x8B\x89"+
		"\x3\x2\x2\x2\x8C\x8F\a\b\x2\x2\x8D\x8E\a\t\x2\x2\x8E\x90\aQ\x2\x2\x8F"+
		"\x8D\x3\x2\x2\x2\x8F\x90\x3\x2\x2\x2\x90\x93\x3\x2\x2\x2\x91\x92\a\n\x2"+
		"\x2\x92\x94\aQ\x2\x2\x93\x91\x3\x2\x2\x2\x93\x94\x3\x2\x2\x2\x94\v\x3"+
		"\x2\x2\x2\x95\x96\a\v\x2\x2\x96\xA4\aL\x2\x2\x97\x98\a\f\x2\x2\x98\xA4"+
		"\x5\xE\b\x2\x99\x9A\a\r\x2\x2\x9A\x9B\aL\x2\x2\x9B\x9C\a\a\x2\x2\x9C\x9F"+
		"\x5\n\x6\x2\x9D\x9E\a\x5\x2\x2\x9E\xA0\x5\xE\b\x2\x9F\x9D\x3\x2\x2\x2"+
		"\xA0\xA1\x3\x2\x2\x2\xA1\x9F\x3\x2\x2\x2\xA1\xA2\x3\x2\x2\x2\xA2\xA4\x3"+
		"\x2\x2\x2\xA3\x95\x3\x2\x2\x2\xA3\x97\x3\x2\x2\x2\xA3\x99\x3\x2\x2\x2"+
		"\xA4\r\x3\x2\x2\x2\xA5\xA6\x5\x12\n\x2\xA6\xA9\x5\xE\b\x2\xA7\xA8\a\b"+
		"\x2\x2\xA8\xAA\x5\xE\b\x2\xA9\xA7\x3\x2\x2\x2\xAA\xAB\x3\x2\x2\x2\xAB"+
		"\xA9\x3\x2\x2\x2\xAB\xAC\x3\x2\x2\x2\xAC\xAF\x3\x2\x2\x2\xAD\xAF\x5\x10"+
		"\t\x2\xAE\xA5\x3\x2\x2\x2\xAE\xAD\x3\x2\x2\x2\xAF\xF\x3\x2\x2\x2\xB0\xB1"+
		"\x5\x12\n\x2\xB1\xB3\x5\x6\x4\x2\xB2\xB4\x5\x14\v\x2\xB3\xB2\x3\x2\x2"+
		"\x2\xB3\xB4\x3\x2\x2\x2\xB4\x11\x3\x2\x2\x2\xB5\xB6\aL\x2\x2\xB6\xB7\a"+
		"\a\x2\x2\xB7\x13\x3\x2\x2\x2\xB8\xB9\aS\x2\x2\xB9\xBA\t\x3\x2\x2\xBA\x15"+
		"\x3\x2\x2\x2\xBB\xBF\t\x4\x2\x2\xBC\xBE\t\x5\x2\x2\xBD\xBC\x3\x2\x2\x2"+
		"\xBE\xC1\x3\x2\x2\x2\xBF\xBD\x3\x2\x2\x2\xBF\xC0\x3\x2\x2\x2\xC0\xCA\x3"+
		"\x2\x2\x2\xC1\xBF\x3\x2\x2\x2\xC2\xC8\a\x1A\x2\x2\xC3\xC5\a\x1B\x2\x2"+
		"\xC4\xC6\x5(\x15\x2\xC5\xC4\x3\x2\x2\x2\xC5\xC6\x3\x2\x2\x2\xC6\xC7\x3"+
		"\x2\x2\x2\xC7\xC9\a\x1C\x2\x2\xC8\xC3\x3\x2\x2\x2\xC8\xC9\x3\x2\x2\x2"+
		"\xC9\xCB\x3\x2\x2\x2\xCA\xC2\x3\x2\x2\x2\xCA\xCB\x3\x2\x2\x2\xCB\x17\x3"+
		"\x2\x2\x2\xCC\xCD\x5\x1C\xF\x2\xCD\xCE\x5\x1A\xE\x2\xCE\xD1\x3\x2\x2\x2"+
		"\xCF\xD1\x5 \x11\x2\xD0\xCC\x3\x2\x2\x2\xD0\xCF\x3\x2\x2\x2\xD1\x19\x3"+
		"\x2\x2\x2\xD2\xD6\a\x1D\x2\x2\xD3\xD4\a\a\x2\x2\xD4\xD6\x5\"\x12\x2\xD5"+
		"\xD2\x3\x2\x2\x2\xD5\xD3\x3\x2\x2\x2\xD6\x1B\x3\x2\x2\x2\xD7\xDA\x5\x1E"+
		"\x10\x2\xD8\xDA\x5 \x11\x2\xD9\xD7\x3\x2\x2\x2\xD9\xD8\x3\x2\x2\x2\xDA"+
		"\x1D\x3\x2\x2\x2\xDB\xDC\b\x10\x1\x2\xDC\xDD\t\x6\x2\x2\xDD\xE7\x5\x1E"+
		"\x10\x5\xDE\xDF\a\x1E\x2\x2\xDF\xE0\x5 \x11\x2\xE0\xE1\a\x1F\x2\x2\xE1"+
		"\xE7\x3\x2\x2\x2\xE2\xE3\a\x1E\x2\x2\xE3\xE4\x5\x1E\x10\x2\xE4\xE5\a\x1F"+
		"\x2\x2\xE5\xE7\x3\x2\x2\x2\xE6\xDB\x3\x2\x2\x2\xE6\xDE\x3\x2\x2\x2\xE6"+
		"\xE2\x3\x2\x2\x2\xE7\xF0\x3\x2\x2\x2\xE8\xE9\f\a\x2\x2\xE9\xEA\aS\x2\x2"+
		"\xEA\xEF\x5\x1E\x10\b\xEB\xEC\f\x6\x2\x2\xEC\xED\t\x6\x2\x2\xED\xEF\x5"+
		"\x1E\x10\a\xEE\xE8\x3\x2\x2\x2\xEE\xEB\x3\x2\x2\x2\xEF\xF2\x3\x2\x2\x2"+
		"\xF0\xEE\x3\x2\x2\x2\xF0\xF1\x3\x2\x2\x2\xF1\x1F\x3\x2\x2\x2\xF2\xF0\x3"+
		"\x2\x2\x2\xF3\xF5\x5\"\x12\x2\xF4\xF3\x3\x2\x2\x2\xF4\xF5\x3\x2\x2\x2"+
		"\xF5\xF7\x3\x2\x2\x2\xF6\xF8\t\a\x2\x2\xF7\xF6\x3\x2\x2\x2\xF7\xF8\x3"+
		"\x2\x2\x2\xF8\xFA\x3\x2\x2\x2\xF9\xFB\x5&\x14\x2\xFA\xF9\x3\x2\x2\x2\xFA"+
		"\xFB\x3\x2\x2\x2\xFB\xFD\x3\x2\x2\x2\xFC\xFE\aL\x2\x2\xFD\xFC\x3\x2\x2"+
		"\x2\xFD\xFE\x3\x2\x2\x2\xFE\x100\x3\x2\x2\x2\xFF\x101\aK\x2\x2\x100\xFF"+
		"\x3\x2\x2\x2\x100\x101\x3\x2\x2\x2\x101\x103\x3\x2\x2\x2\x102\x104\aJ"+
		"\x2\x2\x103\x102\x3\x2\x2\x2\x103\x104\x3\x2\x2\x2\x104!\x3\x2\x2\x2\x105"+
		"\x106\b\x12\x1\x2\x106\x107\t\x6\x2\x2\x107\x10E\x5\"\x12\x5\x108\x10E"+
		"\x5$\x13\x2\x109\x10A\a!\x2\x2\x10A\x10B\x5\"\x12\x2\x10B\x10C\a\"\x2"+
		"\x2\x10C\x10E\x3\x2\x2\x2\x10D\x105\x3\x2\x2\x2\x10D\x108\x3\x2\x2\x2"+
		"\x10D\x109\x3\x2\x2\x2\x10E\x117\x3\x2\x2\x2\x10F\x110\f\a\x2\x2\x110"+
		"\x111\aS\x2\x2\x111\x116\x5\"\x12\b\x112\x113\f\x6\x2\x2\x113\x114\t\x6"+
		"\x2\x2\x114\x116\x5\"\x12\a\x115\x10F\x3\x2\x2\x2\x115\x112\x3\x2\x2\x2"+
		"\x116\x119\x3\x2\x2\x2\x117\x115\x3\x2\x2\x2\x117\x118\x3\x2\x2\x2\x118"+
		"#\x3\x2\x2\x2\x119\x117\x3\x2\x2\x2\x11A\x11C\t\b\x2\x2\x11B\x11A\x3\x2"+
		"\x2\x2\x11B\x11C\x3\x2\x2\x2\x11C\x11E\x3\x2\x2\x2\x11D\x11F\aN\x2\x2"+
		"\x11E\x11D\x3\x2\x2\x2\x11E\x11F\x3\x2\x2\x2\x11F\x121\x3\x2\x2\x2\x120"+
		"\x122\aM\x2\x2\x121\x120\x3\x2\x2\x2\x121\x122\x3\x2\x2\x2\x122\x124\x3"+
		"\x2\x2\x2\x123\x125\t\t\x2\x2\x124\x123\x3\x2\x2\x2\x124\x125\x3\x2\x2"+
		"\x2\x125%\x3\x2\x2\x2\x126\x12D\a#\x2\x2\x127\x12D\x5(\x15\x2\x128\x129"+
		"\a\x1B\x2\x2\x129\x12A\x5(\x15\x2\x12A\x12B\a\x1C\x2\x2\x12B\x12D\x3\x2"+
		"\x2\x2\x12C\x126\x3\x2\x2\x2\x12C\x127\x3\x2\x2\x2\x12C\x128\x3\x2\x2"+
		"\x2\x12D\'\x3\x2\x2\x2\x12E\x139\a\x42\x2\x2\x12F\x139\a\x43\x2\x2\x130"+
		"\x131\x5,\x17\x2\x131\x133\t\n\x2\x2\x132\x134\x5,\x17\x2\x133\x132\x3"+
		"\x2\x2\x2\x133\x134\x3\x2\x2\x2\x134\x139\x3\x2\x2\x2\x135\x136\t\n\x2"+
		"\x2\x136\x139\x5,\x17\x2\x137\x139\x5,\x17\x2\x138\x12E\x3\x2\x2\x2\x138"+
		"\x12F\x3\x2\x2\x2\x138\x130\x3\x2\x2\x2\x138\x135\x3\x2\x2\x2\x138\x137"+
		"\x3\x2\x2\x2\x139)\x3\x2\x2\x2\x13A\x13E\a\x42\x2\x2\x13B\x13E\a#\x2\x2"+
		"\x13C\x13E\x5,\x17\x2\x13D\x13A\x3\x2\x2\x2\x13D\x13B\x3\x2\x2\x2\x13D"+
		"\x13C\x3\x2\x2\x2\x13E+\x3\x2\x2\x2\x13F\x144\x5.\x18\x2\x140\x144\x5"+
		"\x30\x19\x2\x141\x144\x5\x32\x1A\x2\x142\x144\x5\x34\x1B\x2\x143\x13F"+
		"\x3\x2\x2\x2\x143\x140\x3\x2\x2\x2\x143\x141\x3\x2\x2\x2\x143\x142\x3"+
		"\x2\x2\x2\x144-\x3\x2\x2\x2\x145\x146\a\x44\x2\x2\x146/\x3\x2\x2\x2\x147"+
		"\x149\t\v\x2\x2\x148\x147\x3\x2\x2\x2\x148\x149\x3\x2\x2\x2\x149\x14A"+
		"\x3\x2\x2\x2\x14A\x14B\t\f\x2\x2\x14B\x31\x3\x2\x2\x2\x14C\x14D\aI\x2"+
		"\x2\x14D\x33\x3\x2\x2\x2\x14E\x14F\t\r\x2\x2\x14F\x35\x3\x2\x2\x2\x150"+
		"\x15A\x5\x38\x1D\x2\x151\x15A\x5:\x1E\x2\x152\x15A\x5<\x1F\x2\x153\x15A"+
		"\x5> \x2\x154\x15A\x5@!\x2\x155\x15A\x5\x42\"\x2\x156\x15A\x5\x44#\x2"+
		"\x157\x15A\x5\x46$\x2\x158\x15A\x5H%\x2\x159\x150\x3\x2\x2\x2\x159\x151"+
		"\x3\x2\x2\x2\x159\x152\x3\x2\x2\x2\x159\x153\x3\x2\x2\x2\x159\x154\x3"+
		"\x2\x2\x2\x159\x155\x3\x2\x2\x2\x159\x156\x3\x2\x2\x2\x159\x157\x3\x2"+
		"\x2\x2\x159\x158\x3\x2\x2\x2\x15A\x37\x3\x2\x2\x2\x15B\x15D\a\'\x2\x2"+
		"\x15C\x15E\t\xE\x2\x2\x15D\x15C\x3\x2\x2\x2\x15D\x15E\x3\x2\x2\x2\x15E"+
		"\x160\x3\x2\x2\x2\x15F\x161\x5*\x16\x2\x160\x15F\x3\x2\x2\x2\x160\x161"+
		"\x3\x2\x2\x2\x161\x163\x3\x2\x2\x2\x162\x164\x5\\/\x2\x163\x162\x3\x2"+
		"\x2\x2\x163\x164\x3\x2\x2\x2\x164\x39\x3\x2\x2\x2\x165\x166\a\'\x2\x2"+
		"\x166\x168\a\x37\x2\x2\x167\x169\x5\\/\x2\x168\x167\x3\x2\x2\x2\x168\x169"+
		"\x3\x2\x2\x2\x169;\x3\x2\x2\x2\x16A\x16B\a\'\x2\x2\x16B\x16D\a\x38\x2"+
		"\x2\x16C\x16E\x5\\/\x2\x16D\x16C\x3\x2\x2\x2\x16D\x16E\x3\x2\x2\x2\x16E"+
		"\x170\x3\x2\x2\x2\x16F\x171\x5&\x14\x2\x170\x16F\x3\x2\x2\x2\x170\x171"+
		"\x3\x2\x2\x2\x171\x174\x3\x2\x2\x2\x172\x173\a\a\x2\x2\x173\x175\x5\x1C"+
		"\xF\x2\x174\x172\x3\x2\x2\x2\x174\x175\x3\x2\x2\x2\x175=\x3\x2\x2\x2\x176"+
		"\x177\a\'\x2\x2\x177\x179\a\x39\x2\x2\x178\x17A\x5\\/\x2\x179\x178\x3"+
		"\x2\x2\x2\x179\x17A\x3\x2\x2\x2\x17A\x17C\x3\x2\x2\x2\x17B\x17D\x5&\x14"+
		"\x2\x17C\x17B\x3\x2\x2\x2\x17C\x17D\x3\x2\x2\x2\x17D\x180\x3\x2\x2\x2"+
		"\x17E\x17F\a\a\x2\x2\x17F\x181\x5\x1C\xF\x2\x180\x17E\x3\x2\x2\x2\x180"+
		"\x181\x3\x2\x2\x2\x181?\x3\x2\x2\x2\x182\x183\a\'\x2\x2\x183\x185\a:\x2"+
		"\x2\x184\x186\x5\\/\x2\x185\x184\x3\x2\x2\x2\x185\x186\x3\x2\x2\x2\x186"+
		"\x41\x3\x2\x2\x2\x187\x188\a\'\x2\x2\x188\x18A\a<\x2\x2\x189\x18B\x5\\"+
		"/\x2\x18A\x189\x3\x2\x2\x2\x18A\x18B\x3\x2\x2\x2\x18B\x18D\x3\x2\x2\x2"+
		"\x18C\x18E\x5&\x14\x2\x18D\x18C\x3\x2\x2\x2\x18D\x18E\x3\x2\x2\x2\x18E"+
		"\x43\x3\x2\x2\x2\x18F\x190\a\'\x2\x2\x190\x192\a=\x2\x2\x191\x193\x5\\"+
		"/\x2\x192\x191\x3\x2\x2\x2\x192\x193\x3\x2\x2\x2\x193\x196\x3\x2\x2\x2"+
		"\x194\x195\a\a\x2\x2\x195\x197\x5\x1C\xF\x2\x196\x194\x3\x2\x2\x2\x196"+
		"\x197\x3\x2\x2\x2\x197\x45\x3\x2\x2\x2\x198\x199\a\'\x2\x2\x199\x19B\a"+
		">\x2\x2\x19A\x19C\a?\x2\x2\x19B\x19A\x3\x2\x2\x2\x19B\x19C\x3\x2\x2\x2"+
		"\x19C\x19E\x3\x2\x2\x2\x19D\x19F\x5\\/\x2\x19E\x19D\x3\x2\x2\x2\x19E\x19F"+
		"\x3\x2\x2\x2\x19F\x1A1\x3\x2\x2\x2\x1A0\x1A2\x5&\x14\x2\x1A1\x1A0\x3\x2"+
		"\x2\x2\x1A1\x1A2\x3\x2\x2\x2\x1A2G\x3\x2\x2\x2\x1A3\x1A4\a\'\x2\x2\x1A4"+
		"\x1A6\a@\x2\x2\x1A5\x1A7\x5\\/\x2\x1A6\x1A5\x3\x2\x2\x2\x1A6\x1A7\x3\x2"+
		"\x2\x2\x1A7I\x3\x2\x2\x2\x1A8\x1B1\x5L\'\x2\x1A9\x1B1\x5N(\x2\x1AA\x1B1"+
		"\x5P)\x2\x1AB\x1B1\x5R*\x2\x1AC\x1B1\x5T+\x2\x1AD\x1B1\x5V,\x2\x1AE\x1B1"+
		"\x5X-\x2\x1AF\x1B1\x5Z.\x2\x1B0\x1A8\x3\x2\x2\x2\x1B0\x1A9\x3\x2\x2\x2"+
		"\x1B0\x1AA\x3\x2\x2\x2\x1B0\x1AB\x3\x2\x2\x2\x1B0\x1AC\x3\x2\x2\x2\x1B0"+
		"\x1AD\x3\x2\x2\x2\x1B0\x1AE\x3\x2\x2\x2\x1B0\x1AF\x3\x2\x2\x2\x1B1K\x3"+
		"\x2\x2\x2\x1B2\x1B4\a(\x2\x2\x1B3\x1B5\t\xE\x2\x2\x1B4\x1B3\x3\x2\x2\x2"+
		"\x1B4\x1B5\x3\x2\x2\x2\x1B5\x1B7\x3\x2\x2\x2\x1B6\x1B8\x5*\x16\x2\x1B7"+
		"\x1B6\x3\x2\x2\x2\x1B7\x1B8\x3\x2\x2\x2\x1B8\x1BA\x3\x2\x2\x2\x1B9\x1BB"+
		"\x5\\/\x2\x1BA\x1B9\x3\x2\x2\x2\x1BA\x1BB\x3\x2\x2\x2\x1BBM\x3\x2\x2\x2"+
		"\x1BC\x1BD\a(\x2\x2\x1BD\x1BF\a\x37\x2\x2\x1BE\x1C0\x5\\/\x2\x1BF\x1BE"+
		"\x3\x2\x2\x2\x1BF\x1C0\x3\x2\x2\x2\x1C0O\x3\x2\x2\x2\x1C1\x1C2\a(\x2\x2"+
		"\x1C2\x1C4\a\x38\x2\x2\x1C3\x1C5\x5\\/\x2\x1C4\x1C3\x3\x2\x2\x2\x1C4\x1C5"+
		"\x3\x2\x2\x2\x1C5\x1C7\x3\x2\x2\x2\x1C6\x1C8\x5&\x14\x2\x1C7\x1C6\x3\x2"+
		"\x2\x2\x1C7\x1C8\x3\x2\x2\x2\x1C8\x1CB\x3\x2\x2\x2\x1C9\x1CA\a\a\x2\x2"+
		"\x1CA\x1CC\x5\x1C\xF\x2\x1CB\x1C9\x3\x2\x2\x2\x1CB\x1CC\x3\x2\x2\x2\x1CC"+
		"Q\x3\x2\x2\x2\x1CD\x1CE\a(\x2\x2\x1CE\x1D0\a\x39\x2\x2\x1CF\x1D1\x5\\"+
		"/\x2\x1D0\x1CF\x3\x2\x2\x2\x1D0\x1D1\x3\x2\x2\x2\x1D1\x1D3\x3\x2\x2\x2"+
		"\x1D2\x1D4\x5&\x14\x2\x1D3\x1D2\x3\x2\x2\x2\x1D3\x1D4\x3\x2\x2\x2\x1D4"+
		"\x1D7\x3\x2\x2\x2\x1D5\x1D6\a\a\x2\x2\x1D6\x1D8\x5\x1C\xF\x2\x1D7\x1D5"+
		"\x3\x2\x2\x2\x1D7\x1D8\x3\x2\x2\x2\x1D8S\x3\x2\x2\x2\x1D9\x1DA\a(\x2\x2"+
		"\x1DA\x1DC\a;\x2\x2\x1DB\x1DD\x5\\/\x2\x1DC\x1DB\x3\x2\x2\x2\x1DC\x1DD"+
		"\x3\x2\x2\x2\x1DDU\x3\x2\x2\x2\x1DE\x1DF\a(\x2\x2\x1DF\x1E1\a<\x2\x2\x1E0"+
		"\x1E2\x5\\/\x2\x1E1\x1E0\x3\x2\x2\x2\x1E1\x1E2\x3\x2\x2\x2\x1E2\x1E4\x3"+
		"\x2\x2\x2\x1E3\x1E5\x5&\x14\x2\x1E4\x1E3\x3\x2\x2\x2\x1E4\x1E5\x3\x2\x2"+
		"\x2\x1E5W\x3\x2\x2\x2\x1E6\x1E7\a(\x2\x2\x1E7\x1E9\a>\x2\x2\x1E8\x1EA"+
		"\a?\x2\x2\x1E9\x1E8\x3\x2\x2\x2\x1E9\x1EA\x3\x2\x2\x2\x1EA\x1EC\x3\x2"+
		"\x2\x2\x1EB\x1ED\x5\\/\x2\x1EC\x1EB\x3\x2\x2\x2\x1EC\x1ED\x3\x2\x2\x2"+
		"\x1ED\x1EF\x3\x2\x2\x2\x1EE\x1F0\x5&\x14\x2\x1EF\x1EE\x3\x2\x2\x2\x1EF"+
		"\x1F0\x3\x2\x2\x2\x1F0Y\x3\x2\x2\x2\x1F1\x1F2\a(\x2\x2\x1F2\x1F4\a@\x2"+
		"\x2\x1F3\x1F5\x5\\/\x2\x1F4\x1F3\x3\x2\x2\x2\x1F4\x1F5\x3\x2\x2\x2\x1F5"+
		"[\x3\x2\x2\x2\x1F6\x1F7\b/\x1\x2\x1F7\x1F8\t\x6\x2\x2\x1F8\x1FF\x5\\/"+
		"\x5\x1F9\x1FF\x5^\x30\x2\x1FA\x1FB\a!\x2\x2\x1FB\x1FC\x5\\/\x2\x1FC\x1FD"+
		"\a\"\x2\x2\x1FD\x1FF\x3\x2\x2\x2\x1FE\x1F6\x3\x2\x2\x2\x1FE\x1F9\x3\x2"+
		"\x2\x2\x1FE\x1FA\x3\x2\x2\x2\x1FF\x208\x3\x2\x2\x2\x200\x201\f\a\x2\x2"+
		"\x201\x202\aS\x2\x2\x202\x207\x5\\/\b\x203\x204\f\x6\x2\x2\x204\x205\t"+
		"\x6\x2\x2\x205\x207\x5\\/\a\x206\x200\x3\x2\x2\x2\x206\x203\x3\x2\x2\x2"+
		"\x207\x20A\x3\x2\x2\x2\x208\x206\x3\x2\x2\x2\x208\x209\x3\x2\x2\x2\x209"+
		"]\x3\x2\x2\x2\x20A\x208\x3\x2\x2\x2\x20B\x20D\a\x41\x2\x2\x20C\x20B\x3"+
		"\x2\x2\x2\x20C\x20D\x3\x2\x2\x2\x20D\x20F\x3\x2\x2\x2\x20E\x210\aL\x2"+
		"\x2\x20F\x20E\x3\x2\x2\x2\x20F\x210\x3\x2\x2\x2\x210\x212\x3\x2\x2\x2"+
		"\x211\x213\aK\x2\x2\x212\x211\x3\x2\x2\x2\x212\x213\x3\x2\x2\x2\x213\x218"+
		"\x3\x2\x2\x2\x214\x215\a)\x2\x2\x215\x216\x5(\x15\x2\x216\x217\a*\x2\x2"+
		"\x217\x219\x3\x2\x2\x2\x218\x214\x3\x2\x2\x2\x218\x219\x3\x2\x2\x2\x219"+
		"_\x3\x2\x2\x2X\x65v\x80\x82\x89\x8F\x93\xA1\xA3\xAB\xAE\xB3\xBF\xC5\xC8"+
		"\xCA\xD0\xD5\xD9\xE6\xEE\xF0\xF4\xF7\xFA\xFD\x100\x103\x10D\x115\x117"+
		"\x11B\x11E\x121\x124\x12C\x133\x138\x13D\x143\x148\x159\x15D\x160\x163"+
		"\x168\x16D\x170\x174\x179\x17C\x180\x185\x18A\x18D\x192\x196\x19B\x19E"+
		"\x1A1\x1A6\x1B0\x1B4\x1B7\x1BA\x1BF\x1C4\x1C7\x1CB\x1D0\x1D3\x1D7\x1DC"+
		"\x1E1\x1E4\x1E9\x1EC\x1EF\x1F4\x1FE\x206\x208\x20C\x20F\x212\x218";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace AccountingServer.Console
