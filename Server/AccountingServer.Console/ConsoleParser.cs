//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.4.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\b1f6c1c4\Documents\GitHub\ProfessionalAccounting\Server\AccountingServer.QueryGeneration\Console.g4 by ANTLR 4.4.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace AccountingServer.Console {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.4.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class ConsoleParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		Launch=32, Connect=33, Shutdown=34, Backup=35, Mobile=36, Fetch=37, Help=38, 
		Titles=39, Exit=40, Check=41, AOAll=42, AOList=43, AOQuery=44, AORegister=45, 
		AOUnregister=46, ARedep=47, OReamo=48, AOResetSoft=49, AOResetHard=50, 
		AOApply=51, AOCollapse=52, AOCheck=53, Guid=54, RangeNull=55, RangeAllNotNull=56, 
		RangeAYear=57, RangeAMonth=58, RangeDeltaMonth=59, RangeADay=60, RangeDeltaDay=61, 
		RangeDeltaWeek=62, VoucherRemark=63, DoubleQuotedString=64, SingleQuotedString=65, 
		DetailTitle=66, DetailTitleSubTitle=67, WS=68;
	public const int
		RULE_command = 0, RULE_otherCommand = 1, RULE_asset = 2, RULE_assetList = 3, 
		RULE_assetQuery = 4, RULE_assetRegister = 5, RULE_assetUnregister = 6, 
		RULE_assetRedep = 7, RULE_assetResetSoft = 8, RULE_assetResetHard = 9, 
		RULE_assetApply = 10, RULE_assetCheck = 11, RULE_amort = 12, RULE_amortList = 13, 
		RULE_amortQuery = 14, RULE_amortRegister = 15, RULE_amortUnregister = 16, 
		RULE_amortReamo = 17, RULE_amortResetSoft = 18, RULE_amortResetHard = 19, 
		RULE_amortApply = 20, RULE_amortCheck = 21, RULE_aoQ = 22, RULE_aoQAtom = 23, 
		RULE_groupedQuery = 24, RULE_subtotal = 25, RULE_voucherQuery = 26, RULE_details = 27, 
		RULE_detailsX = 28, RULE_detailAtom = 29, RULE_detailUnary = 30, RULE_detailQuery = 31, 
		RULE_range = 32, RULE_rangeCore = 33, RULE_rangePoint = 34, RULE_rangeCertainPoint = 35, 
		RULE_rangeYear = 36, RULE_rangeMonth = 37, RULE_rangeWeek = 38, RULE_rangeDay = 39;
	public static readonly string[] ruleNames = {
		"command", "otherCommand", "asset", "assetList", "assetQuery", "assetRegister", 
		"assetUnregister", "assetRedep", "assetResetSoft", "assetResetHard", "assetApply", 
		"assetCheck", "amort", "amortList", "amortQuery", "amortRegister", "amortUnregister", 
		"amortReamo", "amortResetSoft", "amortResetHard", "amortApply", "amortCheck", 
		"aoQ", "aoQAtom", "groupedQuery", "subtotal", "voucherQuery", "details", 
		"detailsX", "detailAtom", "detailUnary", "detailQuery", "range", "rangeCore", 
		"rangePoint", "rangeCertainPoint", "rangeYear", "rangeMonth", "rangeWeek", 
		"rangeDay"
	};

	private static readonly string[] _LiteralNames = {
		null, "'a'", "':'", "'o'", "'+'", "'`'", "'``'", "'!'", "'!!'", "'t'", 
		"'s'", "'c'", "'r'", "'d'", "'w'", "'m'", "'f'", "'b'", "'y'", "'D'", 
		"'x'", "'X'", "'-'", "'*'", "'('", "')'", "'[]'", "'['", "']'", "'~'", 
		"'@'", "'#'", null, null, null, "'backup'", null, "'fetch'", null, null, 
		"'exit'", null, "'-all'", null, null, null, null, null, null, "'-reset-soft'", 
		"'-reset-hard'", null, null, "'-chk'", null, "'null'", "'~null'", null, 
		null, null, null, null, null, null, null, null, null, null, "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "Launch", "Connect", "Shutdown", 
		"Backup", "Mobile", "Fetch", "Help", "Titles", "Exit", "Check", "AOAll", 
		"AOList", "AOQuery", "AORegister", "AOUnregister", "ARedep", "OReamo", 
		"AOResetSoft", "AOResetHard", "AOApply", "AOCollapse", "AOCheck", "Guid", 
		"RangeNull", "RangeAllNotNull", "RangeAYear", "RangeAMonth", "RangeDeltaMonth", 
		"RangeADay", "RangeDeltaDay", "RangeDeltaWeek", "VoucherRemark", "DoubleQuotedString", 
		"SingleQuotedString", "DetailTitle", "DetailTitleSubTitle", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Console.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }


		protected const int EOF = Eof;

	public ConsoleParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CommandContext : ParserRuleContext {
		public VoucherQueryContext voucherQuery() {
			return GetRuleContext<VoucherQueryContext>(0);
		}
		public AssetContext asset() {
			return GetRuleContext<AssetContext>(0);
		}
		public GroupedQueryContext groupedQuery() {
			return GetRuleContext<GroupedQueryContext>(0);
		}
		public AmortContext amort() {
			return GetRuleContext<AmortContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(ConsoleParser.Eof, 0); }
		public OtherCommandContext otherCommand() {
			return GetRuleContext<OtherCommandContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_command);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 80; voucherQuery();
				}
				break;

			case 2:
				{
				State = 81; groupedQuery();
				}
				break;

			case 3:
				{
				State = 82; asset();
				}
				break;

			case 4:
				{
				State = 83; amort();
				}
				break;

			case 5:
				{
				State = 84; otherCommand();
				}
				break;
			}
			State = 87; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherCommandContext : ParserRuleContext {
		public ITerminalNode Connect() { return GetToken(ConsoleParser.Connect, 0); }
		public ITerminalNode Backup() { return GetToken(ConsoleParser.Backup, 0); }
		public ITerminalNode Shutdown() { return GetToken(ConsoleParser.Shutdown, 0); }
		public ITerminalNode Fetch() { return GetToken(ConsoleParser.Fetch, 0); }
		public ITerminalNode Mobile() { return GetToken(ConsoleParser.Mobile, 0); }
		public ITerminalNode Help() { return GetToken(ConsoleParser.Help, 0); }
		public ITerminalNode Check() { return GetToken(ConsoleParser.Check, 0); }
		public ITerminalNode Launch() { return GetToken(ConsoleParser.Launch, 0); }
		public ITerminalNode Exit() { return GetToken(ConsoleParser.Exit, 0); }
		public ITerminalNode Titles() { return GetToken(ConsoleParser.Titles, 0); }
		public OtherCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherCommand; } }
	}

	[RuleVersion(0)]
	public OtherCommandContext otherCommand() {
		OtherCommandContext _localctx = new OtherCommandContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_otherCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Launch) | (1L << Connect) | (1L << Shutdown) | (1L << Backup) | (1L << Mobile) | (1L << Fetch) | (1L << Help) | (1L << Titles) | (1L << Exit) | (1L << Check))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetContext : ParserRuleContext {
		public AssetRegisterContext assetRegister() {
			return GetRuleContext<AssetRegisterContext>(0);
		}
		public AssetUnregisterContext assetUnregister() {
			return GetRuleContext<AssetUnregisterContext>(0);
		}
		public AssetResetHardContext assetResetHard() {
			return GetRuleContext<AssetResetHardContext>(0);
		}
		public AssetResetSoftContext assetResetSoft() {
			return GetRuleContext<AssetResetSoftContext>(0);
		}
		public AssetApplyContext assetApply() {
			return GetRuleContext<AssetApplyContext>(0);
		}
		public AssetListContext assetList() {
			return GetRuleContext<AssetListContext>(0);
		}
		public AssetQueryContext assetQuery() {
			return GetRuleContext<AssetQueryContext>(0);
		}
		public AssetCheckContext assetCheck() {
			return GetRuleContext<AssetCheckContext>(0);
		}
		public AssetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asset; } }
	}

	[RuleVersion(0)]
	public AssetContext asset() {
		AssetContext _localctx = new AssetContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_asset);
		try {
			State = 99;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 91; assetList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 92; assetQuery();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 93; assetRegister();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 94; assetUnregister();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 95; assetResetSoft();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 96; assetResetHard();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 97; assetApply();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 98; assetCheck();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetListContext : ParserRuleContext {
		public ITerminalNode AOList() { return GetToken(ConsoleParser.AOList, 0); }
		public ITerminalNode AOAll() { return GetToken(ConsoleParser.AOAll, 0); }
		public RangePointContext rangePoint() {
			return GetRuleContext<RangePointContext>(0);
		}
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AssetListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetList; } }
	}

	[RuleVersion(0)]
	public AssetListContext assetList() {
		AssetListContext _localctx = new AssetListContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_assetList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; Match(T__0);
			State = 103;
			_la = _input.La(1);
			if (_la==AOAll || _la==AOList) {
				{
				State = 102;
				_la = _input.La(1);
				if ( !(_la==AOAll || _la==AOList) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			State = 106;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__25) | (1L << T__29) | (1L << T__30) | (1L << RangeNull) | (1L << RangeAYear) | (1L << RangeAMonth) | (1L << RangeDeltaMonth) | (1L << RangeADay) | (1L << RangeDeltaDay) | (1L << RangeDeltaWeek))) != 0)) {
				{
				State = 105; rangePoint();
				}
			}

			State = 109;
			_la = _input.La(1);
			if (((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & ((1L << (Guid - 54)) | (1L << (DoubleQuotedString - 54)) | (1L << (SingleQuotedString - 54)))) != 0)) {
				{
				State = 108; aoQ();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetQueryContext : ParserRuleContext {
		public ITerminalNode AOQuery() { return GetToken(ConsoleParser.AOQuery, 0); }
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AssetQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetQuery; } }
	}

	[RuleVersion(0)]
	public AssetQueryContext assetQuery() {
		AssetQueryContext _localctx = new AssetQueryContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_assetQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; Match(T__0);
			State = 112; Match(AOQuery);
			State = 114;
			_la = _input.La(1);
			if (((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & ((1L << (Guid - 54)) | (1L << (DoubleQuotedString - 54)) | (1L << (SingleQuotedString - 54)))) != 0)) {
				{
				State = 113; aoQ();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetRegisterContext : ParserRuleContext {
		public VoucherQueryContext voucherQuery() {
			return GetRuleContext<VoucherQueryContext>(0);
		}
		public ITerminalNode AORegister() { return GetToken(ConsoleParser.AORegister, 0); }
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AssetRegisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetRegister; } }
	}

	[RuleVersion(0)]
	public AssetRegisterContext assetRegister() {
		AssetRegisterContext _localctx = new AssetRegisterContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_assetRegister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; Match(T__0);
			State = 117; Match(AORegister);
			State = 119;
			_la = _input.La(1);
			if (((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & ((1L << (Guid - 54)) | (1L << (DoubleQuotedString - 54)) | (1L << (SingleQuotedString - 54)))) != 0)) {
				{
				State = 118; aoQ();
				}
			}

			State = 123;
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 121; Match(T__1);
				State = 122; voucherQuery();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetUnregisterContext : ParserRuleContext {
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode AOUnregister() { return GetToken(ConsoleParser.AOUnregister, 0); }
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AssetUnregisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetUnregister; } }
	}

	[RuleVersion(0)]
	public AssetUnregisterContext assetUnregister() {
		AssetUnregisterContext _localctx = new AssetUnregisterContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_assetUnregister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125; Match(T__0);
			State = 126; Match(AOUnregister);
			State = 128;
			_la = _input.La(1);
			if (((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & ((1L << (Guid - 54)) | (1L << (DoubleQuotedString - 54)) | (1L << (SingleQuotedString - 54)))) != 0)) {
				{
				State = 127; aoQ();
				}
			}

			State = 131;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__21) | (1L << T__25) | (1L << T__26) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << RangeNull) | (1L << RangeAllNotNull) | (1L << RangeAYear) | (1L << RangeAMonth) | (1L << RangeDeltaMonth) | (1L << RangeADay) | (1L << RangeDeltaDay) | (1L << RangeDeltaWeek))) != 0)) {
				{
				State = 130; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetRedepContext : ParserRuleContext {
		public ITerminalNode ARedep() { return GetToken(ConsoleParser.ARedep, 0); }
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AssetRedepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetRedep; } }
	}

	[RuleVersion(0)]
	public AssetRedepContext assetRedep() {
		AssetRedepContext _localctx = new AssetRedepContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_assetRedep);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; Match(T__0);
			State = 134; Match(ARedep);
			State = 136;
			_la = _input.La(1);
			if (((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & ((1L << (Guid - 54)) | (1L << (DoubleQuotedString - 54)) | (1L << (SingleQuotedString - 54)))) != 0)) {
				{
				State = 135; aoQ();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetResetSoftContext : ParserRuleContext {
		public ITerminalNode AOResetSoft() { return GetToken(ConsoleParser.AOResetSoft, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AssetResetSoftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetResetSoft; } }
	}

	[RuleVersion(0)]
	public AssetResetSoftContext assetResetSoft() {
		AssetResetSoftContext _localctx = new AssetResetSoftContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_assetResetSoft);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; Match(T__0);
			State = 139; Match(AOResetSoft);
			State = 141;
			_la = _input.La(1);
			if (((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & ((1L << (Guid - 54)) | (1L << (DoubleQuotedString - 54)) | (1L << (SingleQuotedString - 54)))) != 0)) {
				{
				State = 140; aoQ();
				}
			}

			State = 144;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__21) | (1L << T__25) | (1L << T__26) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << RangeNull) | (1L << RangeAllNotNull) | (1L << RangeAYear) | (1L << RangeAMonth) | (1L << RangeDeltaMonth) | (1L << RangeADay) | (1L << RangeDeltaDay) | (1L << RangeDeltaWeek))) != 0)) {
				{
				State = 143; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetResetHardContext : ParserRuleContext {
		public VoucherQueryContext voucherQuery() {
			return GetRuleContext<VoucherQueryContext>(0);
		}
		public ITerminalNode AOResetHard() { return GetToken(ConsoleParser.AOResetHard, 0); }
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AssetResetHardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetResetHard; } }
	}

	[RuleVersion(0)]
	public AssetResetHardContext assetResetHard() {
		AssetResetHardContext _localctx = new AssetResetHardContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_assetResetHard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; Match(T__0);
			State = 147; Match(AOResetHard);
			State = 149;
			_la = _input.La(1);
			if (((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & ((1L << (Guid - 54)) | (1L << (DoubleQuotedString - 54)) | (1L << (SingleQuotedString - 54)))) != 0)) {
				{
				State = 148; aoQ();
				}
			}

			State = 153;
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 151; Match(T__1);
				State = 152; voucherQuery();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetApplyContext : ParserRuleContext {
		public ITerminalNode AOCollapse() { return GetToken(ConsoleParser.AOCollapse, 0); }
		public ITerminalNode AOApply() { return GetToken(ConsoleParser.AOApply, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AssetApplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetApply; } }
	}

	[RuleVersion(0)]
	public AssetApplyContext assetApply() {
		AssetApplyContext _localctx = new AssetApplyContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_assetApply);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; Match(T__0);
			State = 156; Match(AOApply);
			State = 158;
			_la = _input.La(1);
			if (_la==AOCollapse) {
				{
				State = 157; Match(AOCollapse);
				}
			}

			State = 161;
			_la = _input.La(1);
			if (((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & ((1L << (Guid - 54)) | (1L << (DoubleQuotedString - 54)) | (1L << (SingleQuotedString - 54)))) != 0)) {
				{
				State = 160; aoQ();
				}
			}

			State = 164;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__21) | (1L << T__25) | (1L << T__26) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << RangeNull) | (1L << RangeAllNotNull) | (1L << RangeAYear) | (1L << RangeAMonth) | (1L << RangeDeltaMonth) | (1L << RangeADay) | (1L << RangeDeltaDay) | (1L << RangeDeltaWeek))) != 0)) {
				{
				State = 163; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetCheckContext : ParserRuleContext {
		public ITerminalNode AOCheck() { return GetToken(ConsoleParser.AOCheck, 0); }
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AssetCheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetCheck; } }
	}

	[RuleVersion(0)]
	public AssetCheckContext assetCheck() {
		AssetCheckContext _localctx = new AssetCheckContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_assetCheck);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166; Match(T__0);
			State = 167; Match(AOCheck);
			State = 169;
			_la = _input.La(1);
			if (((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & ((1L << (Guid - 54)) | (1L << (DoubleQuotedString - 54)) | (1L << (SingleQuotedString - 54)))) != 0)) {
				{
				State = 168; aoQ();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortContext : ParserRuleContext {
		public AmortQueryContext amortQuery() {
			return GetRuleContext<AmortQueryContext>(0);
		}
		public AmortCheckContext amortCheck() {
			return GetRuleContext<AmortCheckContext>(0);
		}
		public AmortResetSoftContext amortResetSoft() {
			return GetRuleContext<AmortResetSoftContext>(0);
		}
		public AmortRegisterContext amortRegister() {
			return GetRuleContext<AmortRegisterContext>(0);
		}
		public AmortUnregisterContext amortUnregister() {
			return GetRuleContext<AmortUnregisterContext>(0);
		}
		public AmortApplyContext amortApply() {
			return GetRuleContext<AmortApplyContext>(0);
		}
		public AmortListContext amortList() {
			return GetRuleContext<AmortListContext>(0);
		}
		public AmortResetHardContext amortResetHard() {
			return GetRuleContext<AmortResetHardContext>(0);
		}
		public AmortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amort; } }
	}

	[RuleVersion(0)]
	public AmortContext amort() {
		AmortContext _localctx = new AmortContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_amort);
		try {
			State = 179;
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 171; amortList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 172; amortQuery();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 173; amortRegister();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 174; amortUnregister();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 175; amortResetSoft();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 176; amortResetHard();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 177; amortApply();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 178; amortCheck();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortListContext : ParserRuleContext {
		public ITerminalNode AOList() { return GetToken(ConsoleParser.AOList, 0); }
		public ITerminalNode AOAll() { return GetToken(ConsoleParser.AOAll, 0); }
		public RangePointContext rangePoint() {
			return GetRuleContext<RangePointContext>(0);
		}
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AmortListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortList; } }
	}

	[RuleVersion(0)]
	public AmortListContext amortList() {
		AmortListContext _localctx = new AmortListContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_amortList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181; Match(T__2);
			State = 183;
			_la = _input.La(1);
			if (_la==AOAll || _la==AOList) {
				{
				State = 182;
				_la = _input.La(1);
				if ( !(_la==AOAll || _la==AOList) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			State = 186;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__25) | (1L << T__29) | (1L << T__30) | (1L << RangeNull) | (1L << RangeAYear) | (1L << RangeAMonth) | (1L << RangeDeltaMonth) | (1L << RangeADay) | (1L << RangeDeltaDay) | (1L << RangeDeltaWeek))) != 0)) {
				{
				State = 185; rangePoint();
				}
			}

			State = 189;
			_la = _input.La(1);
			if (((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & ((1L << (Guid - 54)) | (1L << (DoubleQuotedString - 54)) | (1L << (SingleQuotedString - 54)))) != 0)) {
				{
				State = 188; aoQ();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortQueryContext : ParserRuleContext {
		public ITerminalNode AOQuery() { return GetToken(ConsoleParser.AOQuery, 0); }
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AmortQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortQuery; } }
	}

	[RuleVersion(0)]
	public AmortQueryContext amortQuery() {
		AmortQueryContext _localctx = new AmortQueryContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_amortQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; Match(T__2);
			State = 192; Match(AOQuery);
			State = 194;
			_la = _input.La(1);
			if (((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & ((1L << (Guid - 54)) | (1L << (DoubleQuotedString - 54)) | (1L << (SingleQuotedString - 54)))) != 0)) {
				{
				State = 193; aoQ();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortRegisterContext : ParserRuleContext {
		public VoucherQueryContext voucherQuery() {
			return GetRuleContext<VoucherQueryContext>(0);
		}
		public ITerminalNode AORegister() { return GetToken(ConsoleParser.AORegister, 0); }
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AmortRegisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortRegister; } }
	}

	[RuleVersion(0)]
	public AmortRegisterContext amortRegister() {
		AmortRegisterContext _localctx = new AmortRegisterContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_amortRegister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; Match(T__2);
			State = 197; Match(AORegister);
			State = 199;
			_la = _input.La(1);
			if (((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & ((1L << (Guid - 54)) | (1L << (DoubleQuotedString - 54)) | (1L << (SingleQuotedString - 54)))) != 0)) {
				{
				State = 198; aoQ();
				}
			}

			State = 203;
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 201; Match(T__1);
				State = 202; voucherQuery();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortUnregisterContext : ParserRuleContext {
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode AOUnregister() { return GetToken(ConsoleParser.AOUnregister, 0); }
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AmortUnregisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortUnregister; } }
	}

	[RuleVersion(0)]
	public AmortUnregisterContext amortUnregister() {
		AmortUnregisterContext _localctx = new AmortUnregisterContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_amortUnregister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205; Match(T__2);
			State = 206; Match(AOUnregister);
			State = 208;
			_la = _input.La(1);
			if (((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & ((1L << (Guid - 54)) | (1L << (DoubleQuotedString - 54)) | (1L << (SingleQuotedString - 54)))) != 0)) {
				{
				State = 207; aoQ();
				}
			}

			State = 211;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__21) | (1L << T__25) | (1L << T__26) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << RangeNull) | (1L << RangeAllNotNull) | (1L << RangeAYear) | (1L << RangeAMonth) | (1L << RangeDeltaMonth) | (1L << RangeADay) | (1L << RangeDeltaDay) | (1L << RangeDeltaWeek))) != 0)) {
				{
				State = 210; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortReamoContext : ParserRuleContext {
		public ITerminalNode OReamo() { return GetToken(ConsoleParser.OReamo, 0); }
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AmortReamoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortReamo; } }
	}

	[RuleVersion(0)]
	public AmortReamoContext amortReamo() {
		AmortReamoContext _localctx = new AmortReamoContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_amortReamo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213; Match(T__2);
			State = 214; Match(OReamo);
			State = 216;
			_la = _input.La(1);
			if (((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & ((1L << (Guid - 54)) | (1L << (DoubleQuotedString - 54)) | (1L << (SingleQuotedString - 54)))) != 0)) {
				{
				State = 215; aoQ();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortResetSoftContext : ParserRuleContext {
		public ITerminalNode AOResetSoft() { return GetToken(ConsoleParser.AOResetSoft, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AmortResetSoftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortResetSoft; } }
	}

	[RuleVersion(0)]
	public AmortResetSoftContext amortResetSoft() {
		AmortResetSoftContext _localctx = new AmortResetSoftContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_amortResetSoft);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218; Match(T__2);
			State = 219; Match(AOResetSoft);
			State = 221;
			_la = _input.La(1);
			if (((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & ((1L << (Guid - 54)) | (1L << (DoubleQuotedString - 54)) | (1L << (SingleQuotedString - 54)))) != 0)) {
				{
				State = 220; aoQ();
				}
			}

			State = 224;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__21) | (1L << T__25) | (1L << T__26) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << RangeNull) | (1L << RangeAllNotNull) | (1L << RangeAYear) | (1L << RangeAMonth) | (1L << RangeDeltaMonth) | (1L << RangeADay) | (1L << RangeDeltaDay) | (1L << RangeDeltaWeek))) != 0)) {
				{
				State = 223; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortResetHardContext : ParserRuleContext {
		public VoucherQueryContext voucherQuery() {
			return GetRuleContext<VoucherQueryContext>(0);
		}
		public ITerminalNode AOResetHard() { return GetToken(ConsoleParser.AOResetHard, 0); }
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AmortResetHardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortResetHard; } }
	}

	[RuleVersion(0)]
	public AmortResetHardContext amortResetHard() {
		AmortResetHardContext _localctx = new AmortResetHardContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_amortResetHard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226; Match(T__2);
			State = 227; Match(AOResetHard);
			State = 229;
			_la = _input.La(1);
			if (((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & ((1L << (Guid - 54)) | (1L << (DoubleQuotedString - 54)) | (1L << (SingleQuotedString - 54)))) != 0)) {
				{
				State = 228; aoQ();
				}
			}

			State = 233;
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 231; Match(T__1);
				State = 232; voucherQuery();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortApplyContext : ParserRuleContext {
		public ITerminalNode AOCollapse() { return GetToken(ConsoleParser.AOCollapse, 0); }
		public ITerminalNode AOApply() { return GetToken(ConsoleParser.AOApply, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AmortApplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortApply; } }
	}

	[RuleVersion(0)]
	public AmortApplyContext amortApply() {
		AmortApplyContext _localctx = new AmortApplyContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_amortApply);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235; Match(T__2);
			State = 236; Match(AOApply);
			State = 238;
			_la = _input.La(1);
			if (_la==AOCollapse) {
				{
				State = 237; Match(AOCollapse);
				}
			}

			State = 241;
			_la = _input.La(1);
			if (((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & ((1L << (Guid - 54)) | (1L << (DoubleQuotedString - 54)) | (1L << (SingleQuotedString - 54)))) != 0)) {
				{
				State = 240; aoQ();
				}
			}

			State = 244;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__21) | (1L << T__25) | (1L << T__26) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << RangeNull) | (1L << RangeAllNotNull) | (1L << RangeAYear) | (1L << RangeAMonth) | (1L << RangeDeltaMonth) | (1L << RangeADay) | (1L << RangeDeltaDay) | (1L << RangeDeltaWeek))) != 0)) {
				{
				State = 243; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortCheckContext : ParserRuleContext {
		public ITerminalNode AOCheck() { return GetToken(ConsoleParser.AOCheck, 0); }
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AmortCheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortCheck; } }
	}

	[RuleVersion(0)]
	public AmortCheckContext amortCheck() {
		AmortCheckContext _localctx = new AmortCheckContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_amortCheck);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246; Match(T__2);
			State = 247; Match(AOCheck);
			State = 249;
			_la = _input.La(1);
			if (((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & ((1L << (Guid - 54)) | (1L << (DoubleQuotedString - 54)) | (1L << (SingleQuotedString - 54)))) != 0)) {
				{
				State = 248; aoQ();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AoQContext : ParserRuleContext {
		public IReadOnlyList<AoQAtomContext> aoQAtom() {
			return GetRuleContexts<AoQAtomContext>();
		}
		public AoQAtomContext aoQAtom(int i) {
			return GetRuleContext<AoQAtomContext>(i);
		}
		public AoQContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aoQ; } }
	}

	[RuleVersion(0)]
	public AoQContext aoQ() {
		AoQContext _localctx = new AoQContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_aoQ);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251; aoQAtom();
			State = 256;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__3) {
				{
				{
				State = 252; Match(T__3);
				State = 253; aoQAtom();
				}
				}
				State = 258;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AoQAtomContext : ParserRuleContext {
		public ITerminalNode DoubleQuotedString() { return GetToken(ConsoleParser.DoubleQuotedString, 0); }
		public ITerminalNode Guid() { return GetToken(ConsoleParser.Guid, 0); }
		public ITerminalNode SingleQuotedString() { return GetToken(ConsoleParser.SingleQuotedString, 0); }
		public AoQAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aoQAtom; } }
	}

	[RuleVersion(0)]
	public AoQAtomContext aoQAtom() {
		AoQAtomContext _localctx = new AoQAtomContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_aoQAtom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			_la = _input.La(1);
			if ( !(((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & ((1L << (Guid - 54)) | (1L << (DoubleQuotedString - 54)) | (1L << (SingleQuotedString - 54)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupedQueryContext : ParserRuleContext {
		public VoucherQueryContext voucherQuery() {
			return GetRuleContext<VoucherQueryContext>(0);
		}
		public SubtotalContext subtotal() {
			return GetRuleContext<SubtotalContext>(0);
		}
		public GroupedQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupedQuery; } }
	}

	[RuleVersion(0)]
	public GroupedQueryContext groupedQuery() {
		GroupedQueryContext _localctx = new GroupedQueryContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_groupedQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261; voucherQuery();
			State = 262; subtotal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtotalContext : ParserRuleContext {
		public IToken SubtotalMark;
		public IToken SubtotalFields;
		public IToken AggregationMethod;
		public SubtotalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtotal; } }
	}

	[RuleVersion(0)]
	public SubtotalContext subtotal() {
		SubtotalContext _localctx = new SubtotalContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_subtotal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			_localctx.SubtotalMark = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7))) != 0)) ) {
				_localctx.SubtotalMark = _errHandler.RecoverInline(this);
			}
			Consume();
			State = 268;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17))) != 0)) {
				{
				{
				State = 265;
				_localctx.SubtotalFields = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17))) != 0)) ) {
					_localctx.SubtotalFields = _errHandler.RecoverInline(this);
				}
				Consume();
				}
				}
				State = 270;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 272;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__18) | (1L << T__19) | (1L << T__20))) != 0)) {
				{
				State = 271;
				_localctx.AggregationMethod = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__18) | (1L << T__19) | (1L << T__20))) != 0)) ) {
					_localctx.AggregationMethod = _errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoucherQueryContext : ParserRuleContext {
		public DetailsContext details() {
			return GetRuleContext<DetailsContext>(0);
		}
		public ITerminalNode VoucherRemark() { return GetToken(ConsoleParser.VoucherRemark, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public VoucherQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voucherQuery; } }
	}

	[RuleVersion(0)]
	public VoucherQueryContext voucherQuery() {
		VoucherQueryContext _localctx = new VoucherQueryContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_voucherQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			switch ( Interpreter.AdaptivePredict(_input,40,_ctx) ) {
			case 1:
				{
				State = 274; details();
				}
				break;
			}
			State = 278;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__21) | (1L << T__25) | (1L << T__26) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << RangeNull) | (1L << RangeAllNotNull) | (1L << RangeAYear) | (1L << RangeAMonth) | (1L << RangeDeltaMonth) | (1L << RangeADay) | (1L << RangeDeltaDay) | (1L << RangeDeltaWeek))) != 0)) {
				{
				State = 277; range();
				}
			}

			State = 281;
			_la = _input.La(1);
			if (_la==VoucherRemark) {
				{
				State = 280; Match(VoucherRemark);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DetailsContext : ParserRuleContext {
		public IToken Op;
		public IReadOnlyList<DetailsXContext> detailsX() {
			return GetRuleContexts<DetailsXContext>();
		}
		public DetailsXContext detailsX(int i) {
			return GetRuleContext<DetailsXContext>(i);
		}
		public DetailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_details; } }
	}

	[RuleVersion(0)]
	public DetailsContext details() {
		DetailsContext _localctx = new DetailsContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_details);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 283; detailsX();
			State = 288;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,43,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 284;
					_localctx.Op = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==T__3 || _la==T__21) ) {
						_localctx.Op = _errHandler.RecoverInline(this);
					}
					Consume();
					State = 285; detailsX();
					}
					} 
				}
				State = 290;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,43,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DetailsXContext : ParserRuleContext {
		public IToken Op;
		public DetailAtomContext detailAtom(int i) {
			return GetRuleContext<DetailAtomContext>(i);
		}
		public IReadOnlyList<DetailAtomContext> detailAtom() {
			return GetRuleContexts<DetailAtomContext>();
		}
		public DetailsXContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_detailsX; } }
	}

	[RuleVersion(0)]
	public DetailsXContext detailsX() {
		DetailsXContext _localctx = new DetailsXContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_detailsX);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291; detailAtom();
			State = 296;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__22) {
				{
				{
				State = 292; _localctx.Op = Match(T__22);
				State = 293; detailAtom();
				}
				}
				State = 298;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DetailAtomContext : ParserRuleContext {
		public DetailsContext details() {
			return GetRuleContext<DetailsContext>(0);
		}
		public DetailUnaryContext detailUnary() {
			return GetRuleContext<DetailUnaryContext>(0);
		}
		public DetailAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_detailAtom; } }
	}

	[RuleVersion(0)]
	public DetailAtomContext detailAtom() {
		DetailAtomContext _localctx = new DetailAtomContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_detailAtom);
		try {
			State = 304;
			switch (_input.La(1)) {
			case T__23:
				EnterOuterAlt(_localctx, 1);
				{
				State = 299; Match(T__23);
				State = 300; details();
				State = 301; Match(T__24);
				}
				break;
			case Eof:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__10:
			case T__12:
			case T__21:
			case T__22:
			case T__24:
			case T__25:
			case T__26:
			case T__28:
			case T__29:
			case T__30:
			case RangeNull:
			case RangeAllNotNull:
			case RangeAYear:
			case RangeAMonth:
			case RangeDeltaMonth:
			case RangeADay:
			case RangeDeltaDay:
			case RangeDeltaWeek:
			case VoucherRemark:
			case DoubleQuotedString:
			case SingleQuotedString:
			case DetailTitle:
			case DetailTitleSubTitle:
				EnterOuterAlt(_localctx, 2);
				{
				State = 303; detailUnary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DetailUnaryContext : ParserRuleContext {
		public IToken Op;
		public DetailQueryContext detailQuery() {
			return GetRuleContext<DetailQueryContext>(0);
		}
		public DetailUnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_detailUnary; } }
	}

	[RuleVersion(0)]
	public DetailUnaryContext detailUnary() {
		DetailUnaryContext _localctx = new DetailUnaryContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_detailUnary);
		try {
			State = 309;
			switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 306; _localctx.Op = Match(T__21);
				State = 307; detailQuery();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 308; detailQuery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DetailQueryContext : ParserRuleContext {
		public IToken Direction;
		public ITerminalNode DetailTitleSubTitle() { return GetToken(ConsoleParser.DetailTitleSubTitle, 0); }
		public ITerminalNode DoubleQuotedString() { return GetToken(ConsoleParser.DoubleQuotedString, 0); }
		public ITerminalNode SingleQuotedString() { return GetToken(ConsoleParser.SingleQuotedString, 0); }
		public ITerminalNode DetailTitle() { return GetToken(ConsoleParser.DetailTitle, 0); }
		public DetailQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_detailQuery; } }
	}

	[RuleVersion(0)]
	public DetailQueryContext detailQuery() {
		DetailQueryContext _localctx = new DetailQueryContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_detailQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			_la = _input.La(1);
			if (_la==DetailTitle || _la==DetailTitleSubTitle) {
				{
				State = 311;
				_la = _input.La(1);
				if ( !(_la==DetailTitle || _la==DetailTitleSubTitle) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			State = 315;
			_la = _input.La(1);
			if (_la==SingleQuotedString) {
				{
				State = 314; Match(SingleQuotedString);
				}
			}

			State = 318;
			_la = _input.La(1);
			if (_la==DoubleQuotedString) {
				{
				State = 317; Match(DoubleQuotedString);
				}
			}

			State = 321;
			_la = _input.La(1);
			if (_la==T__10 || _la==T__12) {
				{
				State = 320;
				_localctx.Direction = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__10 || _la==T__12) ) {
					_localctx.Direction = _errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public RangeCoreContext Core;
		public RangeCoreContext rangeCore() {
			return GetRuleContext<RangeCoreContext>(0);
		}
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_range);
		try {
			State = 329;
			switch (_input.La(1)) {
			case T__25:
				EnterOuterAlt(_localctx, 1);
				{
				State = 323; Match(T__25);
				}
				break;
			case T__21:
			case T__28:
			case T__29:
			case T__30:
			case RangeNull:
			case RangeAllNotNull:
			case RangeAYear:
			case RangeAMonth:
			case RangeDeltaMonth:
			case RangeADay:
			case RangeDeltaDay:
			case RangeDeltaWeek:
				EnterOuterAlt(_localctx, 2);
				{
				State = 324; _localctx.Core = rangeCore();
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 3);
				{
				State = 325; Match(T__26);
				State = 326; _localctx.Core = rangeCore();
				State = 327; Match(T__27);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeCoreContext : ParserRuleContext {
		public RangeCertainPointContext Begin;
		public RangeCertainPointContext End;
		public IToken Op;
		public RangeCertainPointContext Certain;
		public ITerminalNode RangeNull() { return GetToken(ConsoleParser.RangeNull, 0); }
		public RangeCertainPointContext rangeCertainPoint(int i) {
			return GetRuleContext<RangeCertainPointContext>(i);
		}
		public ITerminalNode RangeAllNotNull() { return GetToken(ConsoleParser.RangeAllNotNull, 0); }
		public IReadOnlyList<RangeCertainPointContext> rangeCertainPoint() {
			return GetRuleContexts<RangeCertainPointContext>();
		}
		public RangeCoreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeCore; } }
	}

	[RuleVersion(0)]
	public RangeCoreContext rangeCore() {
		RangeCoreContext _localctx = new RangeCoreContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_rangeCore);
		int _la;
		try {
			State = 341;
			switch ( Interpreter.AdaptivePredict(_input,53,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 331; Match(RangeNull);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 332; Match(RangeAllNotNull);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 333; _localctx.Begin = rangeCertainPoint();
				State = 334;
				_la = _input.La(1);
				if ( !(_la==T__21 || _la==T__28) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 336;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__29) | (1L << T__30) | (1L << RangeAYear) | (1L << RangeAMonth) | (1L << RangeDeltaMonth) | (1L << RangeADay) | (1L << RangeDeltaDay) | (1L << RangeDeltaWeek))) != 0)) {
					{
					State = 335; _localctx.End = rangeCertainPoint();
					}
				}

				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 338;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__21 || _la==T__28) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 339; _localctx.End = rangeCertainPoint();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 340; _localctx.Certain = rangeCertainPoint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangePointContext : ParserRuleContext {
		public IToken All;
		public ITerminalNode RangeNull() { return GetToken(ConsoleParser.RangeNull, 0); }
		public RangeCertainPointContext rangeCertainPoint() {
			return GetRuleContext<RangeCertainPointContext>(0);
		}
		public RangePointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangePoint; } }
	}

	[RuleVersion(0)]
	public RangePointContext rangePoint() {
		RangePointContext _localctx = new RangePointContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_rangePoint);
		try {
			State = 346;
			switch (_input.La(1)) {
			case RangeNull:
				EnterOuterAlt(_localctx, 1);
				{
				State = 343; Match(RangeNull);
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 2);
				{
				State = 344; _localctx.All = Match(T__25);
				}
				break;
			case T__29:
			case T__30:
			case RangeAYear:
			case RangeAMonth:
			case RangeDeltaMonth:
			case RangeADay:
			case RangeDeltaDay:
			case RangeDeltaWeek:
				EnterOuterAlt(_localctx, 3);
				{
				State = 345; rangeCertainPoint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeCertainPointContext : ParserRuleContext {
		public RangeWeekContext rangeWeek() {
			return GetRuleContext<RangeWeekContext>(0);
		}
		public RangeYearContext rangeYear() {
			return GetRuleContext<RangeYearContext>(0);
		}
		public RangeMonthContext rangeMonth() {
			return GetRuleContext<RangeMonthContext>(0);
		}
		public RangeDayContext rangeDay() {
			return GetRuleContext<RangeDayContext>(0);
		}
		public RangeCertainPointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeCertainPoint; } }
	}

	[RuleVersion(0)]
	public RangeCertainPointContext rangeCertainPoint() {
		RangeCertainPointContext _localctx = new RangeCertainPointContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_rangeCertainPoint);
		try {
			State = 352;
			switch (_input.La(1)) {
			case RangeAYear:
				EnterOuterAlt(_localctx, 1);
				{
				State = 348; rangeYear();
				}
				break;
			case T__29:
			case T__30:
			case RangeAMonth:
			case RangeDeltaMonth:
				EnterOuterAlt(_localctx, 2);
				{
				State = 349; rangeMonth();
				}
				break;
			case RangeDeltaWeek:
				EnterOuterAlt(_localctx, 3);
				{
				State = 350; rangeWeek();
				}
				break;
			case RangeADay:
			case RangeDeltaDay:
				EnterOuterAlt(_localctx, 4);
				{
				State = 351; rangeDay();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeYearContext : ParserRuleContext {
		public ITerminalNode RangeAYear() { return GetToken(ConsoleParser.RangeAYear, 0); }
		public RangeYearContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeYear; } }
	}

	[RuleVersion(0)]
	public RangeYearContext rangeYear() {
		RangeYearContext _localctx = new RangeYearContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_rangeYear);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354; Match(RangeAYear);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeMonthContext : ParserRuleContext {
		public IToken Modifier;
		public ITerminalNode RangeDeltaMonth() { return GetToken(ConsoleParser.RangeDeltaMonth, 0); }
		public ITerminalNode RangeAMonth() { return GetToken(ConsoleParser.RangeAMonth, 0); }
		public RangeMonthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeMonth; } }
	}

	[RuleVersion(0)]
	public RangeMonthContext rangeMonth() {
		RangeMonthContext _localctx = new RangeMonthContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_rangeMonth);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357;
			_la = _input.La(1);
			if (_la==T__29 || _la==T__30) {
				{
				State = 356;
				_localctx.Modifier = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__29 || _la==T__30) ) {
					_localctx.Modifier = _errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			State = 359;
			_la = _input.La(1);
			if ( !(_la==RangeAMonth || _la==RangeDeltaMonth) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeWeekContext : ParserRuleContext {
		public ITerminalNode RangeDeltaWeek() { return GetToken(ConsoleParser.RangeDeltaWeek, 0); }
		public RangeWeekContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeWeek; } }
	}

	[RuleVersion(0)]
	public RangeWeekContext rangeWeek() {
		RangeWeekContext _localctx = new RangeWeekContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_rangeWeek);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361; Match(RangeDeltaWeek);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeDayContext : ParserRuleContext {
		public ITerminalNode RangeADay() { return GetToken(ConsoleParser.RangeADay, 0); }
		public ITerminalNode RangeDeltaDay() { return GetToken(ConsoleParser.RangeDeltaDay, 0); }
		public RangeDayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeDay; } }
	}

	[RuleVersion(0)]
	public RangeDayContext rangeDay() {
		RangeDayContext _localctx = new RangeDayContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_rangeDay);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363;
			_la = _input.La(1);
			if ( !(_la==RangeADay || _la==RangeDeltaDay) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x46\x170\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x3\x2"+
		"\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2X\n\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x66\n\x4\x3\x5\x3\x5\x5"+
		"\x5j\n\x5\x3\x5\x5\x5m\n\x5\x3\x5\x5\x5p\n\x5\x3\x6\x3\x6\x3\x6\x5\x6"+
		"u\n\x6\x3\a\x3\a\x3\a\x5\az\n\a\x3\a\x3\a\x5\a~\n\a\x3\b\x3\b\x3\b\x5"+
		"\b\x83\n\b\x3\b\x5\b\x86\n\b\x3\t\x3\t\x3\t\x5\t\x8B\n\t\x3\n\x3\n\x3"+
		"\n\x5\n\x90\n\n\x3\n\x5\n\x93\n\n\x3\v\x3\v\x3\v\x5\v\x98\n\v\x3\v\x3"+
		"\v\x5\v\x9C\n\v\x3\f\x3\f\x3\f\x5\f\xA1\n\f\x3\f\x5\f\xA4\n\f\x3\f\x5"+
		"\f\xA7\n\f\x3\r\x3\r\x3\r\x5\r\xAC\n\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x5\xE\xB6\n\xE\x3\xF\x3\xF\x5\xF\xBA\n\xF\x3\xF\x5\xF"+
		"\xBD\n\xF\x3\xF\x5\xF\xC0\n\xF\x3\x10\x3\x10\x3\x10\x5\x10\xC5\n\x10\x3"+
		"\x11\x3\x11\x3\x11\x5\x11\xCA\n\x11\x3\x11\x3\x11\x5\x11\xCE\n\x11\x3"+
		"\x12\x3\x12\x3\x12\x5\x12\xD3\n\x12\x3\x12\x5\x12\xD6\n\x12\x3\x13\x3"+
		"\x13\x3\x13\x5\x13\xDB\n\x13\x3\x14\x3\x14\x3\x14\x5\x14\xE0\n\x14\x3"+
		"\x14\x5\x14\xE3\n\x14\x3\x15\x3\x15\x3\x15\x5\x15\xE8\n\x15\x3\x15\x3"+
		"\x15\x5\x15\xEC\n\x15\x3\x16\x3\x16\x3\x16\x5\x16\xF1\n\x16\x3\x16\x5"+
		"\x16\xF4\n\x16\x3\x16\x5\x16\xF7\n\x16\x3\x17\x3\x17\x3\x17\x5\x17\xFC"+
		"\n\x17\x3\x18\x3\x18\x3\x18\a\x18\x101\n\x18\f\x18\xE\x18\x104\v\x18\x3"+
		"\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\a\x1B\x10D\n\x1B\f\x1B"+
		"\xE\x1B\x110\v\x1B\x3\x1B\x5\x1B\x113\n\x1B\x3\x1C\x5\x1C\x116\n\x1C\x3"+
		"\x1C\x5\x1C\x119\n\x1C\x3\x1C\x5\x1C\x11C\n\x1C\x3\x1D\x3\x1D\x3\x1D\a"+
		"\x1D\x121\n\x1D\f\x1D\xE\x1D\x124\v\x1D\x3\x1E\x3\x1E\x3\x1E\a\x1E\x129"+
		"\n\x1E\f\x1E\xE\x1E\x12C\v\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F"+
		"\x133\n\x1F\x3 \x3 \x3 \x5 \x138\n \x3!\x5!\x13B\n!\x3!\x5!\x13E\n!\x3"+
		"!\x5!\x141\n!\x3!\x5!\x144\n!\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x5\"\x14C"+
		"\n\"\x3#\x3#\x3#\x3#\x3#\x5#\x153\n#\x3#\x3#\x3#\x5#\x158\n#\x3$\x3$\x3"+
		"$\x5$\x15D\n$\x3%\x3%\x3%\x3%\x5%\x163\n%\x3&\x3&\x3\'\x5\'\x168\n\'\x3"+
		"\'\x3\'\x3(\x3(\x3)\x3)\x3)\x2\x2\x2*\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2"+
		"\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2"+
		"$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2"+
		"@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2\x2\xF\x3\x2\"+\x3\x2,-\x4"+
		"\x2\x38\x38\x42\x43\x3\x2\a\n\x3\x2\v\x14\x3\x2\x15\x17\x4\x2\x6\x6\x18"+
		"\x18\x3\x2\x44\x45\x4\x2\r\r\xF\xF\x4\x2\x18\x18\x1F\x1F\x3\x2 !\x3\x2"+
		"<=\x3\x2>?\x196\x2W\x3\x2\x2\x2\x4[\x3\x2\x2\x2\x6\x65\x3\x2\x2\x2\bg"+
		"\x3\x2\x2\x2\nq\x3\x2\x2\x2\fv\x3\x2\x2\x2\xE\x7F\x3\x2\x2\x2\x10\x87"+
		"\x3\x2\x2\x2\x12\x8C\x3\x2\x2\x2\x14\x94\x3\x2\x2\x2\x16\x9D\x3\x2\x2"+
		"\x2\x18\xA8\x3\x2\x2\x2\x1A\xB5\x3\x2\x2\x2\x1C\xB7\x3\x2\x2\x2\x1E\xC1"+
		"\x3\x2\x2\x2 \xC6\x3\x2\x2\x2\"\xCF\x3\x2\x2\x2$\xD7\x3\x2\x2\x2&\xDC"+
		"\x3\x2\x2\x2(\xE4\x3\x2\x2\x2*\xED\x3\x2\x2\x2,\xF8\x3\x2\x2\x2.\xFD\x3"+
		"\x2\x2\x2\x30\x105\x3\x2\x2\x2\x32\x107\x3\x2\x2\x2\x34\x10A\x3\x2\x2"+
		"\x2\x36\x115\x3\x2\x2\x2\x38\x11D\x3\x2\x2\x2:\x125\x3\x2\x2\x2<\x132"+
		"\x3\x2\x2\x2>\x137\x3\x2\x2\x2@\x13A\x3\x2\x2\x2\x42\x14B\x3\x2\x2\x2"+
		"\x44\x157\x3\x2\x2\x2\x46\x15C\x3\x2\x2\x2H\x162\x3\x2\x2\x2J\x164\x3"+
		"\x2\x2\x2L\x167\x3\x2\x2\x2N\x16B\x3\x2\x2\x2P\x16D\x3\x2\x2\x2RX\x5\x36"+
		"\x1C\x2SX\x5\x32\x1A\x2TX\x5\x6\x4\x2UX\x5\x1A\xE\x2VX\x5\x4\x3\x2WR\x3"+
		"\x2\x2\x2WS\x3\x2\x2\x2WT\x3\x2\x2\x2WU\x3\x2\x2\x2WV\x3\x2\x2\x2XY\x3"+
		"\x2\x2\x2YZ\a\x2\x2\x3Z\x3\x3\x2\x2\x2[\\\t\x2\x2\x2\\\x5\x3\x2\x2\x2"+
		"]\x66\x5\b\x5\x2^\x66\x5\n\x6\x2_\x66\x5\f\a\x2`\x66\x5\xE\b\x2\x61\x66"+
		"\x5\x12\n\x2\x62\x66\x5\x14\v\x2\x63\x66\x5\x16\f\x2\x64\x66\x5\x18\r"+
		"\x2\x65]\x3\x2\x2\x2\x65^\x3\x2\x2\x2\x65_\x3\x2\x2\x2\x65`\x3\x2\x2\x2"+
		"\x65\x61\x3\x2\x2\x2\x65\x62\x3\x2\x2\x2\x65\x63\x3\x2\x2\x2\x65\x64\x3"+
		"\x2\x2\x2\x66\a\x3\x2\x2\x2gi\a\x3\x2\x2hj\t\x3\x2\x2ih\x3\x2\x2\x2ij"+
		"\x3\x2\x2\x2jl\x3\x2\x2\x2km\x5\x46$\x2lk\x3\x2\x2\x2lm\x3\x2\x2\x2mo"+
		"\x3\x2\x2\x2np\x5.\x18\x2on\x3\x2\x2\x2op\x3\x2\x2\x2p\t\x3\x2\x2\x2q"+
		"r\a\x3\x2\x2rt\a.\x2\x2su\x5.\x18\x2ts\x3\x2\x2\x2tu\x3\x2\x2\x2u\v\x3"+
		"\x2\x2\x2vw\a\x3\x2\x2wy\a/\x2\x2xz\x5.\x18\x2yx\x3\x2\x2\x2yz\x3\x2\x2"+
		"\x2z}\x3\x2\x2\x2{|\a\x4\x2\x2|~\x5\x36\x1C\x2}{\x3\x2\x2\x2}~\x3\x2\x2"+
		"\x2~\r\x3\x2\x2\x2\x7F\x80\a\x3\x2\x2\x80\x82\a\x30\x2\x2\x81\x83\x5."+
		"\x18\x2\x82\x81\x3\x2\x2\x2\x82\x83\x3\x2\x2\x2\x83\x85\x3\x2\x2\x2\x84"+
		"\x86\x5\x42\"\x2\x85\x84\x3\x2\x2\x2\x85\x86\x3\x2\x2\x2\x86\xF\x3\x2"+
		"\x2\x2\x87\x88\a\x3\x2\x2\x88\x8A\a\x31\x2\x2\x89\x8B\x5.\x18\x2\x8A\x89"+
		"\x3\x2\x2\x2\x8A\x8B\x3\x2\x2\x2\x8B\x11\x3\x2\x2\x2\x8C\x8D\a\x3\x2\x2"+
		"\x8D\x8F\a\x33\x2\x2\x8E\x90\x5.\x18\x2\x8F\x8E\x3\x2\x2\x2\x8F\x90\x3"+
		"\x2\x2\x2\x90\x92\x3\x2\x2\x2\x91\x93\x5\x42\"\x2\x92\x91\x3\x2\x2\x2"+
		"\x92\x93\x3\x2\x2\x2\x93\x13\x3\x2\x2\x2\x94\x95\a\x3\x2\x2\x95\x97\a"+
		"\x34\x2\x2\x96\x98\x5.\x18\x2\x97\x96\x3\x2\x2\x2\x97\x98\x3\x2\x2\x2"+
		"\x98\x9B\x3\x2\x2\x2\x99\x9A\a\x4\x2\x2\x9A\x9C\x5\x36\x1C\x2\x9B\x99"+
		"\x3\x2\x2\x2\x9B\x9C\x3\x2\x2\x2\x9C\x15\x3\x2\x2\x2\x9D\x9E\a\x3\x2\x2"+
		"\x9E\xA0\a\x35\x2\x2\x9F\xA1\a\x36\x2\x2\xA0\x9F\x3\x2\x2\x2\xA0\xA1\x3"+
		"\x2\x2\x2\xA1\xA3\x3\x2\x2\x2\xA2\xA4\x5.\x18\x2\xA3\xA2\x3\x2\x2\x2\xA3"+
		"\xA4\x3\x2\x2\x2\xA4\xA6\x3\x2\x2\x2\xA5\xA7\x5\x42\"\x2\xA6\xA5\x3\x2"+
		"\x2\x2\xA6\xA7\x3\x2\x2\x2\xA7\x17\x3\x2\x2\x2\xA8\xA9\a\x3\x2\x2\xA9"+
		"\xAB\a\x37\x2\x2\xAA\xAC\x5.\x18\x2\xAB\xAA\x3\x2\x2\x2\xAB\xAC\x3\x2"+
		"\x2\x2\xAC\x19\x3\x2\x2\x2\xAD\xB6\x5\x1C\xF\x2\xAE\xB6\x5\x1E\x10\x2"+
		"\xAF\xB6\x5 \x11\x2\xB0\xB6\x5\"\x12\x2\xB1\xB6\x5&\x14\x2\xB2\xB6\x5"+
		"(\x15\x2\xB3\xB6\x5*\x16\x2\xB4\xB6\x5,\x17\x2\xB5\xAD\x3\x2\x2\x2\xB5"+
		"\xAE\x3\x2\x2\x2\xB5\xAF\x3\x2\x2\x2\xB5\xB0\x3\x2\x2\x2\xB5\xB1\x3\x2"+
		"\x2\x2\xB5\xB2\x3\x2\x2\x2\xB5\xB3\x3\x2\x2\x2\xB5\xB4\x3\x2\x2\x2\xB6"+
		"\x1B\x3\x2\x2\x2\xB7\xB9\a\x5\x2\x2\xB8\xBA\t\x3\x2\x2\xB9\xB8\x3\x2\x2"+
		"\x2\xB9\xBA\x3\x2\x2\x2\xBA\xBC\x3\x2\x2\x2\xBB\xBD\x5\x46$\x2\xBC\xBB"+
		"\x3\x2\x2\x2\xBC\xBD\x3\x2\x2\x2\xBD\xBF\x3\x2\x2\x2\xBE\xC0\x5.\x18\x2"+
		"\xBF\xBE\x3\x2\x2\x2\xBF\xC0\x3\x2\x2\x2\xC0\x1D\x3\x2\x2\x2\xC1\xC2\a"+
		"\x5\x2\x2\xC2\xC4\a.\x2\x2\xC3\xC5\x5.\x18\x2\xC4\xC3\x3\x2\x2\x2\xC4"+
		"\xC5\x3\x2\x2\x2\xC5\x1F\x3\x2\x2\x2\xC6\xC7\a\x5\x2\x2\xC7\xC9\a/\x2"+
		"\x2\xC8\xCA\x5.\x18\x2\xC9\xC8\x3\x2\x2\x2\xC9\xCA\x3\x2\x2\x2\xCA\xCD"+
		"\x3\x2\x2\x2\xCB\xCC\a\x4\x2\x2\xCC\xCE\x5\x36\x1C\x2\xCD\xCB\x3\x2\x2"+
		"\x2\xCD\xCE\x3\x2\x2\x2\xCE!\x3\x2\x2\x2\xCF\xD0\a\x5\x2\x2\xD0\xD2\a"+
		"\x30\x2\x2\xD1\xD3\x5.\x18\x2\xD2\xD1\x3\x2\x2\x2\xD2\xD3\x3\x2\x2\x2"+
		"\xD3\xD5\x3\x2\x2\x2\xD4\xD6\x5\x42\"\x2\xD5\xD4\x3\x2\x2\x2\xD5\xD6\x3"+
		"\x2\x2\x2\xD6#\x3\x2\x2\x2\xD7\xD8\a\x5\x2\x2\xD8\xDA\a\x32\x2\x2\xD9"+
		"\xDB\x5.\x18\x2\xDA\xD9\x3\x2\x2\x2\xDA\xDB\x3\x2\x2\x2\xDB%\x3\x2\x2"+
		"\x2\xDC\xDD\a\x5\x2\x2\xDD\xDF\a\x33\x2\x2\xDE\xE0\x5.\x18\x2\xDF\xDE"+
		"\x3\x2\x2\x2\xDF\xE0\x3\x2\x2\x2\xE0\xE2\x3\x2\x2\x2\xE1\xE3\x5\x42\""+
		"\x2\xE2\xE1\x3\x2\x2\x2\xE2\xE3\x3\x2\x2\x2\xE3\'\x3\x2\x2\x2\xE4\xE5"+
		"\a\x5\x2\x2\xE5\xE7\a\x34\x2\x2\xE6\xE8\x5.\x18\x2\xE7\xE6\x3\x2\x2\x2"+
		"\xE7\xE8\x3\x2\x2\x2\xE8\xEB\x3\x2\x2\x2\xE9\xEA\a\x4\x2\x2\xEA\xEC\x5"+
		"\x36\x1C\x2\xEB\xE9\x3\x2\x2\x2\xEB\xEC\x3\x2\x2\x2\xEC)\x3\x2\x2\x2\xED"+
		"\xEE\a\x5\x2\x2\xEE\xF0\a\x35\x2\x2\xEF\xF1\a\x36\x2\x2\xF0\xEF\x3\x2"+
		"\x2\x2\xF0\xF1\x3\x2\x2\x2\xF1\xF3\x3\x2\x2\x2\xF2\xF4\x5.\x18\x2\xF3"+
		"\xF2\x3\x2\x2\x2\xF3\xF4\x3\x2\x2\x2\xF4\xF6\x3\x2\x2\x2\xF5\xF7\x5\x42"+
		"\"\x2\xF6\xF5\x3\x2\x2\x2\xF6\xF7\x3\x2\x2\x2\xF7+\x3\x2\x2\x2\xF8\xF9"+
		"\a\x5\x2\x2\xF9\xFB\a\x37\x2\x2\xFA\xFC\x5.\x18\x2\xFB\xFA\x3\x2\x2\x2"+
		"\xFB\xFC\x3\x2\x2\x2\xFC-\x3\x2\x2\x2\xFD\x102\x5\x30\x19\x2\xFE\xFF\a"+
		"\x6\x2\x2\xFF\x101\x5\x30\x19\x2\x100\xFE\x3\x2\x2\x2\x101\x104\x3\x2"+
		"\x2\x2\x102\x100\x3\x2\x2\x2\x102\x103\x3\x2\x2\x2\x103/\x3\x2\x2\x2\x104"+
		"\x102\x3\x2\x2\x2\x105\x106\t\x4\x2\x2\x106\x31\x3\x2\x2\x2\x107\x108"+
		"\x5\x36\x1C\x2\x108\x109\x5\x34\x1B\x2\x109\x33\x3\x2\x2\x2\x10A\x10E"+
		"\t\x5\x2\x2\x10B\x10D\t\x6\x2\x2\x10C\x10B\x3\x2\x2\x2\x10D\x110\x3\x2"+
		"\x2\x2\x10E\x10C\x3\x2\x2\x2\x10E\x10F\x3\x2\x2\x2\x10F\x112\x3\x2\x2"+
		"\x2\x110\x10E\x3\x2\x2\x2\x111\x113\t\a\x2\x2\x112\x111\x3\x2\x2\x2\x112"+
		"\x113\x3\x2\x2\x2\x113\x35\x3\x2\x2\x2\x114\x116\x5\x38\x1D\x2\x115\x114"+
		"\x3\x2\x2\x2\x115\x116\x3\x2\x2\x2\x116\x118\x3\x2\x2\x2\x117\x119\x5"+
		"\x42\"\x2\x118\x117\x3\x2\x2\x2\x118\x119\x3\x2\x2\x2\x119\x11B\x3\x2"+
		"\x2\x2\x11A\x11C\a\x41\x2\x2\x11B\x11A\x3\x2\x2\x2\x11B\x11C\x3\x2\x2"+
		"\x2\x11C\x37\x3\x2\x2\x2\x11D\x122\x5:\x1E\x2\x11E\x11F\t\b\x2\x2\x11F"+
		"\x121\x5:\x1E\x2\x120\x11E\x3\x2\x2\x2\x121\x124\x3\x2\x2\x2\x122\x120"+
		"\x3\x2\x2\x2\x122\x123\x3\x2\x2\x2\x123\x39\x3\x2\x2\x2\x124\x122\x3\x2"+
		"\x2\x2\x125\x12A\x5<\x1F\x2\x126\x127\a\x19\x2\x2\x127\x129\x5<\x1F\x2"+
		"\x128\x126\x3\x2\x2\x2\x129\x12C\x3\x2\x2\x2\x12A\x128\x3\x2\x2\x2\x12A"+
		"\x12B\x3\x2\x2\x2\x12B;\x3\x2\x2\x2\x12C\x12A\x3\x2\x2\x2\x12D\x12E\a"+
		"\x1A\x2\x2\x12E\x12F\x5\x38\x1D\x2\x12F\x130\a\x1B\x2\x2\x130\x133\x3"+
		"\x2\x2\x2\x131\x133\x5> \x2\x132\x12D\x3\x2\x2\x2\x132\x131\x3\x2\x2\x2"+
		"\x133=\x3\x2\x2\x2\x134\x135\a\x18\x2\x2\x135\x138\x5@!\x2\x136\x138\x5"+
		"@!\x2\x137\x134\x3\x2\x2\x2\x137\x136\x3\x2\x2\x2\x138?\x3\x2\x2\x2\x139"+
		"\x13B\t\t\x2\x2\x13A\x139\x3\x2\x2\x2\x13A\x13B\x3\x2\x2\x2\x13B\x13D"+
		"\x3\x2\x2\x2\x13C\x13E\a\x43\x2\x2\x13D\x13C\x3\x2\x2\x2\x13D\x13E\x3"+
		"\x2\x2\x2\x13E\x140\x3\x2\x2\x2\x13F\x141\a\x42\x2\x2\x140\x13F\x3\x2"+
		"\x2\x2\x140\x141\x3\x2\x2\x2\x141\x143\x3\x2\x2\x2\x142\x144\t\n\x2\x2"+
		"\x143\x142\x3\x2\x2\x2\x143\x144\x3\x2\x2\x2\x144\x41\x3\x2\x2\x2\x145"+
		"\x14C\a\x1C\x2\x2\x146\x14C\x5\x44#\x2\x147\x148\a\x1D\x2\x2\x148\x149"+
		"\x5\x44#\x2\x149\x14A\a\x1E\x2\x2\x14A\x14C\x3\x2\x2\x2\x14B\x145\x3\x2"+
		"\x2\x2\x14B\x146\x3\x2\x2\x2\x14B\x147\x3\x2\x2\x2\x14C\x43\x3\x2\x2\x2"+
		"\x14D\x158\a\x39\x2\x2\x14E\x158\a:\x2\x2\x14F\x150\x5H%\x2\x150\x152"+
		"\t\v\x2\x2\x151\x153\x5H%\x2\x152\x151\x3\x2\x2\x2\x152\x153\x3\x2\x2"+
		"\x2\x153\x158\x3\x2\x2\x2\x154\x155\t\v\x2\x2\x155\x158\x5H%\x2\x156\x158"+
		"\x5H%\x2\x157\x14D\x3\x2\x2\x2\x157\x14E\x3\x2\x2\x2\x157\x14F\x3\x2\x2"+
		"\x2\x157\x154\x3\x2\x2\x2\x157\x156\x3\x2\x2\x2\x158\x45\x3\x2\x2\x2\x159"+
		"\x15D\a\x39\x2\x2\x15A\x15D\a\x1C\x2\x2\x15B\x15D\x5H%\x2\x15C\x159\x3"+
		"\x2\x2\x2\x15C\x15A\x3\x2\x2\x2\x15C\x15B\x3\x2\x2\x2\x15DG\x3\x2\x2\x2"+
		"\x15E\x163\x5J&\x2\x15F\x163\x5L\'\x2\x160\x163\x5N(\x2\x161\x163\x5P"+
		")\x2\x162\x15E\x3\x2\x2\x2\x162\x15F\x3\x2\x2\x2\x162\x160\x3\x2\x2\x2"+
		"\x162\x161\x3\x2\x2\x2\x163I\x3\x2\x2\x2\x164\x165\a;\x2\x2\x165K\x3\x2"+
		"\x2\x2\x166\x168\t\f\x2\x2\x167\x166\x3\x2\x2\x2\x167\x168\x3\x2\x2\x2"+
		"\x168\x169\x3\x2\x2\x2\x169\x16A\t\r\x2\x2\x16AM\x3\x2\x2\x2\x16B\x16C"+
		"\a@\x2\x2\x16CO\x3\x2\x2\x2\x16D\x16E\t\xE\x2\x2\x16EQ\x3\x2\x2\x2;W\x65"+
		"iloty}\x82\x85\x8A\x8F\x92\x97\x9B\xA0\xA3\xA6\xAB\xB5\xB9\xBC\xBF\xC4"+
		"\xC9\xCD\xD2\xD5\xDA\xDF\xE2\xE7\xEB\xF0\xF3\xF6\xFB\x102\x10E\x112\x115"+
		"\x118\x11B\x122\x12A\x132\x137\x13A\x13D\x140\x143\x14B\x152\x157\x15C"+
		"\x162\x167";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace AccountingServer.Console
