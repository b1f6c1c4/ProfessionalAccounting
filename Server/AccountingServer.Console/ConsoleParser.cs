//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.4.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\b1f6c1c4\Documents\GitHub\ProfessionalAccounting\Server\AccountingServer.QueryGeneration\Console.g4 by ANTLR 4.4.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace AccountingServer.Console {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.4.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class ConsoleParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, Launch=24, 
		Connect=25, Shutdown=26, Backup=27, Mobile=28, Fetch=29, Help=30, Titles=31, 
		Exit=32, Check=33, AOAll=34, AOList=35, AOQuery=36, AORegister=37, AOUnregister=38, 
		ARedep=39, OReamo=40, AOResetSoft=41, AOResetHard=42, AOApply=43, AOCollapse=44, 
		AOCheck=45, SubtotalFields=46, Guid=47, RangeNull=48, RangeAllNotNull=49, 
		RangeAYear=50, RangeAMonth=51, RangeDeltaMonth=52, RangeADay=53, RangeDeltaDay=54, 
		RangeDeltaWeek=55, VoucherType=56, PercentQuotedString=57, DollarQuotedString=58, 
		DoubleQuotedString=59, SingleQuotedString=60, DetailTitle=61, DetailTitleSubTitle=62, 
		Float=63, Percent=64, Intersect=65, Union=66, Substract=67, WS=68;
	public const int
		RULE_command = 0, RULE_otherCommand = 1, RULE_groupedQuery = 2, RULE_hyperItem = 3, 
		RULE_hyperItemAtom = 4, RULE_name = 5, RULE_coef = 6, RULE_subtotal = 7, 
		RULE_subtotalAggr = 8, RULE_voucherDetailQuery = 9, RULE_emit = 10, RULE_vouchers = 11, 
		RULE_vouchersB = 12, RULE_voucherQuery = 13, RULE_details = 14, RULE_detailQuery = 15, 
		RULE_range = 16, RULE_rangeCore = 17, RULE_rangePoint = 18, RULE_rangeCertainPoint = 19, 
		RULE_rangeYear = 20, RULE_rangeMonth = 21, RULE_rangeWeek = 22, RULE_rangeDay = 23, 
		RULE_asset = 24, RULE_assetList = 25, RULE_assetQuery = 26, RULE_assetRegister = 27, 
		RULE_assetUnregister = 28, RULE_assetRedep = 29, RULE_assetResetSoft = 30, 
		RULE_assetResetHard = 31, RULE_assetApply = 32, RULE_assetCheck = 33, 
		RULE_amort = 34, RULE_amortList = 35, RULE_amortQuery = 36, RULE_amortRegister = 37, 
		RULE_amortUnregister = 38, RULE_amortReamo = 39, RULE_amortResetSoft = 40, 
		RULE_amortApply = 41, RULE_amortCheck = 42, RULE_distributedQ = 43, RULE_distributedQAtom = 44;
	public static readonly string[] ruleNames = {
		"command", "otherCommand", "groupedQuery", "hyperItem", "hyperItemAtom", 
		"name", "coef", "subtotal", "subtotalAggr", "voucherDetailQuery", "emit", 
		"vouchers", "vouchersB", "voucherQuery", "details", "detailQuery", "range", 
		"rangeCore", "rangePoint", "rangeCertainPoint", "rangeYear", "rangeMonth", 
		"rangeWeek", "rangeDay", "asset", "assetList", "assetQuery", "assetRegister", 
		"assetUnregister", "assetRedep", "assetResetSoft", "assetResetHard", "assetApply", 
		"assetCheck", "amort", "amortList", "amortQuery", "amortRegister", "amortUnregister", 
		"amortReamo", "amortResetSoft", "amortApply", "amortCheck", "distributedQ", 
		"distributedQAtom"
	};

	private static readonly string[] _LiteralNames = {
		null, "'|'", "':'", "'`'", "'``'", "'D'", "'[]'", "'['", "']'", "'A'", 
		"'{'", "'}'", "'E'", "'('", "')'", "'>'", "'<'", "'~'", "'@'", "'#'", 
		"'a'", "'o'", "'[['", "']]'", null, null, null, "'backup'", null, "'fetch'", 
		null, null, "'exit'", null, "'-all'", null, null, null, null, null, null, 
		"'-reset-soft'", "'-reset-hard'", null, null, "'-chk'", null, null, "'null'", 
		"'~null'", null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "'*'", "'+'", "'-'", "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"Launch", "Connect", "Shutdown", "Backup", "Mobile", "Fetch", "Help", 
		"Titles", "Exit", "Check", "AOAll", "AOList", "AOQuery", "AORegister", 
		"AOUnregister", "ARedep", "OReamo", "AOResetSoft", "AOResetHard", "AOApply", 
		"AOCollapse", "AOCheck", "SubtotalFields", "Guid", "RangeNull", "RangeAllNotNull", 
		"RangeAYear", "RangeAMonth", "RangeDeltaMonth", "RangeADay", "RangeDeltaDay", 
		"RangeDeltaWeek", "VoucherType", "PercentQuotedString", "DollarQuotedString", 
		"DoubleQuotedString", "SingleQuotedString", "DetailTitle", "DetailTitleSubTitle", 
		"Float", "Percent", "Intersect", "Union", "Substract", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Console.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }


		protected const int EOF = Eof;

	public ConsoleParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CommandContext : ParserRuleContext {
		public AssetContext asset() {
			return GetRuleContext<AssetContext>(0);
		}
		public GroupedQueryContext groupedQuery() {
			return GetRuleContext<GroupedQueryContext>(0);
		}
		public AmortContext amort() {
			return GetRuleContext<AmortContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(ConsoleParser.Eof, 0); }
		public OtherCommandContext otherCommand() {
			return GetRuleContext<OtherCommandContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_command);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 90; vouchers();
				}
				break;

			case 2:
				{
				State = 91; groupedQuery();
				}
				break;

			case 3:
				{
				State = 92; asset();
				}
				break;

			case 4:
				{
				State = 93; amort();
				}
				break;

			case 5:
				{
				State = 94; otherCommand();
				}
				break;
			}
			State = 97; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherCommandContext : ParserRuleContext {
		public ITerminalNode Connect() { return GetToken(ConsoleParser.Connect, 0); }
		public ITerminalNode Backup() { return GetToken(ConsoleParser.Backup, 0); }
		public ITerminalNode Shutdown() { return GetToken(ConsoleParser.Shutdown, 0); }
		public ITerminalNode Fetch() { return GetToken(ConsoleParser.Fetch, 0); }
		public ITerminalNode Mobile() { return GetToken(ConsoleParser.Mobile, 0); }
		public ITerminalNode Help() { return GetToken(ConsoleParser.Help, 0); }
		public ITerminalNode Check() { return GetToken(ConsoleParser.Check, 0); }
		public ITerminalNode Launch() { return GetToken(ConsoleParser.Launch, 0); }
		public ITerminalNode Exit() { return GetToken(ConsoleParser.Exit, 0); }
		public ITerminalNode Titles() { return GetToken(ConsoleParser.Titles, 0); }
		public OtherCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherCommand; } }
	}

	[RuleVersion(0)]
	public OtherCommandContext otherCommand() {
		OtherCommandContext _localctx = new OtherCommandContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_otherCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Launch) | (1L << Connect) | (1L << Shutdown) | (1L << Backup) | (1L << Mobile) | (1L << Fetch) | (1L << Help) | (1L << Titles) | (1L << Exit) | (1L << Check))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupedQueryContext : ParserRuleContext {
		public SubtotalContext subtotal() {
			return GetRuleContext<SubtotalContext>(0);
		}
		public VoucherDetailQueryContext voucherDetailQuery() {
			return GetRuleContext<VoucherDetailQueryContext>(0);
		}
		public GroupedQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupedQuery; } }
	}

	[RuleVersion(0)]
	public GroupedQueryContext groupedQuery() {
		GroupedQueryContext _localctx = new GroupedQueryContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_groupedQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; voucherDetailQuery();
			State = 102; subtotal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HyperItemContext : ParserRuleContext {
		public HyperItemAtomContext hyperItemAtom() {
			return GetRuleContext<HyperItemAtomContext>(0);
		}
		public HyperItemContext hyperItem(int i) {
			return GetRuleContext<HyperItemContext>(i);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public IReadOnlyList<HyperItemContext> hyperItem() {
			return GetRuleContexts<HyperItemContext>();
		}
		public HyperItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hyperItem; } }
	}

	[RuleVersion(0)]
	public HyperItemContext hyperItem() {
		HyperItemContext _localctx = new HyperItemContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_hyperItem);
		try {
			int _alt;
			State = 113;
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 104; name();
				State = 105; hyperItem();
				State = 108;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 106; Match(T__0);
						State = 107; hyperItem();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 110;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 112; hyperItemAtom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HyperItemAtomContext : ParserRuleContext {
		public CoefContext coef() {
			return GetRuleContext<CoefContext>(0);
		}
		public GroupedQueryContext groupedQuery() {
			return GetRuleContext<GroupedQueryContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public HyperItemAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hyperItemAtom; } }
	}

	[RuleVersion(0)]
	public HyperItemAtomContext hyperItemAtom() {
		HyperItemAtomContext _localctx = new HyperItemAtomContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_hyperItemAtom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; name();
			State = 116; groupedQuery();
			State = 118;
			_la = _input.La(1);
			if (_la==Intersect) {
				{
				State = 117; coef();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public ITerminalNode DollarQuotedString() { return GetToken(ConsoleParser.DollarQuotedString, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120; Match(DollarQuotedString);
			State = 121; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CoefContext : ParserRuleContext {
		public ITerminalNode Percent() { return GetToken(ConsoleParser.Percent, 0); }
		public ITerminalNode Float() { return GetToken(ConsoleParser.Float, 0); }
		public CoefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coef; } }
	}

	[RuleVersion(0)]
	public CoefContext coef() {
		CoefContext _localctx = new CoefContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_coef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123; Match(Intersect);
			State = 124;
			_la = _input.La(1);
			if ( !(_la==Float || _la==Percent) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtotalContext : ParserRuleContext {
		public IToken SubtotalMark;
		public ITerminalNode SubtotalFields() { return GetToken(ConsoleParser.SubtotalFields, 0); }
		public SubtotalAggrContext subtotalAggr() {
			return GetRuleContext<SubtotalAggrContext>(0);
		}
		public SubtotalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtotal; } }
	}

	[RuleVersion(0)]
	public SubtotalContext subtotal() {
		SubtotalContext _localctx = new SubtotalContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_subtotal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			_localctx.SubtotalMark = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==T__2 || _la==T__3) ) {
				_localctx.SubtotalMark = _errHandler.RecoverInline(this);
			}
			Consume();
			State = 128;
			_la = _input.La(1);
			if (_la==SubtotalFields) {
				{
				State = 127; Match(SubtotalFields);
				}
			}

			State = 131;
			_la = _input.La(1);
			if (_la==T__4) {
				{
				State = 130; subtotalAggr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtotalAggrContext : ParserRuleContext {
		public IToken IsAll;
		public RangeCoreContext rangeCore() {
			return GetRuleContext<RangeCoreContext>(0);
		}
		public SubtotalAggrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtotalAggr; } }
	}

	[RuleVersion(0)]
	public SubtotalAggrContext subtotalAggr() {
		SubtotalAggrContext _localctx = new SubtotalAggrContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_subtotalAggr);
		int _la;
		try {
			State = 142;
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 133; Match(T__4);
				State = 135;
				_la = _input.La(1);
				if (_la==T__5) {
					{
					State = 134; _localctx.IsAll = Match(T__5);
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 137; Match(T__4);
				State = 138; Match(T__6);
				State = 139; rangeCore();
				State = 140; Match(T__7);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoucherDetailQueryContext : ParserRuleContext {
		public VoucherQueryContext voucherQuery() {
			return GetRuleContext<VoucherQueryContext>(0);
		}
		public EmitContext emit() {
			return GetRuleContext<EmitContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public VoucherDetailQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voucherDetailQuery; } }
	}

	[RuleVersion(0)]
	public VoucherDetailQueryContext voucherDetailQuery() {
		VoucherDetailQueryContext _localctx = new VoucherDetailQueryContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_voucherDetailQuery);
		try {
			State = 148;
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 144; vouchers();
				State = 145; emit();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 147; voucherQuery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmitContext : ParserRuleContext {
		public IToken Op;
		public DetailsContext details() {
			return GetRuleContext<DetailsContext>(0);
		}
		public EmitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emit; } }
	}

	[RuleVersion(0)]
	public EmitContext emit() {
		EmitContext _localctx = new EmitContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_emit);
		try {
			State = 153;
			switch (_input.La(1)) {
			case T__8:
				EnterOuterAlt(_localctx, 1);
				{
				State = 150; _localctx.Op = Match(T__8);
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 151; Match(T__1);
				State = 152; details(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VouchersContext : ParserRuleContext {
		public VoucherQueryContext voucherQuery() {
			return GetRuleContext<VoucherQueryContext>(0);
		}
		public VouchersBContext vouchersB() {
			return GetRuleContext<VouchersBContext>(0);
		}
		public VouchersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vouchers; } }
	}

	[RuleVersion(0)]
	public VouchersContext vouchers() {
		VouchersContext _localctx = new VouchersContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_vouchers);
		try {
			State = 157;
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 155; vouchersB(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 156; voucherQuery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VouchersBContext : ParserRuleContext {
		public IToken Op;
		public VouchersBContext vouchersB(int i) {
			return GetRuleContext<VouchersBContext>(i);
		}
		public VoucherQueryContext voucherQuery() {
			return GetRuleContext<VoucherQueryContext>(0);
		}
		public IReadOnlyList<VouchersBContext> vouchersB() {
			return GetRuleContexts<VouchersBContext>();
		}
		public VouchersBContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vouchersB; } }
	}

	[RuleVersion(0)]
	public VouchersBContext vouchersB() {
		return vouchersB(0);
	}

	private VouchersBContext vouchersB(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		VouchersBContext _localctx = new VouchersBContext(_ctx, _parentState);
		VouchersBContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_vouchersB, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				State = 160;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==Union || _la==Substract) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 161; vouchersB(3);
				}
				break;

			case 2:
				{
				State = 162; Match(T__9);
				State = 163; voucherQuery();
				State = 164; Match(T__10);
				}
				break;

			case 3:
				{
				State = 166; Match(T__9);
				State = 167; vouchersB(0);
				State = 168; Match(T__10);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 180;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 178;
					switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
					case 1:
						{
						_localctx = new VouchersBContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_vouchersB);
						State = 172;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 173; _localctx.Op = Match(Intersect);
						State = 174; vouchersB(6);
						}
						break;

					case 2:
						{
						_localctx = new VouchersBContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_vouchersB);
						State = 175;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 176;
						_localctx.Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==Union || _la==Substract) ) {
							_localctx.Op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 177; vouchersB(5);
						}
						break;
					}
					} 
				}
				State = 182;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VoucherQueryContext : ParserRuleContext {
		public IToken Op;
		public ITerminalNode DollarQuotedString() { return GetToken(ConsoleParser.DollarQuotedString, 0); }
		public ITerminalNode PercentQuotedString() { return GetToken(ConsoleParser.PercentQuotedString, 0); }
		public DetailsContext details() {
			return GetRuleContext<DetailsContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode VoucherType() { return GetToken(ConsoleParser.VoucherType, 0); }
		public VoucherQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voucherQuery; } }
	}

	[RuleVersion(0)]
	public VoucherQueryContext voucherQuery() {
		VoucherQueryContext _localctx = new VoucherQueryContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_voucherQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				{
				State = 183; details(0);
				}
				break;
			}
			State = 187;
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				{
				State = 186;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__8 || _la==T__11) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 190;
			_la = _input.La(1);
			if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (T__5 - 6)) | (1L << (T__6 - 6)) | (1L << (T__16 - 6)) | (1L << (T__17 - 6)) | (1L << (T__18 - 6)) | (1L << (RangeNull - 6)) | (1L << (RangeAllNotNull - 6)) | (1L << (RangeAYear - 6)) | (1L << (RangeAMonth - 6)) | (1L << (RangeDeltaMonth - 6)) | (1L << (RangeADay - 6)) | (1L << (RangeDeltaDay - 6)) | (1L << (RangeDeltaWeek - 6)) | (1L << (Substract - 6)))) != 0)) {
				{
				State = 189; range();
				}
			}

			State = 193;
			_la = _input.La(1);
			if (_la==DollarQuotedString) {
				{
				State = 192; Match(DollarQuotedString);
				}
			}

			State = 196;
			_la = _input.La(1);
			if (_la==PercentQuotedString) {
				{
				State = 195; Match(PercentQuotedString);
				}
			}

			State = 199;
			_la = _input.La(1);
			if (_la==VoucherType) {
				{
				State = 198; Match(VoucherType);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DetailsContext : ParserRuleContext {
		public IToken Op;
		public DetailsContext details(int i) {
			return GetRuleContext<DetailsContext>(i);
		}
		public IReadOnlyList<DetailsContext> details() {
			return GetRuleContexts<DetailsContext>();
		}
		public DetailQueryContext detailQuery() {
			return GetRuleContext<DetailQueryContext>(0);
		}
		public DetailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_details; } }
	}

	[RuleVersion(0)]
	public DetailsContext details() {
		return details(0);
	}

	private DetailsContext details(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		DetailsContext _localctx = new DetailsContext(_ctx, _parentState);
		DetailsContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_details, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				{
				State = 202;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==Union || _la==Substract) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 203; details(3);
				}
				break;

			case 2:
				{
				State = 204; detailQuery();
				}
				break;

			case 3:
				{
				State = 205; Match(T__12);
				State = 206; details(0);
				State = 207; Match(T__13);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 219;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 217;
					switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
					case 1:
						{
						_localctx = new DetailsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_details);
						State = 211;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 212; _localctx.Op = Match(Intersect);
						State = 213; details(6);
						}
						break;

					case 2:
						{
						_localctx = new DetailsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_details);
						State = 214;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 215;
						_localctx.Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==Union || _la==Substract) ) {
							_localctx.Op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 216; details(5);
						}
						break;
					}
					} 
				}
				State = 221;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DetailQueryContext : ParserRuleContext {
		public IToken Direction;
		public ITerminalNode DetailTitleSubTitle() { return GetToken(ConsoleParser.DetailTitleSubTitle, 0); }
		public ITerminalNode DoubleQuotedString() { return GetToken(ConsoleParser.DoubleQuotedString, 0); }
		public ITerminalNode SingleQuotedString() { return GetToken(ConsoleParser.SingleQuotedString, 0); }
		public ITerminalNode DetailTitle() { return GetToken(ConsoleParser.DetailTitle, 0); }
		public DetailQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_detailQuery; } }
	}

	[RuleVersion(0)]
	public DetailQueryContext detailQuery() {
		DetailQueryContext _localctx = new DetailQueryContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_detailQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
			case 1:
				{
				State = 222;
				_la = _input.La(1);
				if ( !(_la==DetailTitle || _la==DetailTitleSubTitle) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 226;
			switch ( Interpreter.AdaptivePredict(_input,24,_ctx) ) {
			case 1:
				{
				State = 225; Match(SingleQuotedString);
				}
				break;
			}
			State = 229;
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				{
				State = 228; Match(DoubleQuotedString);
				}
				break;
			}
			State = 232;
			switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
			case 1:
				{
				State = 231;
				_localctx.Direction = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__14 || _la==T__15) ) {
					_localctx.Direction = _errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public RangeCoreContext Core;
		public RangeCoreContext rangeCore() {
			return GetRuleContext<RangeCoreContext>(0);
		}
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_range);
		try {
			State = 240;
			switch (_input.La(1)) {
			case T__5:
				EnterOuterAlt(_localctx, 1);
				{
				State = 234; Match(T__5);
				}
				break;
			case T__16:
			case T__17:
			case T__18:
			case RangeNull:
			case RangeAllNotNull:
			case RangeAYear:
			case RangeAMonth:
			case RangeDeltaMonth:
			case RangeADay:
			case RangeDeltaDay:
			case RangeDeltaWeek:
			case Substract:
				EnterOuterAlt(_localctx, 2);
				{
				State = 235; _localctx.Core = rangeCore();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 3);
				{
				State = 236; Match(T__6);
				State = 237; _localctx.Core = rangeCore();
				State = 238; Match(T__7);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeCoreContext : ParserRuleContext {
		public RangeCertainPointContext Begin;
		public RangeCertainPointContext End;
		public IToken Op;
		public RangeCertainPointContext Certain;
		public ITerminalNode RangeNull() { return GetToken(ConsoleParser.RangeNull, 0); }
		public RangeCertainPointContext rangeCertainPoint(int i) {
			return GetRuleContext<RangeCertainPointContext>(i);
		}
		public ITerminalNode RangeAllNotNull() { return GetToken(ConsoleParser.RangeAllNotNull, 0); }
		public IReadOnlyList<RangeCertainPointContext> rangeCertainPoint() {
			return GetRuleContexts<RangeCertainPointContext>();
		}
		public RangeCoreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeCore; } }
	}

	[RuleVersion(0)]
	public RangeCoreContext rangeCore() {
		RangeCoreContext _localctx = new RangeCoreContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_rangeCore);
		int _la;
		try {
			State = 252;
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 242; Match(RangeNull);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 243; Match(RangeAllNotNull);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 244; _localctx.Begin = rangeCertainPoint();
				State = 245;
				_la = _input.La(1);
				if ( !(_la==T__16 || _la==Substract) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 247;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__17) | (1L << T__18) | (1L << RangeAYear) | (1L << RangeAMonth) | (1L << RangeDeltaMonth) | (1L << RangeADay) | (1L << RangeDeltaDay) | (1L << RangeDeltaWeek))) != 0)) {
					{
					State = 246; _localctx.End = rangeCertainPoint();
					}
				}

				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 249;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__16 || _la==Substract) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 250; _localctx.End = rangeCertainPoint();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 251; _localctx.Certain = rangeCertainPoint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangePointContext : ParserRuleContext {
		public IToken All;
		public ITerminalNode RangeNull() { return GetToken(ConsoleParser.RangeNull, 0); }
		public RangeCertainPointContext rangeCertainPoint() {
			return GetRuleContext<RangeCertainPointContext>(0);
		}
		public RangePointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangePoint; } }
	}

	[RuleVersion(0)]
	public RangePointContext rangePoint() {
		RangePointContext _localctx = new RangePointContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_rangePoint);
		try {
			State = 257;
			switch (_input.La(1)) {
			case RangeNull:
				EnterOuterAlt(_localctx, 1);
				{
				State = 254; Match(RangeNull);
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 2);
				{
				State = 255; _localctx.All = Match(T__5);
				}
				break;
			case T__17:
			case T__18:
			case RangeAYear:
			case RangeAMonth:
			case RangeDeltaMonth:
			case RangeADay:
			case RangeDeltaDay:
			case RangeDeltaWeek:
				EnterOuterAlt(_localctx, 3);
				{
				State = 256; rangeCertainPoint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeCertainPointContext : ParserRuleContext {
		public RangeWeekContext rangeWeek() {
			return GetRuleContext<RangeWeekContext>(0);
		}
		public RangeYearContext rangeYear() {
			return GetRuleContext<RangeYearContext>(0);
		}
		public RangeMonthContext rangeMonth() {
			return GetRuleContext<RangeMonthContext>(0);
		}
		public RangeDayContext rangeDay() {
			return GetRuleContext<RangeDayContext>(0);
		}
		public RangeCertainPointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeCertainPoint; } }
	}

	[RuleVersion(0)]
	public RangeCertainPointContext rangeCertainPoint() {
		RangeCertainPointContext _localctx = new RangeCertainPointContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_rangeCertainPoint);
		try {
			State = 263;
			switch (_input.La(1)) {
			case RangeAYear:
				EnterOuterAlt(_localctx, 1);
				{
				State = 259; rangeYear();
				}
				break;
			case T__17:
			case T__18:
			case RangeAMonth:
			case RangeDeltaMonth:
				EnterOuterAlt(_localctx, 2);
				{
				State = 260; rangeMonth();
				}
				break;
			case RangeDeltaWeek:
				EnterOuterAlt(_localctx, 3);
				{
				State = 261; rangeWeek();
				}
				break;
			case RangeADay:
			case RangeDeltaDay:
				EnterOuterAlt(_localctx, 4);
				{
				State = 262; rangeDay();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeYearContext : ParserRuleContext {
		public ITerminalNode RangeAYear() { return GetToken(ConsoleParser.RangeAYear, 0); }
		public RangeYearContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeYear; } }
	}

	[RuleVersion(0)]
	public RangeYearContext rangeYear() {
		RangeYearContext _localctx = new RangeYearContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_rangeYear);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265; Match(RangeAYear);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeMonthContext : ParserRuleContext {
		public IToken Modifier;
		public ITerminalNode RangeDeltaMonth() { return GetToken(ConsoleParser.RangeDeltaMonth, 0); }
		public ITerminalNode RangeAMonth() { return GetToken(ConsoleParser.RangeAMonth, 0); }
		public RangeMonthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeMonth; } }
	}

	[RuleVersion(0)]
	public RangeMonthContext rangeMonth() {
		RangeMonthContext _localctx = new RangeMonthContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_rangeMonth);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			_la = _input.La(1);
			if (_la==T__17 || _la==T__18) {
				{
				State = 267;
				_localctx.Modifier = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__17 || _la==T__18) ) {
					_localctx.Modifier = _errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			State = 270;
			_la = _input.La(1);
			if ( !(_la==RangeAMonth || _la==RangeDeltaMonth) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeWeekContext : ParserRuleContext {
		public ITerminalNode RangeDeltaWeek() { return GetToken(ConsoleParser.RangeDeltaWeek, 0); }
		public RangeWeekContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeWeek; } }
	}

	[RuleVersion(0)]
	public RangeWeekContext rangeWeek() {
		RangeWeekContext _localctx = new RangeWeekContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_rangeWeek);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272; Match(RangeDeltaWeek);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeDayContext : ParserRuleContext {
		public ITerminalNode RangeADay() { return GetToken(ConsoleParser.RangeADay, 0); }
		public ITerminalNode RangeDeltaDay() { return GetToken(ConsoleParser.RangeDeltaDay, 0); }
		public RangeDayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeDay; } }
	}

	[RuleVersion(0)]
	public RangeDayContext rangeDay() {
		RangeDayContext _localctx = new RangeDayContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_rangeDay);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			_la = _input.La(1);
			if ( !(_la==RangeADay || _la==RangeDeltaDay) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetContext : ParserRuleContext {
		public AssetRegisterContext assetRegister() {
			return GetRuleContext<AssetRegisterContext>(0);
		}
		public AssetUnregisterContext assetUnregister() {
			return GetRuleContext<AssetUnregisterContext>(0);
		}
		public AssetResetHardContext assetResetHard() {
			return GetRuleContext<AssetResetHardContext>(0);
		}
		public AssetResetSoftContext assetResetSoft() {
			return GetRuleContext<AssetResetSoftContext>(0);
		}
		public AssetApplyContext assetApply() {
			return GetRuleContext<AssetApplyContext>(0);
		}
		public AssetListContext assetList() {
			return GetRuleContext<AssetListContext>(0);
		}
		public AssetQueryContext assetQuery() {
			return GetRuleContext<AssetQueryContext>(0);
		}
		public AssetCheckContext assetCheck() {
			return GetRuleContext<AssetCheckContext>(0);
		}
		public AssetRedepContext assetRedep() {
			return GetRuleContext<AssetRedepContext>(0);
		}
		public AssetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asset; } }
	}

	[RuleVersion(0)]
	public AssetContext asset() {
		AssetContext _localctx = new AssetContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_asset);
		try {
			State = 285;
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 276; assetList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 277; assetQuery();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 278; assetRegister();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 279; assetUnregister();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 280; assetRedep();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 281; assetResetSoft();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 282; assetResetHard();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 283; assetApply();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 284; assetCheck();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetListContext : ParserRuleContext {
		public ITerminalNode AOList() { return GetToken(ConsoleParser.AOList, 0); }
		public ITerminalNode AOAll() { return GetToken(ConsoleParser.AOAll, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangePointContext rangePoint() {
			return GetRuleContext<RangePointContext>(0);
		}
		public AssetListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetList; } }
	}

	[RuleVersion(0)]
	public AssetListContext assetList() {
		AssetListContext _localctx = new AssetListContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_assetList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287; Match(T__19);
			State = 289;
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				{
				State = 288;
				_la = _input.La(1);
				if ( !(_la==AOAll || _la==AOList) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 292;
			switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
			case 1:
				{
				State = 291; rangePoint();
				}
				break;
			}
			State = 295;
			switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
			case 1:
				{
				State = 294; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetQueryContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOQuery() { return GetToken(ConsoleParser.AOQuery, 0); }
		public AssetQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetQuery; } }
	}

	[RuleVersion(0)]
	public AssetQueryContext assetQuery() {
		AssetQueryContext _localctx = new AssetQueryContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_assetQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297; Match(T__19);
			State = 298; Match(AOQuery);
			State = 300;
			switch ( Interpreter.AdaptivePredict(_input,37,_ctx) ) {
			case 1:
				{
				State = 299; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetRegisterContext : ParserRuleContext {
		public ITerminalNode AORegister() { return GetToken(ConsoleParser.AORegister, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AssetRegisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetRegister; } }
	}

	[RuleVersion(0)]
	public AssetRegisterContext assetRegister() {
		AssetRegisterContext _localctx = new AssetRegisterContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_assetRegister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302; Match(T__19);
			State = 303; Match(AORegister);
			State = 305;
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				{
				State = 304; distributedQ(0);
				}
				break;
			}
			State = 308;
			_la = _input.La(1);
			if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (T__5 - 6)) | (1L << (T__6 - 6)) | (1L << (T__16 - 6)) | (1L << (T__17 - 6)) | (1L << (T__18 - 6)) | (1L << (RangeNull - 6)) | (1L << (RangeAllNotNull - 6)) | (1L << (RangeAYear - 6)) | (1L << (RangeAMonth - 6)) | (1L << (RangeDeltaMonth - 6)) | (1L << (RangeADay - 6)) | (1L << (RangeDeltaDay - 6)) | (1L << (RangeDeltaWeek - 6)) | (1L << (Substract - 6)))) != 0)) {
				{
				State = 307; range();
				}
			}

			State = 312;
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 310; Match(T__1);
				State = 311; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetUnregisterContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode AOUnregister() { return GetToken(ConsoleParser.AOUnregister, 0); }
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AssetUnregisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetUnregister; } }
	}

	[RuleVersion(0)]
	public AssetUnregisterContext assetUnregister() {
		AssetUnregisterContext _localctx = new AssetUnregisterContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_assetUnregister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314; Match(T__19);
			State = 315; Match(AOUnregister);
			State = 317;
			switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
			case 1:
				{
				State = 316; distributedQ(0);
				}
				break;
			}
			State = 320;
			_la = _input.La(1);
			if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (T__5 - 6)) | (1L << (T__6 - 6)) | (1L << (T__16 - 6)) | (1L << (T__17 - 6)) | (1L << (T__18 - 6)) | (1L << (RangeNull - 6)) | (1L << (RangeAllNotNull - 6)) | (1L << (RangeAYear - 6)) | (1L << (RangeAMonth - 6)) | (1L << (RangeDeltaMonth - 6)) | (1L << (RangeADay - 6)) | (1L << (RangeDeltaDay - 6)) | (1L << (RangeDeltaWeek - 6)) | (1L << (Substract - 6)))) != 0)) {
				{
				State = 319; range();
				}
			}

			State = 324;
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 322; Match(T__1);
				State = 323; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetRedepContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode ARedep() { return GetToken(ConsoleParser.ARedep, 0); }
		public AssetRedepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetRedep; } }
	}

	[RuleVersion(0)]
	public AssetRedepContext assetRedep() {
		AssetRedepContext _localctx = new AssetRedepContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_assetRedep);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326; Match(T__19);
			State = 327; Match(ARedep);
			State = 329;
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				{
				State = 328; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetResetSoftContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOResetSoft() { return GetToken(ConsoleParser.AOResetSoft, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AssetResetSoftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetResetSoft; } }
	}

	[RuleVersion(0)]
	public AssetResetSoftContext assetResetSoft() {
		AssetResetSoftContext _localctx = new AssetResetSoftContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_assetResetSoft);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331; Match(T__19);
			State = 332; Match(AOResetSoft);
			State = 334;
			switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
			case 1:
				{
				State = 333; distributedQ(0);
				}
				break;
			}
			State = 337;
			_la = _input.La(1);
			if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (T__5 - 6)) | (1L << (T__6 - 6)) | (1L << (T__16 - 6)) | (1L << (T__17 - 6)) | (1L << (T__18 - 6)) | (1L << (RangeNull - 6)) | (1L << (RangeAllNotNull - 6)) | (1L << (RangeAYear - 6)) | (1L << (RangeAMonth - 6)) | (1L << (RangeDeltaMonth - 6)) | (1L << (RangeADay - 6)) | (1L << (RangeDeltaDay - 6)) | (1L << (RangeDeltaWeek - 6)) | (1L << (Substract - 6)))) != 0)) {
				{
				State = 336; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetResetHardContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOResetHard() { return GetToken(ConsoleParser.AOResetHard, 0); }
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AssetResetHardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetResetHard; } }
	}

	[RuleVersion(0)]
	public AssetResetHardContext assetResetHard() {
		AssetResetHardContext _localctx = new AssetResetHardContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_assetResetHard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339; Match(T__19);
			State = 340; Match(AOResetHard);
			State = 342;
			switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
			case 1:
				{
				State = 341; distributedQ(0);
				}
				break;
			}
			State = 346;
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 344; Match(T__1);
				State = 345; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetApplyContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOCollapse() { return GetToken(ConsoleParser.AOCollapse, 0); }
		public ITerminalNode AOApply() { return GetToken(ConsoleParser.AOApply, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AssetApplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetApply; } }
	}

	[RuleVersion(0)]
	public AssetApplyContext assetApply() {
		AssetApplyContext _localctx = new AssetApplyContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_assetApply);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348; Match(T__19);
			State = 349; Match(AOApply);
			State = 351;
			switch ( Interpreter.AdaptivePredict(_input,49,_ctx) ) {
			case 1:
				{
				State = 350; Match(AOCollapse);
				}
				break;
			}
			State = 354;
			switch ( Interpreter.AdaptivePredict(_input,50,_ctx) ) {
			case 1:
				{
				State = 353; distributedQ(0);
				}
				break;
			}
			State = 357;
			_la = _input.La(1);
			if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (T__5 - 6)) | (1L << (T__6 - 6)) | (1L << (T__16 - 6)) | (1L << (T__17 - 6)) | (1L << (T__18 - 6)) | (1L << (RangeNull - 6)) | (1L << (RangeAllNotNull - 6)) | (1L << (RangeAYear - 6)) | (1L << (RangeAMonth - 6)) | (1L << (RangeDeltaMonth - 6)) | (1L << (RangeADay - 6)) | (1L << (RangeDeltaDay - 6)) | (1L << (RangeDeltaWeek - 6)) | (1L << (Substract - 6)))) != 0)) {
				{
				State = 356; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetCheckContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOCheck() { return GetToken(ConsoleParser.AOCheck, 0); }
		public AssetCheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetCheck; } }
	}

	[RuleVersion(0)]
	public AssetCheckContext assetCheck() {
		AssetCheckContext _localctx = new AssetCheckContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_assetCheck);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359; Match(T__19);
			State = 360; Match(AOCheck);
			State = 362;
			switch ( Interpreter.AdaptivePredict(_input,52,_ctx) ) {
			case 1:
				{
				State = 361; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortContext : ParserRuleContext {
		public AmortReamoContext amortReamo() {
			return GetRuleContext<AmortReamoContext>(0);
		}
		public AmortQueryContext amortQuery() {
			return GetRuleContext<AmortQueryContext>(0);
		}
		public AmortCheckContext amortCheck() {
			return GetRuleContext<AmortCheckContext>(0);
		}
		public AmortResetSoftContext amortResetSoft() {
			return GetRuleContext<AmortResetSoftContext>(0);
		}
		public AmortRegisterContext amortRegister() {
			return GetRuleContext<AmortRegisterContext>(0);
		}
		public AmortUnregisterContext amortUnregister() {
			return GetRuleContext<AmortUnregisterContext>(0);
		}
		public AmortApplyContext amortApply() {
			return GetRuleContext<AmortApplyContext>(0);
		}
		public AmortListContext amortList() {
			return GetRuleContext<AmortListContext>(0);
		}
		public AmortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amort; } }
	}

	[RuleVersion(0)]
	public AmortContext amort() {
		AmortContext _localctx = new AmortContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_amort);
		try {
			State = 372;
			switch ( Interpreter.AdaptivePredict(_input,53,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 364; amortList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 365; amortQuery();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 366; amortRegister();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 367; amortUnregister();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 368; amortReamo();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 369; amortResetSoft();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 370; amortApply();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 371; amortCheck();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortListContext : ParserRuleContext {
		public ITerminalNode AOList() { return GetToken(ConsoleParser.AOList, 0); }
		public ITerminalNode AOAll() { return GetToken(ConsoleParser.AOAll, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangePointContext rangePoint() {
			return GetRuleContext<RangePointContext>(0);
		}
		public AmortListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortList; } }
	}

	[RuleVersion(0)]
	public AmortListContext amortList() {
		AmortListContext _localctx = new AmortListContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_amortList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374; Match(T__20);
			State = 376;
			switch ( Interpreter.AdaptivePredict(_input,54,_ctx) ) {
			case 1:
				{
				State = 375;
				_la = _input.La(1);
				if ( !(_la==AOAll || _la==AOList) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 379;
			switch ( Interpreter.AdaptivePredict(_input,55,_ctx) ) {
			case 1:
				{
				State = 378; rangePoint();
				}
				break;
			}
			State = 382;
			switch ( Interpreter.AdaptivePredict(_input,56,_ctx) ) {
			case 1:
				{
				State = 381; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortQueryContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOQuery() { return GetToken(ConsoleParser.AOQuery, 0); }
		public AmortQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortQuery; } }
	}

	[RuleVersion(0)]
	public AmortQueryContext amortQuery() {
		AmortQueryContext _localctx = new AmortQueryContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_amortQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384; Match(T__20);
			State = 385; Match(AOQuery);
			State = 387;
			switch ( Interpreter.AdaptivePredict(_input,57,_ctx) ) {
			case 1:
				{
				State = 386; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortRegisterContext : ParserRuleContext {
		public ITerminalNode AORegister() { return GetToken(ConsoleParser.AORegister, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AmortRegisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortRegister; } }
	}

	[RuleVersion(0)]
	public AmortRegisterContext amortRegister() {
		AmortRegisterContext _localctx = new AmortRegisterContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_amortRegister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389; Match(T__20);
			State = 390; Match(AORegister);
			State = 392;
			switch ( Interpreter.AdaptivePredict(_input,58,_ctx) ) {
			case 1:
				{
				State = 391; distributedQ(0);
				}
				break;
			}
			State = 395;
			_la = _input.La(1);
			if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (T__5 - 6)) | (1L << (T__6 - 6)) | (1L << (T__16 - 6)) | (1L << (T__17 - 6)) | (1L << (T__18 - 6)) | (1L << (RangeNull - 6)) | (1L << (RangeAllNotNull - 6)) | (1L << (RangeAYear - 6)) | (1L << (RangeAMonth - 6)) | (1L << (RangeDeltaMonth - 6)) | (1L << (RangeADay - 6)) | (1L << (RangeDeltaDay - 6)) | (1L << (RangeDeltaWeek - 6)) | (1L << (Substract - 6)))) != 0)) {
				{
				State = 394; range();
				}
			}

			State = 399;
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 397; Match(T__1);
				State = 398; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortUnregisterContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode AOUnregister() { return GetToken(ConsoleParser.AOUnregister, 0); }
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AmortUnregisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortUnregister; } }
	}

	[RuleVersion(0)]
	public AmortUnregisterContext amortUnregister() {
		AmortUnregisterContext _localctx = new AmortUnregisterContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_amortUnregister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401; Match(T__20);
			State = 402; Match(AOUnregister);
			State = 404;
			switch ( Interpreter.AdaptivePredict(_input,61,_ctx) ) {
			case 1:
				{
				State = 403; distributedQ(0);
				}
				break;
			}
			State = 407;
			_la = _input.La(1);
			if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (T__5 - 6)) | (1L << (T__6 - 6)) | (1L << (T__16 - 6)) | (1L << (T__17 - 6)) | (1L << (T__18 - 6)) | (1L << (RangeNull - 6)) | (1L << (RangeAllNotNull - 6)) | (1L << (RangeAYear - 6)) | (1L << (RangeAMonth - 6)) | (1L << (RangeDeltaMonth - 6)) | (1L << (RangeADay - 6)) | (1L << (RangeDeltaDay - 6)) | (1L << (RangeDeltaWeek - 6)) | (1L << (Substract - 6)))) != 0)) {
				{
				State = 406; range();
				}
			}

			State = 411;
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 409; Match(T__1);
				State = 410; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortReamoContext : ParserRuleContext {
		public ITerminalNode OReamo() { return GetToken(ConsoleParser.OReamo, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public AmortReamoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortReamo; } }
	}

	[RuleVersion(0)]
	public AmortReamoContext amortReamo() {
		AmortReamoContext _localctx = new AmortReamoContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_amortReamo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413; Match(T__20);
			State = 414; Match(OReamo);
			State = 416;
			switch ( Interpreter.AdaptivePredict(_input,64,_ctx) ) {
			case 1:
				{
				State = 415; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortResetSoftContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOResetSoft() { return GetToken(ConsoleParser.AOResetSoft, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AmortResetSoftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortResetSoft; } }
	}

	[RuleVersion(0)]
	public AmortResetSoftContext amortResetSoft() {
		AmortResetSoftContext _localctx = new AmortResetSoftContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_amortResetSoft);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418; Match(T__20);
			State = 419; Match(AOResetSoft);
			State = 421;
			switch ( Interpreter.AdaptivePredict(_input,65,_ctx) ) {
			case 1:
				{
				State = 420; distributedQ(0);
				}
				break;
			}
			State = 424;
			_la = _input.La(1);
			if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (T__5 - 6)) | (1L << (T__6 - 6)) | (1L << (T__16 - 6)) | (1L << (T__17 - 6)) | (1L << (T__18 - 6)) | (1L << (RangeNull - 6)) | (1L << (RangeAllNotNull - 6)) | (1L << (RangeAYear - 6)) | (1L << (RangeAMonth - 6)) | (1L << (RangeDeltaMonth - 6)) | (1L << (RangeADay - 6)) | (1L << (RangeDeltaDay - 6)) | (1L << (RangeDeltaWeek - 6)) | (1L << (Substract - 6)))) != 0)) {
				{
				State = 423; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortApplyContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOCollapse() { return GetToken(ConsoleParser.AOCollapse, 0); }
		public ITerminalNode AOApply() { return GetToken(ConsoleParser.AOApply, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AmortApplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortApply; } }
	}

	[RuleVersion(0)]
	public AmortApplyContext amortApply() {
		AmortApplyContext _localctx = new AmortApplyContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_amortApply);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426; Match(T__20);
			State = 427; Match(AOApply);
			State = 429;
			switch ( Interpreter.AdaptivePredict(_input,67,_ctx) ) {
			case 1:
				{
				State = 428; Match(AOCollapse);
				}
				break;
			}
			State = 432;
			switch ( Interpreter.AdaptivePredict(_input,68,_ctx) ) {
			case 1:
				{
				State = 431; distributedQ(0);
				}
				break;
			}
			State = 435;
			_la = _input.La(1);
			if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (T__5 - 6)) | (1L << (T__6 - 6)) | (1L << (T__16 - 6)) | (1L << (T__17 - 6)) | (1L << (T__18 - 6)) | (1L << (RangeNull - 6)) | (1L << (RangeAllNotNull - 6)) | (1L << (RangeAYear - 6)) | (1L << (RangeAMonth - 6)) | (1L << (RangeDeltaMonth - 6)) | (1L << (RangeADay - 6)) | (1L << (RangeDeltaDay - 6)) | (1L << (RangeDeltaWeek - 6)) | (1L << (Substract - 6)))) != 0)) {
				{
				State = 434; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortCheckContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOCheck() { return GetToken(ConsoleParser.AOCheck, 0); }
		public AmortCheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortCheck; } }
	}

	[RuleVersion(0)]
	public AmortCheckContext amortCheck() {
		AmortCheckContext _localctx = new AmortCheckContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_amortCheck);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437; Match(T__20);
			State = 438; Match(AOCheck);
			State = 440;
			switch ( Interpreter.AdaptivePredict(_input,70,_ctx) ) {
			case 1:
				{
				State = 439; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DistributedQContext : ParserRuleContext {
		public IToken Op;
		public DistributedQAtomContext distributedQAtom() {
			return GetRuleContext<DistributedQAtomContext>(0);
		}
		public DistributedQContext distributedQ(int i) {
			return GetRuleContext<DistributedQContext>(i);
		}
		public IReadOnlyList<DistributedQContext> distributedQ() {
			return GetRuleContexts<DistributedQContext>();
		}
		public DistributedQContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distributedQ; } }
	}

	[RuleVersion(0)]
	public DistributedQContext distributedQ() {
		return distributedQ(0);
	}

	private DistributedQContext distributedQ(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		DistributedQContext _localctx = new DistributedQContext(_ctx, _parentState);
		DistributedQContext _prevctx = _localctx;
		int _startState = 86;
		EnterRecursionRule(_localctx, 86, RULE_distributedQ, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 450;
			switch ( Interpreter.AdaptivePredict(_input,71,_ctx) ) {
			case 1:
				{
				State = 443;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==Union || _la==Substract) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 444; distributedQ(3);
				}
				break;

			case 2:
				{
				State = 445; distributedQAtom();
				}
				break;

			case 3:
				{
				State = 446; Match(T__12);
				State = 447; distributedQ(0);
				State = 448; Match(T__13);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 460;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,73,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 458;
					switch ( Interpreter.AdaptivePredict(_input,72,_ctx) ) {
					case 1:
						{
						_localctx = new DistributedQContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_distributedQ);
						State = 452;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 453; _localctx.Op = Match(Intersect);
						State = 454; distributedQ(6);
						}
						break;

					case 2:
						{
						_localctx = new DistributedQContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_distributedQ);
						State = 455;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 456;
						_localctx.Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==Union || _la==Substract) ) {
							_localctx.Op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 457; distributedQ(5);
						}
						break;
					}
					} 
				}
				State = 462;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,73,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DistributedQAtomContext : ParserRuleContext {
		public ITerminalNode DollarQuotedString() { return GetToken(ConsoleParser.DollarQuotedString, 0); }
		public ITerminalNode PercentQuotedString() { return GetToken(ConsoleParser.PercentQuotedString, 0); }
		public ITerminalNode Guid() { return GetToken(ConsoleParser.Guid, 0); }
		public RangeCoreContext rangeCore() {
			return GetRuleContext<RangeCoreContext>(0);
		}
		public DistributedQAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distributedQAtom; } }
	}

	[RuleVersion(0)]
	public DistributedQAtomContext distributedQAtom() {
		DistributedQAtomContext _localctx = new DistributedQAtomContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_distributedQAtom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 464;
			switch ( Interpreter.AdaptivePredict(_input,74,_ctx) ) {
			case 1:
				{
				State = 463; Match(Guid);
				}
				break;
			}
			State = 467;
			switch ( Interpreter.AdaptivePredict(_input,75,_ctx) ) {
			case 1:
				{
				State = 466; Match(DollarQuotedString);
				}
				break;
			}
			State = 470;
			switch ( Interpreter.AdaptivePredict(_input,76,_ctx) ) {
			case 1:
				{
				State = 469; Match(PercentQuotedString);
				}
				break;
			}
			State = 476;
			switch ( Interpreter.AdaptivePredict(_input,77,_ctx) ) {
			case 1:
				{
				State = 472; Match(T__21);
				State = 473; rangeCore();
				State = 474; Match(T__22);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return vouchersB_sempred((VouchersBContext)_localctx, predIndex);

		case 14: return details_sempred((DetailsContext)_localctx, predIndex);

		case 43: return distributedQ_sempred((DistributedQContext)_localctx, predIndex);
		}
		return true;
	}
	private bool vouchersB_sempred(VouchersBContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 5);

		case 1: return Precpred(_ctx, 4);
		}
		return true;
	}
	private bool distributedQ_sempred(DistributedQContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(_ctx, 5);

		case 5: return Precpred(_ctx, 4);
		}
		return true;
	}
	private bool details_sempred(DetailsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 5);

		case 3: return Precpred(_ctx, 4);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x46\x1E1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2\x62"+
		"\n\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x6\x5o\n\x5\r\x5\xE\x5p\x3\x5\x5\x5t\n\x5\x3\x6\x3\x6\x3\x6\x5\x6y\n"+
		"\x6\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\t\x3\t\x5\t\x83\n\t\x3\t\x5\t\x86"+
		"\n\t\x3\n\x3\n\x5\n\x8A\n\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\x91\n\n\x3\v"+
		"\x3\v\x3\v\x3\v\x5\v\x97\n\v\x3\f\x3\f\x3\f\x5\f\x9C\n\f\x3\r\x3\r\x5"+
		"\r\xA0\n\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x5\xE\xAD\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\a\xE\xB5\n\xE"+
		"\f\xE\xE\xE\xB8\v\xE\x3\xF\x5\xF\xBB\n\xF\x3\xF\x5\xF\xBE\n\xF\x3\xF\x5"+
		"\xF\xC1\n\xF\x3\xF\x5\xF\xC4\n\xF\x3\xF\x5\xF\xC7\n\xF\x3\xF\x5\xF\xCA"+
		"\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\xD4"+
		"\n\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\a\x10\xDC\n\x10\f\x10"+
		"\xE\x10\xDF\v\x10\x3\x11\x5\x11\xE2\n\x11\x3\x11\x5\x11\xE5\n\x11\x3\x11"+
		"\x5\x11\xE8\n\x11\x3\x11\x5\x11\xEB\n\x11\x3\x12\x3\x12\x3\x12\x3\x12"+
		"\x3\x12\x3\x12\x5\x12\xF3\n\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5"+
		"\x13\xFA\n\x13\x3\x13\x3\x13\x3\x13\x5\x13\xFF\n\x13\x3\x14\x3\x14\x3"+
		"\x14\x5\x14\x104\n\x14\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x10A\n\x15\x3"+
		"\x16\x3\x16\x3\x17\x5\x17\x10F\n\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19"+
		"\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A"+
		"\x5\x1A\x120\n\x1A\x3\x1B\x3\x1B\x5\x1B\x124\n\x1B\x3\x1B\x5\x1B\x127"+
		"\n\x1B\x3\x1B\x5\x1B\x12A\n\x1B\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x12F\n\x1C"+
		"\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x134\n\x1D\x3\x1D\x5\x1D\x137\n\x1D\x3\x1D"+
		"\x3\x1D\x5\x1D\x13B\n\x1D\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x140\n\x1E\x3\x1E"+
		"\x5\x1E\x143\n\x1E\x3\x1E\x3\x1E\x5\x1E\x147\n\x1E\x3\x1F\x3\x1F\x3\x1F"+
		"\x5\x1F\x14C\n\x1F\x3 \x3 \x3 \x5 \x151\n \x3 \x5 \x154\n \x3!\x3!\x3"+
		"!\x5!\x159\n!\x3!\x3!\x5!\x15D\n!\x3\"\x3\"\x3\"\x5\"\x162\n\"\x3\"\x5"+
		"\"\x165\n\"\x3\"\x5\"\x168\n\"\x3#\x3#\x3#\x5#\x16D\n#\x3$\x3$\x3$\x3"+
		"$\x3$\x3$\x3$\x3$\x5$\x177\n$\x3%\x3%\x5%\x17B\n%\x3%\x5%\x17E\n%\x3%"+
		"\x5%\x181\n%\x3&\x3&\x3&\x5&\x186\n&\x3\'\x3\'\x3\'\x5\'\x18B\n\'\x3\'"+
		"\x5\'\x18E\n\'\x3\'\x3\'\x5\'\x192\n\'\x3(\x3(\x3(\x5(\x197\n(\x3(\x5"+
		"(\x19A\n(\x3(\x3(\x5(\x19E\n(\x3)\x3)\x3)\x5)\x1A3\n)\x3*\x3*\x3*\x5*"+
		"\x1A8\n*\x3*\x5*\x1AB\n*\x3+\x3+\x3+\x5+\x1B0\n+\x3+\x5+\x1B3\n+\x3+\x5"+
		"+\x1B6\n+\x3,\x3,\x3,\x5,\x1BB\n,\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x5-"+
		"\x1C5\n-\x3-\x3-\x3-\x3-\x3-\x3-\a-\x1CD\n-\f-\xE-\x1D0\v-\x3.\x5.\x1D3"+
		"\n.\x3.\x5.\x1D6\n.\x3.\x5.\x1D9\n.\x3.\x3.\x3.\x3.\x5.\x1DF\n.\x3.\x2"+
		"\x2\x5\x1A\x1EX/\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2"+
		"\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2"+
		".\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2"+
		"\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\x2\xE\x3\x2\x1A#\x3\x2"+
		"\x41\x42\x3\x2\x5\x6\x3\x2\x44\x45\x4\x2\v\v\xE\xE\x3\x2?@\x3\x2\x11\x12"+
		"\x4\x2\x13\x13\x45\x45\x3\x2\x14\x15\x3\x2\x35\x36\x3\x2\x37\x38\x3\x2"+
		"$%\x21B\x2\x61\x3\x2\x2\x2\x4\x65\x3\x2\x2\x2\x6g\x3\x2\x2\x2\bs\x3\x2"+
		"\x2\x2\nu\x3\x2\x2\x2\fz\x3\x2\x2\x2\xE}\x3\x2\x2\x2\x10\x80\x3\x2\x2"+
		"\x2\x12\x90\x3\x2\x2\x2\x14\x96\x3\x2\x2\x2\x16\x9B\x3\x2\x2\x2\x18\x9F"+
		"\x3\x2\x2\x2\x1A\xAC\x3\x2\x2\x2\x1C\xBA\x3\x2\x2\x2\x1E\xD3\x3\x2\x2"+
		"\x2 \xE1\x3\x2\x2\x2\"\xF2\x3\x2\x2\x2$\xFE\x3\x2\x2\x2&\x103\x3\x2\x2"+
		"\x2(\x109\x3\x2\x2\x2*\x10B\x3\x2\x2\x2,\x10E\x3\x2\x2\x2.\x112\x3\x2"+
		"\x2\x2\x30\x114\x3\x2\x2\x2\x32\x11F\x3\x2\x2\x2\x34\x121\x3\x2\x2\x2"+
		"\x36\x12B\x3\x2\x2\x2\x38\x130\x3\x2\x2\x2:\x13C\x3\x2\x2\x2<\x148\x3"+
		"\x2\x2\x2>\x14D\x3\x2\x2\x2@\x155\x3\x2\x2\x2\x42\x15E\x3\x2\x2\x2\x44"+
		"\x169\x3\x2\x2\x2\x46\x176\x3\x2\x2\x2H\x178\x3\x2\x2\x2J\x182\x3\x2\x2"+
		"\x2L\x187\x3\x2\x2\x2N\x193\x3\x2\x2\x2P\x19F\x3\x2\x2\x2R\x1A4\x3\x2"+
		"\x2\x2T\x1AC\x3\x2\x2\x2V\x1B7\x3\x2\x2\x2X\x1C4\x3\x2\x2\x2Z\x1D2\x3"+
		"\x2\x2\x2\\\x62\x5\x18\r\x2]\x62\x5\x6\x4\x2^\x62\x5\x32\x1A\x2_\x62\x5"+
		"\x46$\x2`\x62\x5\x4\x3\x2\x61\\\x3\x2\x2\x2\x61]\x3\x2\x2\x2\x61^\x3\x2"+
		"\x2\x2\x61_\x3\x2\x2\x2\x61`\x3\x2\x2\x2\x62\x63\x3\x2\x2\x2\x63\x64\a"+
		"\x2\x2\x3\x64\x3\x3\x2\x2\x2\x65\x66\t\x2\x2\x2\x66\x5\x3\x2\x2\x2gh\x5"+
		"\x14\v\x2hi\x5\x10\t\x2i\a\x3\x2\x2\x2jk\x5\f\a\x2kn\x5\b\x5\x2lm\a\x3"+
		"\x2\x2mo\x5\b\x5\x2nl\x3\x2\x2\x2op\x3\x2\x2\x2pn\x3\x2\x2\x2pq\x3\x2"+
		"\x2\x2qt\x3\x2\x2\x2rt\x5\n\x6\x2sj\x3\x2\x2\x2sr\x3\x2\x2\x2t\t\x3\x2"+
		"\x2\x2uv\x5\f\a\x2vx\x5\x6\x4\x2wy\x5\xE\b\x2xw\x3\x2\x2\x2xy\x3\x2\x2"+
		"\x2y\v\x3\x2\x2\x2z{\a<\x2\x2{|\a\x4\x2\x2|\r\x3\x2\x2\x2}~\a\x43\x2\x2"+
		"~\x7F\t\x3\x2\x2\x7F\xF\x3\x2\x2\x2\x80\x82\t\x4\x2\x2\x81\x83\a\x30\x2"+
		"\x2\x82\x81\x3\x2\x2\x2\x82\x83\x3\x2\x2\x2\x83\x85\x3\x2\x2\x2\x84\x86"+
		"\x5\x12\n\x2\x85\x84\x3\x2\x2\x2\x85\x86\x3\x2\x2\x2\x86\x11\x3\x2\x2"+
		"\x2\x87\x89\a\a\x2\x2\x88\x8A\a\b\x2\x2\x89\x88\x3\x2\x2\x2\x89\x8A\x3"+
		"\x2\x2\x2\x8A\x91\x3\x2\x2\x2\x8B\x8C\a\a\x2\x2\x8C\x8D\a\t\x2\x2\x8D"+
		"\x8E\x5$\x13\x2\x8E\x8F\a\n\x2\x2\x8F\x91\x3\x2\x2\x2\x90\x87\x3\x2\x2"+
		"\x2\x90\x8B\x3\x2\x2\x2\x91\x13\x3\x2\x2\x2\x92\x93\x5\x18\r\x2\x93\x94"+
		"\x5\x16\f\x2\x94\x97\x3\x2\x2\x2\x95\x97\x5\x1C\xF\x2\x96\x92\x3\x2\x2"+
		"\x2\x96\x95\x3\x2\x2\x2\x97\x15\x3\x2\x2\x2\x98\x9C\a\v\x2\x2\x99\x9A"+
		"\a\x4\x2\x2\x9A\x9C\x5\x1E\x10\x2\x9B\x98\x3\x2\x2\x2\x9B\x99\x3\x2\x2"+
		"\x2\x9C\x17\x3\x2\x2\x2\x9D\xA0\x5\x1A\xE\x2\x9E\xA0\x5\x1C\xF\x2\x9F"+
		"\x9D\x3\x2\x2\x2\x9F\x9E\x3\x2\x2\x2\xA0\x19\x3\x2\x2\x2\xA1\xA2\b\xE"+
		"\x1\x2\xA2\xA3\t\x5\x2\x2\xA3\xAD\x5\x1A\xE\x5\xA4\xA5\a\f\x2\x2\xA5\xA6"+
		"\x5\x1C\xF\x2\xA6\xA7\a\r\x2\x2\xA7\xAD\x3\x2\x2\x2\xA8\xA9\a\f\x2\x2"+
		"\xA9\xAA\x5\x1A\xE\x2\xAA\xAB\a\r\x2\x2\xAB\xAD\x3\x2\x2\x2\xAC\xA1\x3"+
		"\x2\x2\x2\xAC\xA4\x3\x2\x2\x2\xAC\xA8\x3\x2\x2\x2\xAD\xB6\x3\x2\x2\x2"+
		"\xAE\xAF\f\a\x2\x2\xAF\xB0\a\x43\x2\x2\xB0\xB5\x5\x1A\xE\b\xB1\xB2\f\x6"+
		"\x2\x2\xB2\xB3\t\x5\x2\x2\xB3\xB5\x5\x1A\xE\a\xB4\xAE\x3\x2\x2\x2\xB4"+
		"\xB1\x3\x2\x2\x2\xB5\xB8\x3\x2\x2\x2\xB6\xB4\x3\x2\x2\x2\xB6\xB7\x3\x2"+
		"\x2\x2\xB7\x1B\x3\x2\x2\x2\xB8\xB6\x3\x2\x2\x2\xB9\xBB\x5\x1E\x10\x2\xBA"+
		"\xB9\x3\x2\x2\x2\xBA\xBB\x3\x2\x2\x2\xBB\xBD\x3\x2\x2\x2\xBC\xBE\t\x6"+
		"\x2\x2\xBD\xBC\x3\x2\x2\x2\xBD\xBE\x3\x2\x2\x2\xBE\xC0\x3\x2\x2\x2\xBF"+
		"\xC1\x5\"\x12\x2\xC0\xBF\x3\x2\x2\x2\xC0\xC1\x3\x2\x2\x2\xC1\xC3\x3\x2"+
		"\x2\x2\xC2\xC4\a<\x2\x2\xC3\xC2\x3\x2\x2\x2\xC3\xC4\x3\x2\x2\x2\xC4\xC6"+
		"\x3\x2\x2\x2\xC5\xC7\a;\x2\x2\xC6\xC5\x3\x2\x2\x2\xC6\xC7\x3\x2\x2\x2"+
		"\xC7\xC9\x3\x2\x2\x2\xC8\xCA\a:\x2\x2\xC9\xC8\x3\x2\x2\x2\xC9\xCA\x3\x2"+
		"\x2\x2\xCA\x1D\x3\x2\x2\x2\xCB\xCC\b\x10\x1\x2\xCC\xCD\t\x5\x2\x2\xCD"+
		"\xD4\x5\x1E\x10\x5\xCE\xD4\x5 \x11\x2\xCF\xD0\a\xF\x2\x2\xD0\xD1\x5\x1E"+
		"\x10\x2\xD1\xD2\a\x10\x2\x2\xD2\xD4\x3\x2\x2\x2\xD3\xCB\x3\x2\x2\x2\xD3"+
		"\xCE\x3\x2\x2\x2\xD3\xCF\x3\x2\x2\x2\xD4\xDD\x3\x2\x2\x2\xD5\xD6\f\a\x2"+
		"\x2\xD6\xD7\a\x43\x2\x2\xD7\xDC\x5\x1E\x10\b\xD8\xD9\f\x6\x2\x2\xD9\xDA"+
		"\t\x5\x2\x2\xDA\xDC\x5\x1E\x10\a\xDB\xD5\x3\x2\x2\x2\xDB\xD8\x3\x2\x2"+
		"\x2\xDC\xDF\x3\x2\x2\x2\xDD\xDB\x3\x2\x2\x2\xDD\xDE\x3\x2\x2\x2\xDE\x1F"+
		"\x3\x2\x2\x2\xDF\xDD\x3\x2\x2\x2\xE0\xE2\t\a\x2\x2\xE1\xE0\x3\x2\x2\x2"+
		"\xE1\xE2\x3\x2\x2\x2\xE2\xE4\x3\x2\x2\x2\xE3\xE5\a>\x2\x2\xE4\xE3\x3\x2"+
		"\x2\x2\xE4\xE5\x3\x2\x2\x2\xE5\xE7\x3\x2\x2\x2\xE6\xE8\a=\x2\x2\xE7\xE6"+
		"\x3\x2\x2\x2\xE7\xE8\x3\x2\x2\x2\xE8\xEA\x3\x2\x2\x2\xE9\xEB\t\b\x2\x2"+
		"\xEA\xE9\x3\x2\x2\x2\xEA\xEB\x3\x2\x2\x2\xEB!\x3\x2\x2\x2\xEC\xF3\a\b"+
		"\x2\x2\xED\xF3\x5$\x13\x2\xEE\xEF\a\t\x2\x2\xEF\xF0\x5$\x13\x2\xF0\xF1"+
		"\a\n\x2\x2\xF1\xF3\x3\x2\x2\x2\xF2\xEC\x3\x2\x2\x2\xF2\xED\x3\x2\x2\x2"+
		"\xF2\xEE\x3\x2\x2\x2\xF3#\x3\x2\x2\x2\xF4\xFF\a\x32\x2\x2\xF5\xFF\a\x33"+
		"\x2\x2\xF6\xF7\x5(\x15\x2\xF7\xF9\t\t\x2\x2\xF8\xFA\x5(\x15\x2\xF9\xF8"+
		"\x3\x2\x2\x2\xF9\xFA\x3\x2\x2\x2\xFA\xFF\x3\x2\x2\x2\xFB\xFC\t\t\x2\x2"+
		"\xFC\xFF\x5(\x15\x2\xFD\xFF\x5(\x15\x2\xFE\xF4\x3\x2\x2\x2\xFE\xF5\x3"+
		"\x2\x2\x2\xFE\xF6\x3\x2\x2\x2\xFE\xFB\x3\x2\x2\x2\xFE\xFD\x3\x2\x2\x2"+
		"\xFF%\x3\x2\x2\x2\x100\x104\a\x32\x2\x2\x101\x104\a\b\x2\x2\x102\x104"+
		"\x5(\x15\x2\x103\x100\x3\x2\x2\x2\x103\x101\x3\x2\x2\x2\x103\x102\x3\x2"+
		"\x2\x2\x104\'\x3\x2\x2\x2\x105\x10A\x5*\x16\x2\x106\x10A\x5,\x17\x2\x107"+
		"\x10A\x5.\x18\x2\x108\x10A\x5\x30\x19\x2\x109\x105\x3\x2\x2\x2\x109\x106"+
		"\x3\x2\x2\x2\x109\x107\x3\x2\x2\x2\x109\x108\x3\x2\x2\x2\x10A)\x3\x2\x2"+
		"\x2\x10B\x10C\a\x34\x2\x2\x10C+\x3\x2\x2\x2\x10D\x10F\t\n\x2\x2\x10E\x10D"+
		"\x3\x2\x2\x2\x10E\x10F\x3\x2\x2\x2\x10F\x110\x3\x2\x2\x2\x110\x111\t\v"+
		"\x2\x2\x111-\x3\x2\x2\x2\x112\x113\a\x39\x2\x2\x113/\x3\x2\x2\x2\x114"+
		"\x115\t\f\x2\x2\x115\x31\x3\x2\x2\x2\x116\x120\x5\x34\x1B\x2\x117\x120"+
		"\x5\x36\x1C\x2\x118\x120\x5\x38\x1D\x2\x119\x120\x5:\x1E\x2\x11A\x120"+
		"\x5<\x1F\x2\x11B\x120\x5> \x2\x11C\x120\x5@!\x2\x11D\x120\x5\x42\"\x2"+
		"\x11E\x120\x5\x44#\x2\x11F\x116\x3\x2\x2\x2\x11F\x117\x3\x2\x2\x2\x11F"+
		"\x118\x3\x2\x2\x2\x11F\x119\x3\x2\x2\x2\x11F\x11A\x3\x2\x2\x2\x11F\x11B"+
		"\x3\x2\x2\x2\x11F\x11C\x3\x2\x2\x2\x11F\x11D\x3\x2\x2\x2\x11F\x11E\x3"+
		"\x2\x2\x2\x120\x33\x3\x2\x2\x2\x121\x123\a\x16\x2\x2\x122\x124\t\r\x2"+
		"\x2\x123\x122\x3\x2\x2\x2\x123\x124\x3\x2\x2\x2\x124\x126\x3\x2\x2\x2"+
		"\x125\x127\x5&\x14\x2\x126\x125\x3\x2\x2\x2\x126\x127\x3\x2\x2\x2\x127"+
		"\x129\x3\x2\x2\x2\x128\x12A\x5X-\x2\x129\x128\x3\x2\x2\x2\x129\x12A\x3"+
		"\x2\x2\x2\x12A\x35\x3\x2\x2\x2\x12B\x12C\a\x16\x2\x2\x12C\x12E\a&\x2\x2"+
		"\x12D\x12F\x5X-\x2\x12E\x12D\x3\x2\x2\x2\x12E\x12F\x3\x2\x2\x2\x12F\x37"+
		"\x3\x2\x2\x2\x130\x131\a\x16\x2\x2\x131\x133\a\'\x2\x2\x132\x134\x5X-"+
		"\x2\x133\x132\x3\x2\x2\x2\x133\x134\x3\x2\x2\x2\x134\x136\x3\x2\x2\x2"+
		"\x135\x137\x5\"\x12\x2\x136\x135\x3\x2\x2\x2\x136\x137\x3\x2\x2\x2\x137"+
		"\x13A\x3\x2\x2\x2\x138\x139\a\x4\x2\x2\x139\x13B\x5\x18\r\x2\x13A\x138"+
		"\x3\x2\x2\x2\x13A\x13B\x3\x2\x2\x2\x13B\x39\x3\x2\x2\x2\x13C\x13D\a\x16"+
		"\x2\x2\x13D\x13F\a(\x2\x2\x13E\x140\x5X-\x2\x13F\x13E\x3\x2\x2\x2\x13F"+
		"\x140\x3\x2\x2\x2\x140\x142\x3\x2\x2\x2\x141\x143\x5\"\x12\x2\x142\x141"+
		"\x3\x2\x2\x2\x142\x143\x3\x2\x2\x2\x143\x146\x3\x2\x2\x2\x144\x145\a\x4"+
		"\x2\x2\x145\x147\x5\x18\r\x2\x146\x144\x3\x2\x2\x2\x146\x147\x3\x2\x2"+
		"\x2\x147;\x3\x2\x2\x2\x148\x149\a\x16\x2\x2\x149\x14B\a)\x2\x2\x14A\x14C"+
		"\x5X-\x2\x14B\x14A\x3\x2\x2\x2\x14B\x14C\x3\x2\x2\x2\x14C=\x3\x2\x2\x2"+
		"\x14D\x14E\a\x16\x2\x2\x14E\x150\a+\x2\x2\x14F\x151\x5X-\x2\x150\x14F"+
		"\x3\x2\x2\x2\x150\x151\x3\x2\x2\x2\x151\x153\x3\x2\x2\x2\x152\x154\x5"+
		"\"\x12\x2\x153\x152\x3\x2\x2\x2\x153\x154\x3\x2\x2\x2\x154?\x3\x2\x2\x2"+
		"\x155\x156\a\x16\x2\x2\x156\x158\a,\x2\x2\x157\x159\x5X-\x2\x158\x157"+
		"\x3\x2\x2\x2\x158\x159\x3\x2\x2\x2\x159\x15C\x3\x2\x2\x2\x15A\x15B\a\x4"+
		"\x2\x2\x15B\x15D\x5\x18\r\x2\x15C\x15A\x3\x2\x2\x2\x15C\x15D\x3\x2\x2"+
		"\x2\x15D\x41\x3\x2\x2\x2\x15E\x15F\a\x16\x2\x2\x15F\x161\a-\x2\x2\x160"+
		"\x162\a.\x2\x2\x161\x160\x3\x2\x2\x2\x161\x162\x3\x2\x2\x2\x162\x164\x3"+
		"\x2\x2\x2\x163\x165\x5X-\x2\x164\x163\x3\x2\x2\x2\x164\x165\x3\x2\x2\x2"+
		"\x165\x167\x3\x2\x2\x2\x166\x168\x5\"\x12\x2\x167\x166\x3\x2\x2\x2\x167"+
		"\x168\x3\x2\x2\x2\x168\x43\x3\x2\x2\x2\x169\x16A\a\x16\x2\x2\x16A\x16C"+
		"\a/\x2\x2\x16B\x16D\x5X-\x2\x16C\x16B\x3\x2\x2\x2\x16C\x16D\x3\x2\x2\x2"+
		"\x16D\x45\x3\x2\x2\x2\x16E\x177\x5H%\x2\x16F\x177\x5J&\x2\x170\x177\x5"+
		"L\'\x2\x171\x177\x5N(\x2\x172\x177\x5P)\x2\x173\x177\x5R*\x2\x174\x177"+
		"\x5T+\x2\x175\x177\x5V,\x2\x176\x16E\x3\x2\x2\x2\x176\x16F\x3\x2\x2\x2"+
		"\x176\x170\x3\x2\x2\x2\x176\x171\x3\x2\x2\x2\x176\x172\x3\x2\x2\x2\x176"+
		"\x173\x3\x2\x2\x2\x176\x174\x3\x2\x2\x2\x176\x175\x3\x2\x2\x2\x177G\x3"+
		"\x2\x2\x2\x178\x17A\a\x17\x2\x2\x179\x17B\t\r\x2\x2\x17A\x179\x3\x2\x2"+
		"\x2\x17A\x17B\x3\x2\x2\x2\x17B\x17D\x3\x2\x2\x2\x17C\x17E\x5&\x14\x2\x17D"+
		"\x17C\x3\x2\x2\x2\x17D\x17E\x3\x2\x2\x2\x17E\x180\x3\x2\x2\x2\x17F\x181"+
		"\x5X-\x2\x180\x17F\x3\x2\x2\x2\x180\x181\x3\x2\x2\x2\x181I\x3\x2\x2\x2"+
		"\x182\x183\a\x17\x2\x2\x183\x185\a&\x2\x2\x184\x186\x5X-\x2\x185\x184"+
		"\x3\x2\x2\x2\x185\x186\x3\x2\x2\x2\x186K\x3\x2\x2\x2\x187\x188\a\x17\x2"+
		"\x2\x188\x18A\a\'\x2\x2\x189\x18B\x5X-\x2\x18A\x189\x3\x2\x2\x2\x18A\x18B"+
		"\x3\x2\x2\x2\x18B\x18D\x3\x2\x2\x2\x18C\x18E\x5\"\x12\x2\x18D\x18C\x3"+
		"\x2\x2\x2\x18D\x18E\x3\x2\x2\x2\x18E\x191\x3\x2\x2\x2\x18F\x190\a\x4\x2"+
		"\x2\x190\x192\x5\x18\r\x2\x191\x18F\x3\x2\x2\x2\x191\x192\x3\x2\x2\x2"+
		"\x192M\x3\x2\x2\x2\x193\x194\a\x17\x2\x2\x194\x196\a(\x2\x2\x195\x197"+
		"\x5X-\x2\x196\x195\x3\x2\x2\x2\x196\x197\x3\x2\x2\x2\x197\x199\x3\x2\x2"+
		"\x2\x198\x19A\x5\"\x12\x2\x199\x198\x3\x2\x2\x2\x199\x19A\x3\x2\x2\x2"+
		"\x19A\x19D\x3\x2\x2\x2\x19B\x19C\a\x4\x2\x2\x19C\x19E\x5\x18\r\x2\x19D"+
		"\x19B\x3\x2\x2\x2\x19D\x19E\x3\x2\x2\x2\x19EO\x3\x2\x2\x2\x19F\x1A0\a"+
		"\x17\x2\x2\x1A0\x1A2\a*\x2\x2\x1A1\x1A3\x5X-\x2\x1A2\x1A1\x3\x2\x2\x2"+
		"\x1A2\x1A3\x3\x2\x2\x2\x1A3Q\x3\x2\x2\x2\x1A4\x1A5\a\x17\x2\x2\x1A5\x1A7"+
		"\a+\x2\x2\x1A6\x1A8\x5X-\x2\x1A7\x1A6\x3\x2\x2\x2\x1A7\x1A8\x3\x2\x2\x2"+
		"\x1A8\x1AA\x3\x2\x2\x2\x1A9\x1AB\x5\"\x12\x2\x1AA\x1A9\x3\x2\x2\x2\x1AA"+
		"\x1AB\x3\x2\x2\x2\x1ABS\x3\x2\x2\x2\x1AC\x1AD\a\x17\x2\x2\x1AD\x1AF\a"+
		"-\x2\x2\x1AE\x1B0\a.\x2\x2\x1AF\x1AE\x3\x2\x2\x2\x1AF\x1B0\x3\x2\x2\x2"+
		"\x1B0\x1B2\x3\x2\x2\x2\x1B1\x1B3\x5X-\x2\x1B2\x1B1\x3\x2\x2\x2\x1B2\x1B3"+
		"\x3\x2\x2\x2\x1B3\x1B5\x3\x2\x2\x2\x1B4\x1B6\x5\"\x12\x2\x1B5\x1B4\x3"+
		"\x2\x2\x2\x1B5\x1B6\x3\x2\x2\x2\x1B6U\x3\x2\x2\x2\x1B7\x1B8\a\x17\x2\x2"+
		"\x1B8\x1BA\a/\x2\x2\x1B9\x1BB\x5X-\x2\x1BA\x1B9\x3\x2\x2\x2\x1BA\x1BB"+
		"\x3\x2\x2\x2\x1BBW\x3\x2\x2\x2\x1BC\x1BD\b-\x1\x2\x1BD\x1BE\t\x5\x2\x2"+
		"\x1BE\x1C5\x5X-\x5\x1BF\x1C5\x5Z.\x2\x1C0\x1C1\a\xF\x2\x2\x1C1\x1C2\x5"+
		"X-\x2\x1C2\x1C3\a\x10\x2\x2\x1C3\x1C5\x3\x2\x2\x2\x1C4\x1BC\x3\x2\x2\x2"+
		"\x1C4\x1BF\x3\x2\x2\x2\x1C4\x1C0\x3\x2\x2\x2\x1C5\x1CE\x3\x2\x2\x2\x1C6"+
		"\x1C7\f\a\x2\x2\x1C7\x1C8\a\x43\x2\x2\x1C8\x1CD\x5X-\b\x1C9\x1CA\f\x6"+
		"\x2\x2\x1CA\x1CB\t\x5\x2\x2\x1CB\x1CD\x5X-\a\x1CC\x1C6\x3\x2\x2\x2\x1CC"+
		"\x1C9\x3\x2\x2\x2\x1CD\x1D0\x3\x2\x2\x2\x1CE\x1CC\x3\x2\x2\x2\x1CE\x1CF"+
		"\x3\x2\x2\x2\x1CFY\x3\x2\x2\x2\x1D0\x1CE\x3\x2\x2\x2\x1D1\x1D3\a\x31\x2"+
		"\x2\x1D2\x1D1\x3\x2\x2\x2\x1D2\x1D3\x3\x2\x2\x2\x1D3\x1D5\x3\x2\x2\x2"+
		"\x1D4\x1D6\a<\x2\x2\x1D5\x1D4\x3\x2\x2\x2\x1D5\x1D6\x3\x2\x2\x2\x1D6\x1D8"+
		"\x3\x2\x2\x2\x1D7\x1D9\a;\x2\x2\x1D8\x1D7\x3\x2\x2\x2\x1D8\x1D9\x3\x2"+
		"\x2\x2\x1D9\x1DE\x3\x2\x2\x2\x1DA\x1DB\a\x18\x2\x2\x1DB\x1DC\x5$\x13\x2"+
		"\x1DC\x1DD\a\x19\x2\x2\x1DD\x1DF\x3\x2\x2\x2\x1DE\x1DA\x3\x2\x2\x2\x1DE"+
		"\x1DF\x3\x2\x2\x2\x1DF[\x3\x2\x2\x2P\x61psx\x82\x85\x89\x90\x96\x9B\x9F"+
		"\xAC\xB4\xB6\xBA\xBD\xC0\xC3\xC6\xC9\xD3\xDB\xDD\xE1\xE4\xE7\xEA\xF2\xF9"+
		"\xFE\x103\x109\x10E\x11F\x123\x126\x129\x12E\x133\x136\x13A\x13F\x142"+
		"\x146\x14B\x150\x153\x158\x15C\x161\x164\x167\x16C\x176\x17A\x17D\x180"+
		"\x185\x18A\x18D\x191\x196\x199\x19D\x1A2\x1A7\x1AA\x1AF\x1B2\x1B5\x1BA"+
		"\x1C4\x1CC\x1CE\x1D2\x1D5\x1D8\x1DE";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace AccountingServer.Console
