//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.4.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\b1f6c1c4\Documents\GitHub\ProfessionalAccounting\Server\AccountingServer.QueryGeneration\Console.g4 by ANTLR 4.4.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace AccountingServer.Console {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.4.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class ConsoleParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		ChartArea=32, Series=33, Ignore=34, Launch=35, Connect=36, Shutdown=37, 
		Backup=38, Mobile=39, Fetch=40, Help=41, Titles=42, Exit=43, Check=44, 
		EditNamedQueries=45, AOAll=46, AOList=47, AOQuery=48, AORegister=49, AOUnregister=50, 
		AORecalc=51, AOResetSoft=52, AOResetHard=53, AOResetMixed=54, AOApply=55, 
		AOCollapse=56, AOCheck=57, SubtotalFields=58, Guid=59, RangeNull=60, RangeAllNotNull=61, 
		RangeAYear=62, RangeAMonth=63, RangeDeltaMonth=64, RangeADay=65, RangeDeltaDay=66, 
		RangeDeltaWeek=67, VoucherType=68, CaretQuotedString=69, PercentQuotedString=70, 
		DollarQuotedString=71, DoubleQuotedString=72, SingleQuotedString=73, DetailTitle=74, 
		DetailTitleSubTitle=75, Float=76, Percent=77, Intersect=78, Union=79, 
		Substract=80, WS=81;
	public const int
		RULE_command = 0, RULE_otherCommand = 1, RULE_chart = 2, RULE_chartLevels = 3, 
		RULE_chartLevel = 4, RULE_report = 5, RULE_namedQuery = 6, RULE_namedQueries = 7, 
		RULE_namedQ = 8, RULE_namedQueryReference = 9, RULE_name = 10, RULE_coef = 11, 
		RULE_groupedQuery = 12, RULE_subtotal = 13, RULE_subtotalAggr = 14, RULE_voucherDetailQuery = 15, 
		RULE_emit = 16, RULE_vouchers = 17, RULE_vouchersB = 18, RULE_voucherQuery = 19, 
		RULE_details = 20, RULE_detailQuery = 21, RULE_range = 22, RULE_rangeCore = 23, 
		RULE_rangePoint = 24, RULE_rangeCertainPoint = 25, RULE_rangeYear = 26, 
		RULE_rangeMonth = 27, RULE_rangeWeek = 28, RULE_rangeDay = 29, RULE_asset = 30, 
		RULE_assetList = 31, RULE_assetQuery = 32, RULE_assetRegister = 33, RULE_assetUnregister = 34, 
		RULE_assetRedep = 35, RULE_assetResetSoft = 36, RULE_assetResetMixed = 37, 
		RULE_assetResetHard = 38, RULE_assetApply = 39, RULE_assetCheck = 40, 
		RULE_amort = 41, RULE_amortList = 42, RULE_amortQuery = 43, RULE_amortRegister = 44, 
		RULE_amortUnregister = 45, RULE_amortReamo = 46, RULE_amortResetSoft = 47, 
		RULE_amortResetMixed = 48, RULE_amortApply = 49, RULE_amortCheck = 50, 
		RULE_distributedQ = 51, RULE_distributedQAtom = 52, RULE_carry = 53, RULE_carryMonthResetHard = 54, 
		RULE_carryMonth = 55, RULE_carryYearResetHard = 56, RULE_carryYear = 57;
	public static readonly string[] ruleNames = {
		"command", "otherCommand", "chart", "chartLevels", "chartLevel", "report", 
		"namedQuery", "namedQueries", "namedQ", "namedQueryReference", "name", 
		"coef", "groupedQuery", "subtotal", "subtotalAggr", "voucherDetailQuery", 
		"emit", "vouchers", "vouchersB", "voucherQuery", "details", "detailQuery", 
		"range", "rangeCore", "rangePoint", "rangeCertainPoint", "rangeYear", 
		"rangeMonth", "rangeWeek", "rangeDay", "asset", "assetList", "assetQuery", 
		"assetRegister", "assetUnregister", "assetRedep", "assetResetSoft", "assetResetMixed", 
		"assetResetHard", "assetApply", "assetCheck", "amort", "amortList", "amortQuery", 
		"amortRegister", "amortUnregister", "amortReamo", "amortResetSoft", "amortResetMixed", 
		"amortApply", "amortCheck", "distributedQ", "distributedQAtom", "carry", 
		"carryMonthResetHard", "carryMonth", "carryYearResetHard", "carryYear"
	};

	private static readonly string[] _LiteralNames = {
		null, "'ch'", "';'", "':'", "'='", "'rp'", "'::'", "'|'", "'`'", "'``'", 
		"'!'", "'D'", "'[]'", "'['", "']'", "'A'", "'{'", "'}'", "'E'", "'('", 
		"')'", "'>'", "'<'", "'~'", "'@'", "'#'", "'a'", "'o'", "'[['", "']]'", 
		"'ca'", "'caa'", "'chartArea'", "'series'", "'ignore'", null, null, null, 
		"'backup'", null, "'fetch'", null, null, "'exit'", null, "'nq'", "'-all'", 
		null, null, null, null, null, "'-reset-soft'", "'-reset-hard'", "'-reset-mixed'", 
		null, null, "'-chk'", null, null, "'null'", "'~null'", null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "'*'", "'+'", "'-'", "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "ChartArea", "Series", 
		"Ignore", "Launch", "Connect", "Shutdown", "Backup", "Mobile", "Fetch", 
		"Help", "Titles", "Exit", "Check", "EditNamedQueries", "AOAll", "AOList", 
		"AOQuery", "AORegister", "AOUnregister", "AORecalc", "AOResetSoft", "AOResetHard", 
		"AOResetMixed", "AOApply", "AOCollapse", "AOCheck", "SubtotalFields", 
		"Guid", "RangeNull", "RangeAllNotNull", "RangeAYear", "RangeAMonth", "RangeDeltaMonth", 
		"RangeADay", "RangeDeltaDay", "RangeDeltaWeek", "VoucherType", "CaretQuotedString", 
		"PercentQuotedString", "DollarQuotedString", "DoubleQuotedString", "SingleQuotedString", 
		"DetailTitle", "DetailTitleSubTitle", "Float", "Percent", "Intersect", 
		"Union", "Substract", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Console.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public ConsoleParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CommandContext : ParserRuleContext {
		public AssetContext asset() {
			return GetRuleContext<AssetContext>(0);
		}
		public GroupedQueryContext groupedQuery() {
			return GetRuleContext<GroupedQueryContext>(0);
		}
		public ChartContext chart() {
			return GetRuleContext<ChartContext>(0);
		}
		public AmortContext amort() {
			return GetRuleContext<AmortContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(ConsoleParser.Eof, 0); }
		public OtherCommandContext otherCommand() {
			return GetRuleContext<OtherCommandContext>(0);
		}
		public CarryContext carry() {
			return GetRuleContext<CarryContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public ReportContext report() {
			return GetRuleContext<ReportContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_command);
		try {
			State = 140;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 116; vouchers();
				State = 117; Match(Eof);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 119; groupedQuery();
				State = 120; Match(Eof);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 122; chart();
				State = 123; Match(Eof);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 125; report();
				State = 126; Match(Eof);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 128; asset();
				State = 129; Match(Eof);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 131; amort();
				State = 132; Match(Eof);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 134; carry();
				State = 135; Match(Eof);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 137; otherCommand();
				State = 138; Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherCommandContext : ParserRuleContext {
		public ITerminalNode Connect() { return GetToken(ConsoleParser.Connect, 0); }
		public ITerminalNode Backup() { return GetToken(ConsoleParser.Backup, 0); }
		public ITerminalNode EditNamedQueries() { return GetToken(ConsoleParser.EditNamedQueries, 0); }
		public ITerminalNode Shutdown() { return GetToken(ConsoleParser.Shutdown, 0); }
		public ITerminalNode Fetch() { return GetToken(ConsoleParser.Fetch, 0); }
		public ITerminalNode Mobile() { return GetToken(ConsoleParser.Mobile, 0); }
		public ITerminalNode Help() { return GetToken(ConsoleParser.Help, 0); }
		public ITerminalNode Check() { return GetToken(ConsoleParser.Check, 0); }
		public ITerminalNode Launch() { return GetToken(ConsoleParser.Launch, 0); }
		public ITerminalNode Exit() { return GetToken(ConsoleParser.Exit, 0); }
		public ITerminalNode Titles() { return GetToken(ConsoleParser.Titles, 0); }
		public OtherCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherCommand; } }
	}

	[RuleVersion(0)]
	public OtherCommandContext otherCommand() {
		OtherCommandContext _localctx = new OtherCommandContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_otherCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Launch) | (1L << Connect) | (1L << Shutdown) | (1L << Backup) | (1L << Mobile) | (1L << Fetch) | (1L << Help) | (1L << Titles) | (1L << Exit) | (1L << Check) | (1L << EditNamedQueries))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChartContext : ParserRuleContext {
		public NamedQueryContext namedQuery() {
			return GetRuleContext<NamedQueryContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ChartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chart; } }
	}

	[RuleVersion(0)]
	public ChartContext chart() {
		ChartContext _localctx = new ChartContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_chart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; Match(T__0);
			State = 145; namedQuery();
			State = 147;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 146; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChartLevelsContext : ParserRuleContext {
		public ChartLevelContext chartLevel(int i) {
			return GetRuleContext<ChartLevelContext>(i);
		}
		public IReadOnlyList<ChartLevelContext> chartLevel() {
			return GetRuleContexts<ChartLevelContext>();
		}
		public ChartLevelsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chartLevels; } }
	}

	[RuleVersion(0)]
	public ChartLevelsContext chartLevels() {
		ChartLevelsContext _localctx = new ChartLevelsContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_chartLevels);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149; chartLevel();
			State = 154;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__1) {
				{
				{
				State = 150; Match(T__1);
				State = 151; chartLevel();
				}
				}
				State = 156;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChartLevelContext : ParserRuleContext {
		public ITerminalNode Series() { return GetToken(ConsoleParser.Series, 0); }
		public ITerminalNode SingleQuotedString(int i) {
			return GetToken(ConsoleParser.SingleQuotedString, i);
		}
		public ITerminalNode Ignore() { return GetToken(ConsoleParser.Ignore, 0); }
		public IReadOnlyList<ITerminalNode> SingleQuotedString() { return GetTokens(ConsoleParser.SingleQuotedString); }
		public ITerminalNode ChartArea() { return GetToken(ConsoleParser.ChartArea, 0); }
		public ChartLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chartLevel; } }
	}

	[RuleVersion(0)]
	public ChartLevelContext chartLevel() {
		ChartLevelContext _localctx = new ChartLevelContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_chartLevel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ChartArea) | (1L << Series) | (1L << Ignore))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 167;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 158; Match(T__2);
				State = 164;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==SingleQuotedString) {
					{
					{
					State = 159; Match(SingleQuotedString);
					State = 160; Match(T__3);
					State = 161; Match(SingleQuotedString);
					}
					}
					State = 166;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReportContext : ParserRuleContext {
		public NamedQueryContext namedQuery() {
			return GetRuleContext<NamedQueryContext>(0);
		}
		public GroupedQueryContext groupedQuery() {
			return GetRuleContext<GroupedQueryContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ReportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_report; } }
	}

	[RuleVersion(0)]
	public ReportContext report() {
		ReportContext _localctx = new ReportContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_report);
		int _la;
		try {
			State = 176;
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 169; Match(T__4);
				State = 170; namedQuery();
				State = 172;
				_la = _input.La(1);
				if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
					{
					State = 171; range();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 174; Match(T__4);
				State = 175; groupedQuery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedQueryContext : ParserRuleContext {
		public NamedQContext namedQ() {
			return GetRuleContext<NamedQContext>(0);
		}
		public NamedQueryReferenceContext namedQueryReference() {
			return GetRuleContext<NamedQueryReferenceContext>(0);
		}
		public NamedQueriesContext namedQueries() {
			return GetRuleContext<NamedQueriesContext>(0);
		}
		public NamedQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedQuery; } }
	}

	[RuleVersion(0)]
	public NamedQueryContext namedQuery() {
		NamedQueryContext _localctx = new NamedQueryContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_namedQuery);
		try {
			State = 181;
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 178; namedQueries();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 179; namedQ();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 180; namedQueryReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedQueriesContext : ParserRuleContext {
		public CoefContext coef() {
			return GetRuleContext<CoefContext>(0);
		}
		public IReadOnlyList<NamedQueryContext> namedQuery() {
			return GetRuleContexts<NamedQueryContext>();
		}
		public ITerminalNode DoubleQuotedString() { return GetToken(ConsoleParser.DoubleQuotedString, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NamedQueryContext namedQuery(int i) {
			return GetRuleContext<NamedQueryContext>(i);
		}
		public NamedQueriesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedQueries; } }
	}

	[RuleVersion(0)]
	public NamedQueriesContext namedQueries() {
		NamedQueriesContext _localctx = new NamedQueriesContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_namedQueries);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183; name();
			State = 185;
			_la = _input.La(1);
			if (_la==Intersect) {
				{
				State = 184; coef();
				}
			}

			State = 188;
			_la = _input.La(1);
			if (_la==DoubleQuotedString) {
				{
				State = 187; Match(DoubleQuotedString);
				}
			}

			State = 190; Match(T__5);
			State = 191; namedQuery();
			State = 196;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__6) {
				{
				{
				State = 192; Match(T__6);
				State = 193; namedQuery();
				}
				}
				State = 198;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 199; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedQContext : ParserRuleContext {
		public CoefContext coef() {
			return GetRuleContext<CoefContext>(0);
		}
		public GroupedQueryContext groupedQuery() {
			return GetRuleContext<GroupedQueryContext>(0);
		}
		public ITerminalNode DoubleQuotedString() { return GetToken(ConsoleParser.DoubleQuotedString, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NamedQContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedQ; } }
	}

	[RuleVersion(0)]
	public NamedQContext namedQ() {
		NamedQContext _localctx = new NamedQContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_namedQ);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201; name();
			State = 203;
			_la = _input.La(1);
			if (_la==Intersect) {
				{
				State = 202; coef();
				}
			}

			State = 206;
			_la = _input.La(1);
			if (_la==DoubleQuotedString) {
				{
				State = 205; Match(DoubleQuotedString);
				}
			}

			State = 208; Match(T__2);
			State = 209; groupedQuery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedQueryReferenceContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NamedQueryReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedQueryReference; } }
	}

	[RuleVersion(0)]
	public NamedQueryReferenceContext namedQueryReference() {
		NamedQueryReferenceContext _localctx = new NamedQueryReferenceContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_namedQueryReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211; name();
			State = 212; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public ITerminalNode DollarQuotedString() { return GetToken(ConsoleParser.DollarQuotedString, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; Match(DollarQuotedString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CoefContext : ParserRuleContext {
		public ITerminalNode Percent() { return GetToken(ConsoleParser.Percent, 0); }
		public ITerminalNode Float() { return GetToken(ConsoleParser.Float, 0); }
		public CoefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coef; } }
	}

	[RuleVersion(0)]
	public CoefContext coef() {
		CoefContext _localctx = new CoefContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_coef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216; Match(Intersect);
			State = 217;
			_la = _input.La(1);
			if ( !(_la==Float || _la==Percent) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupedQueryContext : ParserRuleContext {
		public SubtotalContext subtotal() {
			return GetRuleContext<SubtotalContext>(0);
		}
		public VoucherDetailQueryContext voucherDetailQuery() {
			return GetRuleContext<VoucherDetailQueryContext>(0);
		}
		public GroupedQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupedQuery; } }
	}

	[RuleVersion(0)]
	public GroupedQueryContext groupedQuery() {
		GroupedQueryContext _localctx = new GroupedQueryContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_groupedQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219; voucherDetailQuery();
			State = 220; subtotal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtotalContext : ParserRuleContext {
		public IToken SubtotalMark;
		public ITerminalNode SubtotalFields() { return GetToken(ConsoleParser.SubtotalFields, 0); }
		public SubtotalAggrContext subtotalAggr() {
			return GetRuleContext<SubtotalAggrContext>(0);
		}
		public SubtotalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtotal; } }
	}

	[RuleVersion(0)]
	public SubtotalContext subtotal() {
		SubtotalContext _localctx = new SubtotalContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_subtotal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			_localctx.SubtotalMark = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__8) | (1L << T__9))) != 0)) ) {
				_localctx.SubtotalMark = _errHandler.RecoverInline(this);
			}
			Consume();
			State = 224;
			_la = _input.La(1);
			if (_la==SubtotalFields) {
				{
				State = 223; Match(SubtotalFields);
				}
			}

			State = 227;
			_la = _input.La(1);
			if (_la==T__10) {
				{
				State = 226; subtotalAggr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtotalAggrContext : ParserRuleContext {
		public IToken IsAll;
		public RangeCoreContext rangeCore() {
			return GetRuleContext<RangeCoreContext>(0);
		}
		public SubtotalAggrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtotalAggr; } }
	}

	[RuleVersion(0)]
	public SubtotalAggrContext subtotalAggr() {
		SubtotalAggrContext _localctx = new SubtotalAggrContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_subtotalAggr);
		try {
			State = 238;
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 229; Match(T__10);
				State = 231;
				switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
				case 1:
					{
					State = 230; _localctx.IsAll = Match(T__11);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 233; Match(T__10);
				State = 234; Match(T__12);
				State = 235; rangeCore();
				State = 236; Match(T__13);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoucherDetailQueryContext : ParserRuleContext {
		public VoucherQueryContext voucherQuery() {
			return GetRuleContext<VoucherQueryContext>(0);
		}
		public EmitContext emit() {
			return GetRuleContext<EmitContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public VoucherDetailQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voucherDetailQuery; } }
	}

	[RuleVersion(0)]
	public VoucherDetailQueryContext voucherDetailQuery() {
		VoucherDetailQueryContext _localctx = new VoucherDetailQueryContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_voucherDetailQuery);
		try {
			State = 244;
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 240; vouchers();
				State = 241; emit();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 243; voucherQuery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmitContext : ParserRuleContext {
		public IToken Op;
		public DetailsContext details() {
			return GetRuleContext<DetailsContext>(0);
		}
		public EmitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emit; } }
	}

	[RuleVersion(0)]
	public EmitContext emit() {
		EmitContext _localctx = new EmitContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_emit);
		try {
			State = 249;
			switch (_input.La(1)) {
			case T__14:
				EnterOuterAlt(_localctx, 1);
				{
				State = 246; _localctx.Op = Match(T__14);
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 247; Match(T__2);
				State = 248; details(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VouchersContext : ParserRuleContext {
		public VoucherQueryContext voucherQuery() {
			return GetRuleContext<VoucherQueryContext>(0);
		}
		public VouchersBContext vouchersB() {
			return GetRuleContext<VouchersBContext>(0);
		}
		public VouchersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vouchers; } }
	}

	[RuleVersion(0)]
	public VouchersContext vouchers() {
		VouchersContext _localctx = new VouchersContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_vouchers);
		try {
			State = 253;
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 251; vouchersB(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 252; voucherQuery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VouchersBContext : ParserRuleContext {
		public IToken Op;
		public VouchersBContext vouchersB(int i) {
			return GetRuleContext<VouchersBContext>(i);
		}
		public VoucherQueryContext voucherQuery() {
			return GetRuleContext<VoucherQueryContext>(0);
		}
		public IReadOnlyList<VouchersBContext> vouchersB() {
			return GetRuleContexts<VouchersBContext>();
		}
		public VouchersBContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vouchersB; } }
	}

	[RuleVersion(0)]
	public VouchersBContext vouchersB() {
		return vouchersB(0);
	}

	private VouchersBContext vouchersB(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		VouchersBContext _localctx = new VouchersBContext(_ctx, _parentState);
		VouchersBContext _prevctx = _localctx;
		int _startState = 36;
		EnterRecursionRule(_localctx, 36, RULE_vouchersB, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				{
				State = 256;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==Union || _la==Substract) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 257; vouchersB(3);
				}
				break;

			case 2:
				{
				State = 258; Match(T__15);
				State = 259; voucherQuery();
				State = 260; Match(T__16);
				}
				break;

			case 3:
				{
				State = 262; Match(T__15);
				State = 263; vouchersB(0);
				State = 264; Match(T__16);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 276;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 274;
					switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
					case 1:
						{
						_localctx = new VouchersBContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_vouchersB);
						State = 268;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 269; _localctx.Op = Match(Intersect);
						State = 270; vouchersB(6);
						}
						break;

					case 2:
						{
						_localctx = new VouchersBContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_vouchersB);
						State = 271;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 272;
						_localctx.Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==Union || _la==Substract) ) {
							_localctx.Op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 273; vouchersB(5);
						}
						break;
					}
					} 
				}
				State = 278;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VoucherQueryContext : ParserRuleContext {
		public IToken Op;
		public ITerminalNode CaretQuotedString() { return GetToken(ConsoleParser.CaretQuotedString, 0); }
		public ITerminalNode PercentQuotedString() { return GetToken(ConsoleParser.PercentQuotedString, 0); }
		public DetailsContext details() {
			return GetRuleContext<DetailsContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode VoucherType() { return GetToken(ConsoleParser.VoucherType, 0); }
		public VoucherQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voucherQuery; } }
	}

	[RuleVersion(0)]
	public VoucherQueryContext voucherQuery() {
		VoucherQueryContext _localctx = new VoucherQueryContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_voucherQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
			case 1:
				{
				State = 279; details(0);
				}
				break;
			}
			State = 283;
			switch ( Interpreter.AdaptivePredict(_input,24,_ctx) ) {
			case 1:
				{
				State = 282;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__14 || _la==T__17) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 286;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 285; range();
				}
			}

			State = 289;
			_la = _input.La(1);
			if (_la==CaretQuotedString) {
				{
				State = 288; Match(CaretQuotedString);
				}
			}

			State = 292;
			_la = _input.La(1);
			if (_la==PercentQuotedString) {
				{
				State = 291; Match(PercentQuotedString);
				}
			}

			State = 295;
			_la = _input.La(1);
			if (_la==VoucherType) {
				{
				State = 294; Match(VoucherType);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DetailsContext : ParserRuleContext {
		public IToken Op;
		public DetailsContext details(int i) {
			return GetRuleContext<DetailsContext>(i);
		}
		public IReadOnlyList<DetailsContext> details() {
			return GetRuleContexts<DetailsContext>();
		}
		public DetailQueryContext detailQuery() {
			return GetRuleContext<DetailQueryContext>(0);
		}
		public DetailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_details; } }
	}

	[RuleVersion(0)]
	public DetailsContext details() {
		return details(0);
	}

	private DetailsContext details(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		DetailsContext _localctx = new DetailsContext(_ctx, _parentState);
		DetailsContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_details, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				State = 298;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==Union || _la==Substract) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 299; details(3);
				}
				break;

			case 2:
				{
				State = 300; detailQuery();
				}
				break;

			case 3:
				{
				State = 301; Match(T__18);
				State = 302; details(0);
				State = 303; Match(T__19);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 315;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 313;
					switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
					case 1:
						{
						_localctx = new DetailsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_details);
						State = 307;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 308; _localctx.Op = Match(Intersect);
						State = 309; details(6);
						}
						break;

					case 2:
						{
						_localctx = new DetailsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_details);
						State = 310;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 311;
						_localctx.Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==Union || _la==Substract) ) {
							_localctx.Op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 312; details(5);
						}
						break;
					}
					} 
				}
				State = 317;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DetailQueryContext : ParserRuleContext {
		public IToken Direction;
		public ITerminalNode DetailTitleSubTitle() { return GetToken(ConsoleParser.DetailTitleSubTitle, 0); }
		public ITerminalNode DoubleQuotedString() { return GetToken(ConsoleParser.DoubleQuotedString, 0); }
		public ITerminalNode SingleQuotedString() { return GetToken(ConsoleParser.SingleQuotedString, 0); }
		public ITerminalNode DetailTitle() { return GetToken(ConsoleParser.DetailTitle, 0); }
		public DetailQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_detailQuery; } }
	}

	[RuleVersion(0)]
	public DetailQueryContext detailQuery() {
		DetailQueryContext _localctx = new DetailQueryContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_detailQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				State = 318;
				_la = _input.La(1);
				if ( !(_la==DetailTitle || _la==DetailTitleSubTitle) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 322;
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				{
				State = 321; Match(SingleQuotedString);
				}
				break;
			}
			State = 325;
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				{
				State = 324; Match(DoubleQuotedString);
				}
				break;
			}
			State = 328;
			switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
			case 1:
				{
				State = 327;
				_localctx.Direction = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__20 || _la==T__21) ) {
					_localctx.Direction = _errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public RangeCoreContext Core;
		public RangeCoreContext rangeCore() {
			return GetRuleContext<RangeCoreContext>(0);
		}
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_range);
		try {
			State = 336;
			switch (_input.La(1)) {
			case T__11:
				EnterOuterAlt(_localctx, 1);
				{
				State = 330; Match(T__11);
				}
				break;
			case T__3:
			case T__22:
			case T__23:
			case T__24:
			case RangeNull:
			case RangeAllNotNull:
			case RangeAYear:
			case RangeAMonth:
			case RangeDeltaMonth:
			case RangeADay:
			case RangeDeltaDay:
			case RangeDeltaWeek:
				EnterOuterAlt(_localctx, 2);
				{
				State = 331; _localctx.Core = rangeCore();
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 3);
				{
				State = 332; Match(T__12);
				State = 333; _localctx.Core = rangeCore();
				State = 334; Match(T__13);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeCoreContext : ParserRuleContext {
		public RangeCertainPointContext Begin;
		public IToken Op;
		public RangeCertainPointContext End;
		public RangeCertainPointContext Certain;
		public ITerminalNode RangeNull() { return GetToken(ConsoleParser.RangeNull, 0); }
		public RangeCertainPointContext rangeCertainPoint(int i) {
			return GetRuleContext<RangeCertainPointContext>(i);
		}
		public ITerminalNode RangeAllNotNull() { return GetToken(ConsoleParser.RangeAllNotNull, 0); }
		public IReadOnlyList<RangeCertainPointContext> rangeCertainPoint() {
			return GetRuleContexts<RangeCertainPointContext>();
		}
		public RangeCoreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeCore; } }
	}

	[RuleVersion(0)]
	public RangeCoreContext rangeCore() {
		RangeCoreContext _localctx = new RangeCoreContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_rangeCore);
		int _la;
		try {
			State = 348;
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 338; Match(RangeNull);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 339; Match(RangeAllNotNull);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 340; _localctx.Begin = rangeCertainPoint();
				State = 341;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__3 || _la==T__22) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 343;
				_la = _input.La(1);
				if (((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & ((1L << (T__23 - 24)) | (1L << (T__24 - 24)) | (1L << (RangeAYear - 24)) | (1L << (RangeAMonth - 24)) | (1L << (RangeDeltaMonth - 24)) | (1L << (RangeADay - 24)) | (1L << (RangeDeltaDay - 24)) | (1L << (RangeDeltaWeek - 24)))) != 0)) {
					{
					State = 342; _localctx.End = rangeCertainPoint();
					}
				}

				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 345;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__3 || _la==T__22) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 346; _localctx.End = rangeCertainPoint();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 347; _localctx.Certain = rangeCertainPoint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangePointContext : ParserRuleContext {
		public IToken All;
		public ITerminalNode RangeNull() { return GetToken(ConsoleParser.RangeNull, 0); }
		public RangeCertainPointContext rangeCertainPoint() {
			return GetRuleContext<RangeCertainPointContext>(0);
		}
		public RangePointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangePoint; } }
	}

	[RuleVersion(0)]
	public RangePointContext rangePoint() {
		RangePointContext _localctx = new RangePointContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_rangePoint);
		try {
			State = 353;
			switch (_input.La(1)) {
			case RangeNull:
				EnterOuterAlt(_localctx, 1);
				{
				State = 350; Match(RangeNull);
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 351; _localctx.All = Match(T__11);
				}
				break;
			case T__23:
			case T__24:
			case RangeAYear:
			case RangeAMonth:
			case RangeDeltaMonth:
			case RangeADay:
			case RangeDeltaDay:
			case RangeDeltaWeek:
				EnterOuterAlt(_localctx, 3);
				{
				State = 352; rangeCertainPoint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeCertainPointContext : ParserRuleContext {
		public RangeWeekContext rangeWeek() {
			return GetRuleContext<RangeWeekContext>(0);
		}
		public RangeYearContext rangeYear() {
			return GetRuleContext<RangeYearContext>(0);
		}
		public RangeMonthContext rangeMonth() {
			return GetRuleContext<RangeMonthContext>(0);
		}
		public RangeDayContext rangeDay() {
			return GetRuleContext<RangeDayContext>(0);
		}
		public RangeCertainPointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeCertainPoint; } }
	}

	[RuleVersion(0)]
	public RangeCertainPointContext rangeCertainPoint() {
		RangeCertainPointContext _localctx = new RangeCertainPointContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_rangeCertainPoint);
		try {
			State = 359;
			switch (_input.La(1)) {
			case RangeAYear:
				EnterOuterAlt(_localctx, 1);
				{
				State = 355; rangeYear();
				}
				break;
			case T__23:
			case T__24:
			case RangeAMonth:
			case RangeDeltaMonth:
				EnterOuterAlt(_localctx, 2);
				{
				State = 356; rangeMonth();
				}
				break;
			case RangeDeltaWeek:
				EnterOuterAlt(_localctx, 3);
				{
				State = 357; rangeWeek();
				}
				break;
			case RangeADay:
			case RangeDeltaDay:
				EnterOuterAlt(_localctx, 4);
				{
				State = 358; rangeDay();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeYearContext : ParserRuleContext {
		public ITerminalNode RangeAYear() { return GetToken(ConsoleParser.RangeAYear, 0); }
		public RangeYearContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeYear; } }
	}

	[RuleVersion(0)]
	public RangeYearContext rangeYear() {
		RangeYearContext _localctx = new RangeYearContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_rangeYear);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361; Match(RangeAYear);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeMonthContext : ParserRuleContext {
		public IToken Modifier;
		public ITerminalNode RangeDeltaMonth() { return GetToken(ConsoleParser.RangeDeltaMonth, 0); }
		public ITerminalNode RangeAMonth() { return GetToken(ConsoleParser.RangeAMonth, 0); }
		public RangeMonthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeMonth; } }
	}

	[RuleVersion(0)]
	public RangeMonthContext rangeMonth() {
		RangeMonthContext _localctx = new RangeMonthContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_rangeMonth);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			_la = _input.La(1);
			if (_la==T__23 || _la==T__24) {
				{
				State = 363;
				_localctx.Modifier = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__23 || _la==T__24) ) {
					_localctx.Modifier = _errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			State = 366;
			_la = _input.La(1);
			if ( !(_la==RangeAMonth || _la==RangeDeltaMonth) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeWeekContext : ParserRuleContext {
		public ITerminalNode RangeDeltaWeek() { return GetToken(ConsoleParser.RangeDeltaWeek, 0); }
		public RangeWeekContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeWeek; } }
	}

	[RuleVersion(0)]
	public RangeWeekContext rangeWeek() {
		RangeWeekContext _localctx = new RangeWeekContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_rangeWeek);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368; Match(RangeDeltaWeek);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeDayContext : ParserRuleContext {
		public ITerminalNode RangeADay() { return GetToken(ConsoleParser.RangeADay, 0); }
		public ITerminalNode RangeDeltaDay() { return GetToken(ConsoleParser.RangeDeltaDay, 0); }
		public RangeDayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeDay; } }
	}

	[RuleVersion(0)]
	public RangeDayContext rangeDay() {
		RangeDayContext _localctx = new RangeDayContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_rangeDay);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			_la = _input.La(1);
			if ( !(_la==RangeADay || _la==RangeDeltaDay) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetContext : ParserRuleContext {
		public AssetRegisterContext assetRegister() {
			return GetRuleContext<AssetRegisterContext>(0);
		}
		public AssetUnregisterContext assetUnregister() {
			return GetRuleContext<AssetUnregisterContext>(0);
		}
		public AssetResetMixedContext assetResetMixed() {
			return GetRuleContext<AssetResetMixedContext>(0);
		}
		public AssetResetHardContext assetResetHard() {
			return GetRuleContext<AssetResetHardContext>(0);
		}
		public AssetResetSoftContext assetResetSoft() {
			return GetRuleContext<AssetResetSoftContext>(0);
		}
		public AssetApplyContext assetApply() {
			return GetRuleContext<AssetApplyContext>(0);
		}
		public AssetListContext assetList() {
			return GetRuleContext<AssetListContext>(0);
		}
		public AssetQueryContext assetQuery() {
			return GetRuleContext<AssetQueryContext>(0);
		}
		public AssetCheckContext assetCheck() {
			return GetRuleContext<AssetCheckContext>(0);
		}
		public AssetRedepContext assetRedep() {
			return GetRuleContext<AssetRedepContext>(0);
		}
		public AssetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asset; } }
	}

	[RuleVersion(0)]
	public AssetContext asset() {
		AssetContext _localctx = new AssetContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_asset);
		try {
			State = 382;
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 372; assetList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 373; assetQuery();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 374; assetRegister();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 375; assetUnregister();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 376; assetRedep();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 377; assetResetSoft();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 378; assetResetMixed();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 379; assetResetHard();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 380; assetApply();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 381; assetCheck();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetListContext : ParserRuleContext {
		public ITerminalNode AOList() { return GetToken(ConsoleParser.AOList, 0); }
		public ITerminalNode AOAll() { return GetToken(ConsoleParser.AOAll, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangePointContext rangePoint() {
			return GetRuleContext<RangePointContext>(0);
		}
		public AssetListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetList; } }
	}

	[RuleVersion(0)]
	public AssetListContext assetList() {
		AssetListContext _localctx = new AssetListContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_assetList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384; Match(T__25);
			State = 386;
			switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
			case 1:
				{
				State = 385;
				_la = _input.La(1);
				if ( !(_la==AOAll || _la==AOList) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 389;
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				{
				State = 388; rangePoint();
				}
				break;
			}
			State = 392;
			switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
			case 1:
				{
				State = 391; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetQueryContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOQuery() { return GetToken(ConsoleParser.AOQuery, 0); }
		public AssetQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetQuery; } }
	}

	[RuleVersion(0)]
	public AssetQueryContext assetQuery() {
		AssetQueryContext _localctx = new AssetQueryContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_assetQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394; Match(T__25);
			State = 395; Match(AOQuery);
			State = 397;
			switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
			case 1:
				{
				State = 396; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetRegisterContext : ParserRuleContext {
		public ITerminalNode AORegister() { return GetToken(ConsoleParser.AORegister, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AssetRegisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetRegister; } }
	}

	[RuleVersion(0)]
	public AssetRegisterContext assetRegister() {
		AssetRegisterContext _localctx = new AssetRegisterContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_assetRegister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399; Match(T__25);
			State = 400; Match(AORegister);
			State = 402;
			switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
			case 1:
				{
				State = 401; distributedQ(0);
				}
				break;
			}
			State = 405;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 404; range();
				}
			}

			State = 409;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 407; Match(T__2);
				State = 408; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetUnregisterContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode AOUnregister() { return GetToken(ConsoleParser.AOUnregister, 0); }
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AssetUnregisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetUnregister; } }
	}

	[RuleVersion(0)]
	public AssetUnregisterContext assetUnregister() {
		AssetUnregisterContext _localctx = new AssetUnregisterContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_assetUnregister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411; Match(T__25);
			State = 412; Match(AOUnregister);
			State = 414;
			switch ( Interpreter.AdaptivePredict(_input,50,_ctx) ) {
			case 1:
				{
				State = 413; distributedQ(0);
				}
				break;
			}
			State = 417;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 416; range();
				}
			}

			State = 421;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 419; Match(T__2);
				State = 420; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetRedepContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AORecalc() { return GetToken(ConsoleParser.AORecalc, 0); }
		public AssetRedepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetRedep; } }
	}

	[RuleVersion(0)]
	public AssetRedepContext assetRedep() {
		AssetRedepContext _localctx = new AssetRedepContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_assetRedep);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423; Match(T__25);
			State = 424; Match(AORecalc);
			State = 426;
			switch ( Interpreter.AdaptivePredict(_input,53,_ctx) ) {
			case 1:
				{
				State = 425; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetResetSoftContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOResetSoft() { return GetToken(ConsoleParser.AOResetSoft, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AssetResetSoftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetResetSoft; } }
	}

	[RuleVersion(0)]
	public AssetResetSoftContext assetResetSoft() {
		AssetResetSoftContext _localctx = new AssetResetSoftContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_assetResetSoft);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428; Match(T__25);
			State = 429; Match(AOResetSoft);
			State = 431;
			switch ( Interpreter.AdaptivePredict(_input,54,_ctx) ) {
			case 1:
				{
				State = 430; distributedQ(0);
				}
				break;
			}
			State = 434;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 433; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetResetMixedContext : ParserRuleContext {
		public ITerminalNode AOResetMixed() { return GetToken(ConsoleParser.AOResetMixed, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AssetResetMixedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetResetMixed; } }
	}

	[RuleVersion(0)]
	public AssetResetMixedContext assetResetMixed() {
		AssetResetMixedContext _localctx = new AssetResetMixedContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_assetResetMixed);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436; Match(T__25);
			State = 437; Match(AOResetMixed);
			State = 439;
			switch ( Interpreter.AdaptivePredict(_input,56,_ctx) ) {
			case 1:
				{
				State = 438; distributedQ(0);
				}
				break;
			}
			State = 442;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 441; range();
				}
			}

			State = 446;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 444; Match(T__2);
				State = 445; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetResetHardContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOResetHard() { return GetToken(ConsoleParser.AOResetHard, 0); }
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AssetResetHardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetResetHard; } }
	}

	[RuleVersion(0)]
	public AssetResetHardContext assetResetHard() {
		AssetResetHardContext _localctx = new AssetResetHardContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_assetResetHard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448; Match(T__25);
			State = 449; Match(AOResetHard);
			State = 451;
			switch ( Interpreter.AdaptivePredict(_input,59,_ctx) ) {
			case 1:
				{
				State = 450; distributedQ(0);
				}
				break;
			}
			State = 455;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 453; Match(T__2);
				State = 454; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetApplyContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOCollapse() { return GetToken(ConsoleParser.AOCollapse, 0); }
		public ITerminalNode AOApply() { return GetToken(ConsoleParser.AOApply, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AssetApplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetApply; } }
	}

	[RuleVersion(0)]
	public AssetApplyContext assetApply() {
		AssetApplyContext _localctx = new AssetApplyContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_assetApply);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457; Match(T__25);
			State = 458; Match(AOApply);
			State = 460;
			switch ( Interpreter.AdaptivePredict(_input,61,_ctx) ) {
			case 1:
				{
				State = 459; Match(AOCollapse);
				}
				break;
			}
			State = 463;
			switch ( Interpreter.AdaptivePredict(_input,62,_ctx) ) {
			case 1:
				{
				State = 462; distributedQ(0);
				}
				break;
			}
			State = 466;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 465; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetCheckContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOCheck() { return GetToken(ConsoleParser.AOCheck, 0); }
		public AssetCheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetCheck; } }
	}

	[RuleVersion(0)]
	public AssetCheckContext assetCheck() {
		AssetCheckContext _localctx = new AssetCheckContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_assetCheck);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468; Match(T__25);
			State = 469; Match(AOCheck);
			State = 471;
			switch ( Interpreter.AdaptivePredict(_input,64,_ctx) ) {
			case 1:
				{
				State = 470; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortContext : ParserRuleContext {
		public AmortReamoContext amortReamo() {
			return GetRuleContext<AmortReamoContext>(0);
		}
		public AmortQueryContext amortQuery() {
			return GetRuleContext<AmortQueryContext>(0);
		}
		public AmortCheckContext amortCheck() {
			return GetRuleContext<AmortCheckContext>(0);
		}
		public AmortResetMixedContext amortResetMixed() {
			return GetRuleContext<AmortResetMixedContext>(0);
		}
		public AmortResetSoftContext amortResetSoft() {
			return GetRuleContext<AmortResetSoftContext>(0);
		}
		public AmortRegisterContext amortRegister() {
			return GetRuleContext<AmortRegisterContext>(0);
		}
		public AmortUnregisterContext amortUnregister() {
			return GetRuleContext<AmortUnregisterContext>(0);
		}
		public AmortApplyContext amortApply() {
			return GetRuleContext<AmortApplyContext>(0);
		}
		public AmortListContext amortList() {
			return GetRuleContext<AmortListContext>(0);
		}
		public AmortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amort; } }
	}

	[RuleVersion(0)]
	public AmortContext amort() {
		AmortContext _localctx = new AmortContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_amort);
		try {
			State = 482;
			switch ( Interpreter.AdaptivePredict(_input,65,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 473; amortList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 474; amortQuery();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 475; amortRegister();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 476; amortUnregister();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 477; amortReamo();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 478; amortResetSoft();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 479; amortResetMixed();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 480; amortApply();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 481; amortCheck();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortListContext : ParserRuleContext {
		public ITerminalNode AOList() { return GetToken(ConsoleParser.AOList, 0); }
		public ITerminalNode AOAll() { return GetToken(ConsoleParser.AOAll, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangePointContext rangePoint() {
			return GetRuleContext<RangePointContext>(0);
		}
		public AmortListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortList; } }
	}

	[RuleVersion(0)]
	public AmortListContext amortList() {
		AmortListContext _localctx = new AmortListContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_amortList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 484; Match(T__26);
			State = 486;
			switch ( Interpreter.AdaptivePredict(_input,66,_ctx) ) {
			case 1:
				{
				State = 485;
				_la = _input.La(1);
				if ( !(_la==AOAll || _la==AOList) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 489;
			switch ( Interpreter.AdaptivePredict(_input,67,_ctx) ) {
			case 1:
				{
				State = 488; rangePoint();
				}
				break;
			}
			State = 492;
			switch ( Interpreter.AdaptivePredict(_input,68,_ctx) ) {
			case 1:
				{
				State = 491; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortQueryContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOQuery() { return GetToken(ConsoleParser.AOQuery, 0); }
		public AmortQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortQuery; } }
	}

	[RuleVersion(0)]
	public AmortQueryContext amortQuery() {
		AmortQueryContext _localctx = new AmortQueryContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_amortQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 494; Match(T__26);
			State = 495; Match(AOQuery);
			State = 497;
			switch ( Interpreter.AdaptivePredict(_input,69,_ctx) ) {
			case 1:
				{
				State = 496; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortRegisterContext : ParserRuleContext {
		public ITerminalNode AORegister() { return GetToken(ConsoleParser.AORegister, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AmortRegisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortRegister; } }
	}

	[RuleVersion(0)]
	public AmortRegisterContext amortRegister() {
		AmortRegisterContext _localctx = new AmortRegisterContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_amortRegister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 499; Match(T__26);
			State = 500; Match(AORegister);
			State = 502;
			switch ( Interpreter.AdaptivePredict(_input,70,_ctx) ) {
			case 1:
				{
				State = 501; distributedQ(0);
				}
				break;
			}
			State = 505;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 504; range();
				}
			}

			State = 509;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 507; Match(T__2);
				State = 508; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortUnregisterContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode AOUnregister() { return GetToken(ConsoleParser.AOUnregister, 0); }
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AmortUnregisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortUnregister; } }
	}

	[RuleVersion(0)]
	public AmortUnregisterContext amortUnregister() {
		AmortUnregisterContext _localctx = new AmortUnregisterContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_amortUnregister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511; Match(T__26);
			State = 512; Match(AOUnregister);
			State = 514;
			switch ( Interpreter.AdaptivePredict(_input,73,_ctx) ) {
			case 1:
				{
				State = 513; distributedQ(0);
				}
				break;
			}
			State = 517;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 516; range();
				}
			}

			State = 521;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 519; Match(T__2);
				State = 520; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortReamoContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AORecalc() { return GetToken(ConsoleParser.AORecalc, 0); }
		public AmortReamoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortReamo; } }
	}

	[RuleVersion(0)]
	public AmortReamoContext amortReamo() {
		AmortReamoContext _localctx = new AmortReamoContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_amortReamo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 523; Match(T__26);
			State = 524; Match(AORecalc);
			State = 526;
			switch ( Interpreter.AdaptivePredict(_input,76,_ctx) ) {
			case 1:
				{
				State = 525; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortResetSoftContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOResetSoft() { return GetToken(ConsoleParser.AOResetSoft, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AmortResetSoftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortResetSoft; } }
	}

	[RuleVersion(0)]
	public AmortResetSoftContext amortResetSoft() {
		AmortResetSoftContext _localctx = new AmortResetSoftContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_amortResetSoft);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 528; Match(T__26);
			State = 529; Match(AOResetSoft);
			State = 531;
			switch ( Interpreter.AdaptivePredict(_input,77,_ctx) ) {
			case 1:
				{
				State = 530; distributedQ(0);
				}
				break;
			}
			State = 534;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 533; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortResetMixedContext : ParserRuleContext {
		public ITerminalNode AOResetMixed() { return GetToken(ConsoleParser.AOResetMixed, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AmortResetMixedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortResetMixed; } }
	}

	[RuleVersion(0)]
	public AmortResetMixedContext amortResetMixed() {
		AmortResetMixedContext _localctx = new AmortResetMixedContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_amortResetMixed);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 536; Match(T__26);
			State = 537; Match(AOResetMixed);
			State = 539;
			switch ( Interpreter.AdaptivePredict(_input,79,_ctx) ) {
			case 1:
				{
				State = 538; distributedQ(0);
				}
				break;
			}
			State = 542;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 541; range();
				}
			}

			State = 546;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 544; Match(T__2);
				State = 545; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortApplyContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOCollapse() { return GetToken(ConsoleParser.AOCollapse, 0); }
		public ITerminalNode AOApply() { return GetToken(ConsoleParser.AOApply, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AmortApplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortApply; } }
	}

	[RuleVersion(0)]
	public AmortApplyContext amortApply() {
		AmortApplyContext _localctx = new AmortApplyContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_amortApply);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 548; Match(T__26);
			State = 549; Match(AOApply);
			State = 551;
			switch ( Interpreter.AdaptivePredict(_input,82,_ctx) ) {
			case 1:
				{
				State = 550; Match(AOCollapse);
				}
				break;
			}
			State = 554;
			switch ( Interpreter.AdaptivePredict(_input,83,_ctx) ) {
			case 1:
				{
				State = 553; distributedQ(0);
				}
				break;
			}
			State = 557;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 556; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortCheckContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOCheck() { return GetToken(ConsoleParser.AOCheck, 0); }
		public AmortCheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortCheck; } }
	}

	[RuleVersion(0)]
	public AmortCheckContext amortCheck() {
		AmortCheckContext _localctx = new AmortCheckContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_amortCheck);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559; Match(T__26);
			State = 560; Match(AOCheck);
			State = 562;
			switch ( Interpreter.AdaptivePredict(_input,85,_ctx) ) {
			case 1:
				{
				State = 561; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DistributedQContext : ParserRuleContext {
		public IToken Op;
		public DistributedQAtomContext distributedQAtom() {
			return GetRuleContext<DistributedQAtomContext>(0);
		}
		public DistributedQContext distributedQ(int i) {
			return GetRuleContext<DistributedQContext>(i);
		}
		public IReadOnlyList<DistributedQContext> distributedQ() {
			return GetRuleContexts<DistributedQContext>();
		}
		public DistributedQContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distributedQ; } }
	}

	[RuleVersion(0)]
	public DistributedQContext distributedQ() {
		return distributedQ(0);
	}

	private DistributedQContext distributedQ(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		DistributedQContext _localctx = new DistributedQContext(_ctx, _parentState);
		DistributedQContext _prevctx = _localctx;
		int _startState = 102;
		EnterRecursionRule(_localctx, 102, RULE_distributedQ, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 572;
			switch ( Interpreter.AdaptivePredict(_input,86,_ctx) ) {
			case 1:
				{
				State = 565;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==Union || _la==Substract) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 566; distributedQ(3);
				}
				break;

			case 2:
				{
				State = 567; distributedQAtom();
				}
				break;

			case 3:
				{
				State = 568; Match(T__18);
				State = 569; distributedQ(0);
				State = 570; Match(T__19);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 582;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,88,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 580;
					switch ( Interpreter.AdaptivePredict(_input,87,_ctx) ) {
					case 1:
						{
						_localctx = new DistributedQContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_distributedQ);
						State = 574;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 575; _localctx.Op = Match(Intersect);
						State = 576; distributedQ(6);
						}
						break;

					case 2:
						{
						_localctx = new DistributedQContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_distributedQ);
						State = 577;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 578;
						_localctx.Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==Union || _la==Substract) ) {
							_localctx.Op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 579; distributedQ(5);
						}
						break;
					}
					} 
				}
				State = 584;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,88,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DistributedQAtomContext : ParserRuleContext {
		public ITerminalNode DollarQuotedString() { return GetToken(ConsoleParser.DollarQuotedString, 0); }
		public ITerminalNode PercentQuotedString() { return GetToken(ConsoleParser.PercentQuotedString, 0); }
		public ITerminalNode Guid() { return GetToken(ConsoleParser.Guid, 0); }
		public RangeCoreContext rangeCore() {
			return GetRuleContext<RangeCoreContext>(0);
		}
		public DistributedQAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distributedQAtom; } }
	}

	[RuleVersion(0)]
	public DistributedQAtomContext distributedQAtom() {
		DistributedQAtomContext _localctx = new DistributedQAtomContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_distributedQAtom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 586;
			switch ( Interpreter.AdaptivePredict(_input,89,_ctx) ) {
			case 1:
				{
				State = 585; Match(Guid);
				}
				break;
			}
			State = 589;
			switch ( Interpreter.AdaptivePredict(_input,90,_ctx) ) {
			case 1:
				{
				State = 588; Match(DollarQuotedString);
				}
				break;
			}
			State = 592;
			switch ( Interpreter.AdaptivePredict(_input,91,_ctx) ) {
			case 1:
				{
				State = 591; Match(PercentQuotedString);
				}
				break;
			}
			State = 598;
			switch ( Interpreter.AdaptivePredict(_input,92,_ctx) ) {
			case 1:
				{
				State = 594; Match(T__27);
				State = 595; rangeCore();
				State = 596; Match(T__28);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CarryContext : ParserRuleContext {
		public CarryMonthResetHardContext carryMonthResetHard() {
			return GetRuleContext<CarryMonthResetHardContext>(0);
		}
		public CarryYearContext carryYear() {
			return GetRuleContext<CarryYearContext>(0);
		}
		public CarryYearResetHardContext carryYearResetHard() {
			return GetRuleContext<CarryYearResetHardContext>(0);
		}
		public CarryMonthContext carryMonth() {
			return GetRuleContext<CarryMonthContext>(0);
		}
		public CarryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_carry; } }
	}

	[RuleVersion(0)]
	public CarryContext carry() {
		CarryContext _localctx = new CarryContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_carry);
		try {
			State = 604;
			switch ( Interpreter.AdaptivePredict(_input,93,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 600; carryMonthResetHard();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 601; carryMonth();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 602; carryYearResetHard();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 603; carryYear();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CarryMonthResetHardContext : ParserRuleContext {
		public ITerminalNode AOResetHard() { return GetToken(ConsoleParser.AOResetHard, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public CarryMonthResetHardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_carryMonthResetHard; } }
	}

	[RuleVersion(0)]
	public CarryMonthResetHardContext carryMonthResetHard() {
		CarryMonthResetHardContext _localctx = new CarryMonthResetHardContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_carryMonthResetHard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 606; Match(T__29);
			State = 607; Match(AOResetHard);
			State = 609;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 608; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CarryMonthContext : ParserRuleContext {
		public ITerminalNode AOApply() { return GetToken(ConsoleParser.AOApply, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public CarryMonthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_carryMonth; } }
	}

	[RuleVersion(0)]
	public CarryMonthContext carryMonth() {
		CarryMonthContext _localctx = new CarryMonthContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_carryMonth);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 611; Match(T__29);
			State = 612; Match(AOApply);
			State = 614;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 613; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CarryYearResetHardContext : ParserRuleContext {
		public ITerminalNode AOResetHard() { return GetToken(ConsoleParser.AOResetHard, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public CarryYearResetHardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_carryYearResetHard; } }
	}

	[RuleVersion(0)]
	public CarryYearResetHardContext carryYearResetHard() {
		CarryYearResetHardContext _localctx = new CarryYearResetHardContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_carryYearResetHard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 616; Match(T__30);
			State = 617; Match(AOResetHard);
			State = 619;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 618; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CarryYearContext : ParserRuleContext {
		public ITerminalNode AOApply() { return GetToken(ConsoleParser.AOApply, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public CarryYearContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_carryYear; } }
	}

	[RuleVersion(0)]
	public CarryYearContext carryYear() {
		CarryYearContext _localctx = new CarryYearContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_carryYear);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 621; Match(T__30);
			State = 622; Match(AOApply);
			State = 624;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 623; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 18: return vouchersB_sempred((VouchersBContext)_localctx, predIndex);

		case 20: return details_sempred((DetailsContext)_localctx, predIndex);

		case 51: return distributedQ_sempred((DistributedQContext)_localctx, predIndex);
		}
		return true;
	}
	private bool vouchersB_sempred(VouchersBContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 5);

		case 1: return Precpred(_ctx, 4);
		}
		return true;
	}
	private bool distributedQ_sempred(DistributedQContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(_ctx, 5);

		case 5: return Precpred(_ctx, 4);
		}
		return true;
	}
	private bool details_sempred(DetailsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 5);

		case 3: return Precpred(_ctx, 4);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3S\x275\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2"+
		"\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3"+
		"\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2\x8F\n\x2\x3\x3\x3"+
		"\x3\x3\x4\x3\x4\x3\x4\x5\x4\x96\n\x4\x3\x5\x3\x5\x3\x5\a\x5\x9B\n\x5\f"+
		"\x5\xE\x5\x9E\v\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6\xA5\n\x6\f\x6\xE"+
		"\x6\xA8\v\x6\x5\x6\xAA\n\x6\x3\a\x3\a\x3\a\x5\a\xAF\n\a\x3\a\x3\a\x5\a"+
		"\xB3\n\a\x3\b\x3\b\x3\b\x5\b\xB8\n\b\x3\t\x3\t\x5\t\xBC\n\t\x3\t\x5\t"+
		"\xBF\n\t\x3\t\x3\t\x3\t\x3\t\a\t\xC5\n\t\f\t\xE\t\xC8\v\t\x3\t\x3\t\x3"+
		"\n\x3\n\x5\n\xCE\n\n\x3\n\x5\n\xD1\n\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3"+
		"\f\x3\f\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x5\xF\xE3\n\xF\x3"+
		"\xF\x5\xF\xE6\n\xF\x3\x10\x3\x10\x5\x10\xEA\n\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x5\x10\xF1\n\x10\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\xF7"+
		"\n\x11\x3\x12\x3\x12\x3\x12\x5\x12\xFC\n\x12\x3\x13\x3\x13\x5\x13\x100"+
		"\n\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x5\x14\x10D\n\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3"+
		"\x14\a\x14\x115\n\x14\f\x14\xE\x14\x118\v\x14\x3\x15\x5\x15\x11B\n\x15"+
		"\x3\x15\x5\x15\x11E\n\x15\x3\x15\x5\x15\x121\n\x15\x3\x15\x5\x15\x124"+
		"\n\x15\x3\x15\x5\x15\x127\n\x15\x3\x15\x5\x15\x12A\n\x15\x3\x16\x3\x16"+
		"\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x134\n\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x3\x16\a\x16\x13C\n\x16\f\x16\xE\x16\x13F\v"+
		"\x16\x3\x17\x5\x17\x142\n\x17\x3\x17\x5\x17\x145\n\x17\x3\x17\x5\x17\x148"+
		"\n\x17\x3\x17\x5\x17\x14B\n\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3"+
		"\x18\x5\x18\x153\n\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x15A"+
		"\n\x19\x3\x19\x3\x19\x3\x19\x5\x19\x15F\n\x19\x3\x1A\x3\x1A\x3\x1A\x5"+
		"\x1A\x164\n\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x16A\n\x1B\x3\x1C\x3"+
		"\x1C\x3\x1D\x5\x1D\x16F\n\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1F\x3\x1F"+
		"\x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x5 \x181\n \x3!\x3!\x5!\x185"+
		"\n!\x3!\x5!\x188\n!\x3!\x5!\x18B\n!\x3\"\x3\"\x3\"\x5\"\x190\n\"\x3#\x3"+
		"#\x3#\x5#\x195\n#\x3#\x5#\x198\n#\x3#\x3#\x5#\x19C\n#\x3$\x3$\x3$\x5$"+
		"\x1A1\n$\x3$\x5$\x1A4\n$\x3$\x3$\x5$\x1A8\n$\x3%\x3%\x3%\x5%\x1AD\n%\x3"+
		"&\x3&\x3&\x5&\x1B2\n&\x3&\x5&\x1B5\n&\x3\'\x3\'\x3\'\x5\'\x1BA\n\'\x3"+
		"\'\x5\'\x1BD\n\'\x3\'\x3\'\x5\'\x1C1\n\'\x3(\x3(\x3(\x5(\x1C6\n(\x3(\x3"+
		"(\x5(\x1CA\n(\x3)\x3)\x3)\x5)\x1CF\n)\x3)\x5)\x1D2\n)\x3)\x5)\x1D5\n)"+
		"\x3*\x3*\x3*\x5*\x1DA\n*\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x5+\x1E5"+
		"\n+\x3,\x3,\x5,\x1E9\n,\x3,\x5,\x1EC\n,\x3,\x5,\x1EF\n,\x3-\x3-\x3-\x5"+
		"-\x1F4\n-\x3.\x3.\x3.\x5.\x1F9\n.\x3.\x5.\x1FC\n.\x3.\x3.\x5.\x200\n."+
		"\x3/\x3/\x3/\x5/\x205\n/\x3/\x5/\x208\n/\x3/\x3/\x5/\x20C\n/\x3\x30\x3"+
		"\x30\x3\x30\x5\x30\x211\n\x30\x3\x31\x3\x31\x3\x31\x5\x31\x216\n\x31\x3"+
		"\x31\x5\x31\x219\n\x31\x3\x32\x3\x32\x3\x32\x5\x32\x21E\n\x32\x3\x32\x5"+
		"\x32\x221\n\x32\x3\x32\x3\x32\x5\x32\x225\n\x32\x3\x33\x3\x33\x3\x33\x5"+
		"\x33\x22A\n\x33\x3\x33\x5\x33\x22D\n\x33\x3\x33\x5\x33\x230\n\x33\x3\x34"+
		"\x3\x34\x3\x34\x5\x34\x235\n\x34\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3"+
		"\x35\x3\x35\x3\x35\x5\x35\x23F\n\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35"+
		"\x3\x35\a\x35\x247\n\x35\f\x35\xE\x35\x24A\v\x35\x3\x36\x5\x36\x24D\n"+
		"\x36\x3\x36\x5\x36\x250\n\x36\x3\x36\x5\x36\x253\n\x36\x3\x36\x3\x36\x3"+
		"\x36\x3\x36\x5\x36\x259\n\x36\x3\x37\x3\x37\x3\x37\x3\x37\x5\x37\x25F"+
		"\n\x37\x3\x38\x3\x38\x3\x38\x5\x38\x264\n\x38\x3\x39\x3\x39\x3\x39\x5"+
		"\x39\x269\n\x39\x3:\x3:\x3:\x5:\x26E\n:\x3;\x3;\x3;\x5;\x273\n;\x3;\x2"+
		"\x2\x5&*h<\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2"+
		"\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30"+
		"\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H"+
		"\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66"+
		"\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2\x2\xF\x3\x2%/\x3\x2\"$\x3\x2NO\x3\x2\n"+
		"\f\x3\x2QR\x4\x2\x11\x11\x14\x14\x3\x2LM\x3\x2\x17\x18\x4\x2\x6\x6\x19"+
		"\x19\x3\x2\x1A\x1B\x3\x2\x41\x42\x3\x2\x43\x44\x3\x2\x30\x31\x2BE\x2\x8E"+
		"\x3\x2\x2\x2\x4\x90\x3\x2\x2\x2\x6\x92\x3\x2\x2\x2\b\x97\x3\x2\x2\x2\n"+
		"\x9F\x3\x2\x2\x2\f\xB2\x3\x2\x2\x2\xE\xB7\x3\x2\x2\x2\x10\xB9\x3\x2\x2"+
		"\x2\x12\xCB\x3\x2\x2\x2\x14\xD5\x3\x2\x2\x2\x16\xD8\x3\x2\x2\x2\x18\xDA"+
		"\x3\x2\x2\x2\x1A\xDD\x3\x2\x2\x2\x1C\xE0\x3\x2\x2\x2\x1E\xF0\x3\x2\x2"+
		"\x2 \xF6\x3\x2\x2\x2\"\xFB\x3\x2\x2\x2$\xFF\x3\x2\x2\x2&\x10C\x3\x2\x2"+
		"\x2(\x11A\x3\x2\x2\x2*\x133\x3\x2\x2\x2,\x141\x3\x2\x2\x2.\x152\x3\x2"+
		"\x2\x2\x30\x15E\x3\x2\x2\x2\x32\x163\x3\x2\x2\x2\x34\x169\x3\x2\x2\x2"+
		"\x36\x16B\x3\x2\x2\x2\x38\x16E\x3\x2\x2\x2:\x172\x3\x2\x2\x2<\x174\x3"+
		"\x2\x2\x2>\x180\x3\x2\x2\x2@\x182\x3\x2\x2\x2\x42\x18C\x3\x2\x2\x2\x44"+
		"\x191\x3\x2\x2\x2\x46\x19D\x3\x2\x2\x2H\x1A9\x3\x2\x2\x2J\x1AE\x3\x2\x2"+
		"\x2L\x1B6\x3\x2\x2\x2N\x1C2\x3\x2\x2\x2P\x1CB\x3\x2\x2\x2R\x1D6\x3\x2"+
		"\x2\x2T\x1E4\x3\x2\x2\x2V\x1E6\x3\x2\x2\x2X\x1F0\x3\x2\x2\x2Z\x1F5\x3"+
		"\x2\x2\x2\\\x201\x3\x2\x2\x2^\x20D\x3\x2\x2\x2`\x212\x3\x2\x2\x2\x62\x21A"+
		"\x3\x2\x2\x2\x64\x226\x3\x2\x2\x2\x66\x231\x3\x2\x2\x2h\x23E\x3\x2\x2"+
		"\x2j\x24C\x3\x2\x2\x2l\x25E\x3\x2\x2\x2n\x260\x3\x2\x2\x2p\x265\x3\x2"+
		"\x2\x2r\x26A\x3\x2\x2\x2t\x26F\x3\x2\x2\x2vw\x5$\x13\x2wx\a\x2\x2\x3x"+
		"\x8F\x3\x2\x2\x2yz\x5\x1A\xE\x2z{\a\x2\x2\x3{\x8F\x3\x2\x2\x2|}\x5\x6"+
		"\x4\x2}~\a\x2\x2\x3~\x8F\x3\x2\x2\x2\x7F\x80\x5\f\a\x2\x80\x81\a\x2\x2"+
		"\x3\x81\x8F\x3\x2\x2\x2\x82\x83\x5> \x2\x83\x84\a\x2\x2\x3\x84\x8F\x3"+
		"\x2\x2\x2\x85\x86\x5T+\x2\x86\x87\a\x2\x2\x3\x87\x8F\x3\x2\x2\x2\x88\x89"+
		"\x5l\x37\x2\x89\x8A\a\x2\x2\x3\x8A\x8F\x3\x2\x2\x2\x8B\x8C\x5\x4\x3\x2"+
		"\x8C\x8D\a\x2\x2\x3\x8D\x8F\x3\x2\x2\x2\x8Ev\x3\x2\x2\x2\x8Ey\x3\x2\x2"+
		"\x2\x8E|\x3\x2\x2\x2\x8E\x7F\x3\x2\x2\x2\x8E\x82\x3\x2\x2\x2\x8E\x85\x3"+
		"\x2\x2\x2\x8E\x88\x3\x2\x2\x2\x8E\x8B\x3\x2\x2\x2\x8F\x3\x3\x2\x2\x2\x90"+
		"\x91\t\x2\x2\x2\x91\x5\x3\x2\x2\x2\x92\x93\a\x3\x2\x2\x93\x95\x5\xE\b"+
		"\x2\x94\x96\x5.\x18\x2\x95\x94\x3\x2\x2\x2\x95\x96\x3\x2\x2\x2\x96\a\x3"+
		"\x2\x2\x2\x97\x9C\x5\n\x6\x2\x98\x99\a\x4\x2\x2\x99\x9B\x5\n\x6\x2\x9A"+
		"\x98\x3\x2\x2\x2\x9B\x9E\x3\x2\x2\x2\x9C\x9A\x3\x2\x2\x2\x9C\x9D\x3\x2"+
		"\x2\x2\x9D\t\x3\x2\x2\x2\x9E\x9C\x3\x2\x2\x2\x9F\xA9\t\x3\x2\x2\xA0\xA6"+
		"\a\x5\x2\x2\xA1\xA2\aK\x2\x2\xA2\xA3\a\x6\x2\x2\xA3\xA5\aK\x2\x2\xA4\xA1"+
		"\x3\x2\x2\x2\xA5\xA8\x3\x2\x2\x2\xA6\xA4\x3\x2\x2\x2\xA6\xA7\x3\x2\x2"+
		"\x2\xA7\xAA\x3\x2\x2\x2\xA8\xA6\x3\x2\x2\x2\xA9\xA0\x3\x2\x2\x2\xA9\xAA"+
		"\x3\x2\x2\x2\xAA\v\x3\x2\x2\x2\xAB\xAC\a\a\x2\x2\xAC\xAE\x5\xE\b\x2\xAD"+
		"\xAF\x5.\x18\x2\xAE\xAD\x3\x2\x2\x2\xAE\xAF\x3\x2\x2\x2\xAF\xB3\x3\x2"+
		"\x2\x2\xB0\xB1\a\a\x2\x2\xB1\xB3\x5\x1A\xE\x2\xB2\xAB\x3\x2\x2\x2\xB2"+
		"\xB0\x3\x2\x2\x2\xB3\r\x3\x2\x2\x2\xB4\xB8\x5\x10\t\x2\xB5\xB8\x5\x12"+
		"\n\x2\xB6\xB8\x5\x14\v\x2\xB7\xB4\x3\x2\x2\x2\xB7\xB5\x3\x2\x2\x2\xB7"+
		"\xB6\x3\x2\x2\x2\xB8\xF\x3\x2\x2\x2\xB9\xBB\x5\x16\f\x2\xBA\xBC\x5\x18"+
		"\r\x2\xBB\xBA\x3\x2\x2\x2\xBB\xBC\x3\x2\x2\x2\xBC\xBE\x3\x2\x2\x2\xBD"+
		"\xBF\aJ\x2\x2\xBE\xBD\x3\x2\x2\x2\xBE\xBF\x3\x2\x2\x2\xBF\xC0\x3\x2\x2"+
		"\x2\xC0\xC1\a\b\x2\x2\xC1\xC6\x5\xE\b\x2\xC2\xC3\a\t\x2\x2\xC3\xC5\x5"+
		"\xE\b\x2\xC4\xC2\x3\x2\x2\x2\xC5\xC8\x3\x2\x2\x2\xC6\xC4\x3\x2\x2\x2\xC6"+
		"\xC7\x3\x2\x2\x2\xC7\xC9\x3\x2\x2\x2\xC8\xC6\x3\x2\x2\x2\xC9\xCA\a\x4"+
		"\x2\x2\xCA\x11\x3\x2\x2\x2\xCB\xCD\x5\x16\f\x2\xCC\xCE\x5\x18\r\x2\xCD"+
		"\xCC\x3\x2\x2\x2\xCD\xCE\x3\x2\x2\x2\xCE\xD0\x3\x2\x2\x2\xCF\xD1\aJ\x2"+
		"\x2\xD0\xCF\x3\x2\x2\x2\xD0\xD1\x3\x2\x2\x2\xD1\xD2\x3\x2\x2\x2\xD2\xD3"+
		"\a\x5\x2\x2\xD3\xD4\x5\x1A\xE\x2\xD4\x13\x3\x2\x2\x2\xD5\xD6\x5\x16\f"+
		"\x2\xD6\xD7\a\x4\x2\x2\xD7\x15\x3\x2\x2\x2\xD8\xD9\aI\x2\x2\xD9\x17\x3"+
		"\x2\x2\x2\xDA\xDB\aP\x2\x2\xDB\xDC\t\x4\x2\x2\xDC\x19\x3\x2\x2\x2\xDD"+
		"\xDE\x5 \x11\x2\xDE\xDF\x5\x1C\xF\x2\xDF\x1B\x3\x2\x2\x2\xE0\xE2\t\x5"+
		"\x2\x2\xE1\xE3\a<\x2\x2\xE2\xE1\x3\x2\x2\x2\xE2\xE3\x3\x2\x2\x2\xE3\xE5"+
		"\x3\x2\x2\x2\xE4\xE6\x5\x1E\x10\x2\xE5\xE4\x3\x2\x2\x2\xE5\xE6\x3\x2\x2"+
		"\x2\xE6\x1D\x3\x2\x2\x2\xE7\xE9\a\r\x2\x2\xE8\xEA\a\xE\x2\x2\xE9\xE8\x3"+
		"\x2\x2\x2\xE9\xEA\x3\x2\x2\x2\xEA\xF1\x3\x2\x2\x2\xEB\xEC\a\r\x2\x2\xEC"+
		"\xED\a\xF\x2\x2\xED\xEE\x5\x30\x19\x2\xEE\xEF\a\x10\x2\x2\xEF\xF1\x3\x2"+
		"\x2\x2\xF0\xE7\x3\x2\x2\x2\xF0\xEB\x3\x2\x2\x2\xF1\x1F\x3\x2\x2\x2\xF2"+
		"\xF3\x5$\x13\x2\xF3\xF4\x5\"\x12\x2\xF4\xF7\x3\x2\x2\x2\xF5\xF7\x5(\x15"+
		"\x2\xF6\xF2\x3\x2\x2\x2\xF6\xF5\x3\x2\x2\x2\xF7!\x3\x2\x2\x2\xF8\xFC\a"+
		"\x11\x2\x2\xF9\xFA\a\x5\x2\x2\xFA\xFC\x5*\x16\x2\xFB\xF8\x3\x2\x2\x2\xFB"+
		"\xF9\x3\x2\x2\x2\xFC#\x3\x2\x2\x2\xFD\x100\x5&\x14\x2\xFE\x100\x5(\x15"+
		"\x2\xFF\xFD\x3\x2\x2\x2\xFF\xFE\x3\x2\x2\x2\x100%\x3\x2\x2\x2\x101\x102"+
		"\b\x14\x1\x2\x102\x103\t\x6\x2\x2\x103\x10D\x5&\x14\x5\x104\x105\a\x12"+
		"\x2\x2\x105\x106\x5(\x15\x2\x106\x107\a\x13\x2\x2\x107\x10D\x3\x2\x2\x2"+
		"\x108\x109\a\x12\x2\x2\x109\x10A\x5&\x14\x2\x10A\x10B\a\x13\x2\x2\x10B"+
		"\x10D\x3\x2\x2\x2\x10C\x101\x3\x2\x2\x2\x10C\x104\x3\x2\x2\x2\x10C\x108"+
		"\x3\x2\x2\x2\x10D\x116\x3\x2\x2\x2\x10E\x10F\f\a\x2\x2\x10F\x110\aP\x2"+
		"\x2\x110\x115\x5&\x14\b\x111\x112\f\x6\x2\x2\x112\x113\t\x6\x2\x2\x113"+
		"\x115\x5&\x14\a\x114\x10E\x3\x2\x2\x2\x114\x111\x3\x2\x2\x2\x115\x118"+
		"\x3\x2\x2\x2\x116\x114\x3\x2\x2\x2\x116\x117\x3\x2\x2\x2\x117\'\x3\x2"+
		"\x2\x2\x118\x116\x3\x2\x2\x2\x119\x11B\x5*\x16\x2\x11A\x119\x3\x2\x2\x2"+
		"\x11A\x11B\x3\x2\x2\x2\x11B\x11D\x3\x2\x2\x2\x11C\x11E\t\a\x2\x2\x11D"+
		"\x11C\x3\x2\x2\x2\x11D\x11E\x3\x2\x2\x2\x11E\x120\x3\x2\x2\x2\x11F\x121"+
		"\x5.\x18\x2\x120\x11F\x3\x2\x2\x2\x120\x121\x3\x2\x2\x2\x121\x123\x3\x2"+
		"\x2\x2\x122\x124\aG\x2\x2\x123\x122\x3\x2\x2\x2\x123\x124\x3\x2\x2\x2"+
		"\x124\x126\x3\x2\x2\x2\x125\x127\aH\x2\x2\x126\x125\x3\x2\x2\x2\x126\x127"+
		"\x3\x2\x2\x2\x127\x129\x3\x2\x2\x2\x128\x12A\a\x46\x2\x2\x129\x128\x3"+
		"\x2\x2\x2\x129\x12A\x3\x2\x2\x2\x12A)\x3\x2\x2\x2\x12B\x12C\b\x16\x1\x2"+
		"\x12C\x12D\t\x6\x2\x2\x12D\x134\x5*\x16\x5\x12E\x134\x5,\x17\x2\x12F\x130"+
		"\a\x15\x2\x2\x130\x131\x5*\x16\x2\x131\x132\a\x16\x2\x2\x132\x134\x3\x2"+
		"\x2\x2\x133\x12B\x3\x2\x2\x2\x133\x12E\x3\x2\x2\x2\x133\x12F\x3\x2\x2"+
		"\x2\x134\x13D\x3\x2\x2\x2\x135\x136\f\a\x2\x2\x136\x137\aP\x2\x2\x137"+
		"\x13C\x5*\x16\b\x138\x139\f\x6\x2\x2\x139\x13A\t\x6\x2\x2\x13A\x13C\x5"+
		"*\x16\a\x13B\x135\x3\x2\x2\x2\x13B\x138\x3\x2\x2\x2\x13C\x13F\x3\x2\x2"+
		"\x2\x13D\x13B\x3\x2\x2\x2\x13D\x13E\x3\x2\x2\x2\x13E+\x3\x2\x2\x2\x13F"+
		"\x13D\x3\x2\x2\x2\x140\x142\t\b\x2\x2\x141\x140\x3\x2\x2\x2\x141\x142"+
		"\x3\x2\x2\x2\x142\x144\x3\x2\x2\x2\x143\x145\aK\x2\x2\x144\x143\x3\x2"+
		"\x2\x2\x144\x145\x3\x2\x2\x2\x145\x147\x3\x2\x2\x2\x146\x148\aJ\x2\x2"+
		"\x147\x146\x3\x2\x2\x2\x147\x148\x3\x2\x2\x2\x148\x14A\x3\x2\x2\x2\x149"+
		"\x14B\t\t\x2\x2\x14A\x149\x3\x2\x2\x2\x14A\x14B\x3\x2\x2\x2\x14B-\x3\x2"+
		"\x2\x2\x14C\x153\a\xE\x2\x2\x14D\x153\x5\x30\x19\x2\x14E\x14F\a\xF\x2"+
		"\x2\x14F\x150\x5\x30\x19\x2\x150\x151\a\x10\x2\x2\x151\x153\x3\x2\x2\x2"+
		"\x152\x14C\x3\x2\x2\x2\x152\x14D\x3\x2\x2\x2\x152\x14E\x3\x2\x2\x2\x153"+
		"/\x3\x2\x2\x2\x154\x15F\a>\x2\x2\x155\x15F\a?\x2\x2\x156\x157\x5\x34\x1B"+
		"\x2\x157\x159\t\n\x2\x2\x158\x15A\x5\x34\x1B\x2\x159\x158\x3\x2\x2\x2"+
		"\x159\x15A\x3\x2\x2\x2\x15A\x15F\x3\x2\x2\x2\x15B\x15C\t\n\x2\x2\x15C"+
		"\x15F\x5\x34\x1B\x2\x15D\x15F\x5\x34\x1B\x2\x15E\x154\x3\x2\x2\x2\x15E"+
		"\x155\x3\x2\x2\x2\x15E\x156\x3\x2\x2\x2\x15E\x15B\x3\x2\x2\x2\x15E\x15D"+
		"\x3\x2\x2\x2\x15F\x31\x3\x2\x2\x2\x160\x164\a>\x2\x2\x161\x164\a\xE\x2"+
		"\x2\x162\x164\x5\x34\x1B\x2\x163\x160\x3\x2\x2\x2\x163\x161\x3\x2\x2\x2"+
		"\x163\x162\x3\x2\x2\x2\x164\x33\x3\x2\x2\x2\x165\x16A\x5\x36\x1C\x2\x166"+
		"\x16A\x5\x38\x1D\x2\x167\x16A\x5:\x1E\x2\x168\x16A\x5<\x1F\x2\x169\x165"+
		"\x3\x2\x2\x2\x169\x166\x3\x2\x2\x2\x169\x167\x3\x2\x2\x2\x169\x168\x3"+
		"\x2\x2\x2\x16A\x35\x3\x2\x2\x2\x16B\x16C\a@\x2\x2\x16C\x37\x3\x2\x2\x2"+
		"\x16D\x16F\t\v\x2\x2\x16E\x16D\x3\x2\x2\x2\x16E\x16F\x3\x2\x2\x2\x16F"+
		"\x170\x3\x2\x2\x2\x170\x171\t\f\x2\x2\x171\x39\x3\x2\x2\x2\x172\x173\a"+
		"\x45\x2\x2\x173;\x3\x2\x2\x2\x174\x175\t\r\x2\x2\x175=\x3\x2\x2\x2\x176"+
		"\x181\x5@!\x2\x177\x181\x5\x42\"\x2\x178\x181\x5\x44#\x2\x179\x181\x5"+
		"\x46$\x2\x17A\x181\x5H%\x2\x17B\x181\x5J&\x2\x17C\x181\x5L\'\x2\x17D\x181"+
		"\x5N(\x2\x17E\x181\x5P)\x2\x17F\x181\x5R*\x2\x180\x176\x3\x2\x2\x2\x180"+
		"\x177\x3\x2\x2\x2\x180\x178\x3\x2\x2\x2\x180\x179\x3\x2\x2\x2\x180\x17A"+
		"\x3\x2\x2\x2\x180\x17B\x3\x2\x2\x2\x180\x17C\x3\x2\x2\x2\x180\x17D\x3"+
		"\x2\x2\x2\x180\x17E\x3\x2\x2\x2\x180\x17F\x3\x2\x2\x2\x181?\x3\x2\x2\x2"+
		"\x182\x184\a\x1C\x2\x2\x183\x185\t\xE\x2\x2\x184\x183\x3\x2\x2\x2\x184"+
		"\x185\x3\x2\x2\x2\x185\x187\x3\x2\x2\x2\x186\x188\x5\x32\x1A\x2\x187\x186"+
		"\x3\x2\x2\x2\x187\x188\x3\x2\x2\x2\x188\x18A\x3\x2\x2\x2\x189\x18B\x5"+
		"h\x35\x2\x18A\x189\x3\x2\x2\x2\x18A\x18B\x3\x2\x2\x2\x18B\x41\x3\x2\x2"+
		"\x2\x18C\x18D\a\x1C\x2\x2\x18D\x18F\a\x32\x2\x2\x18E\x190\x5h\x35\x2\x18F"+
		"\x18E\x3\x2\x2\x2\x18F\x190\x3\x2\x2\x2\x190\x43\x3\x2\x2\x2\x191\x192"+
		"\a\x1C\x2\x2\x192\x194\a\x33\x2\x2\x193\x195\x5h\x35\x2\x194\x193\x3\x2"+
		"\x2\x2\x194\x195\x3\x2\x2\x2\x195\x197\x3\x2\x2\x2\x196\x198\x5.\x18\x2"+
		"\x197\x196\x3\x2\x2\x2\x197\x198\x3\x2\x2\x2\x198\x19B\x3\x2\x2\x2\x199"+
		"\x19A\a\x5\x2\x2\x19A\x19C\x5$\x13\x2\x19B\x199\x3\x2\x2\x2\x19B\x19C"+
		"\x3\x2\x2\x2\x19C\x45\x3\x2\x2\x2\x19D\x19E\a\x1C\x2\x2\x19E\x1A0\a\x34"+
		"\x2\x2\x19F\x1A1\x5h\x35\x2\x1A0\x19F\x3\x2\x2\x2\x1A0\x1A1\x3\x2\x2\x2"+
		"\x1A1\x1A3\x3\x2\x2\x2\x1A2\x1A4\x5.\x18\x2\x1A3\x1A2\x3\x2\x2\x2\x1A3"+
		"\x1A4\x3\x2\x2\x2\x1A4\x1A7\x3\x2\x2\x2\x1A5\x1A6\a\x5\x2\x2\x1A6\x1A8"+
		"\x5$\x13\x2\x1A7\x1A5\x3\x2\x2\x2\x1A7\x1A8\x3\x2\x2\x2\x1A8G\x3\x2\x2"+
		"\x2\x1A9\x1AA\a\x1C\x2\x2\x1AA\x1AC\a\x35\x2\x2\x1AB\x1AD\x5h\x35\x2\x1AC"+
		"\x1AB\x3\x2\x2\x2\x1AC\x1AD\x3\x2\x2\x2\x1ADI\x3\x2\x2\x2\x1AE\x1AF\a"+
		"\x1C\x2\x2\x1AF\x1B1\a\x36\x2\x2\x1B0\x1B2\x5h\x35\x2\x1B1\x1B0\x3\x2"+
		"\x2\x2\x1B1\x1B2\x3\x2\x2\x2\x1B2\x1B4\x3\x2\x2\x2\x1B3\x1B5\x5.\x18\x2"+
		"\x1B4\x1B3\x3\x2\x2\x2\x1B4\x1B5\x3\x2\x2\x2\x1B5K\x3\x2\x2\x2\x1B6\x1B7"+
		"\a\x1C\x2\x2\x1B7\x1B9\a\x38\x2\x2\x1B8\x1BA\x5h\x35\x2\x1B9\x1B8\x3\x2"+
		"\x2\x2\x1B9\x1BA\x3\x2\x2\x2\x1BA\x1BC\x3\x2\x2\x2\x1BB\x1BD\x5.\x18\x2"+
		"\x1BC\x1BB\x3\x2\x2\x2\x1BC\x1BD\x3\x2\x2\x2\x1BD\x1C0\x3\x2\x2\x2\x1BE"+
		"\x1BF\a\x5\x2\x2\x1BF\x1C1\x5$\x13\x2\x1C0\x1BE\x3\x2\x2\x2\x1C0\x1C1"+
		"\x3\x2\x2\x2\x1C1M\x3\x2\x2\x2\x1C2\x1C3\a\x1C\x2\x2\x1C3\x1C5\a\x37\x2"+
		"\x2\x1C4\x1C6\x5h\x35\x2\x1C5\x1C4\x3\x2\x2\x2\x1C5\x1C6\x3\x2\x2\x2\x1C6"+
		"\x1C9\x3\x2\x2\x2\x1C7\x1C8\a\x5\x2\x2\x1C8\x1CA\x5$\x13\x2\x1C9\x1C7"+
		"\x3\x2\x2\x2\x1C9\x1CA\x3\x2\x2\x2\x1CAO\x3\x2\x2\x2\x1CB\x1CC\a\x1C\x2"+
		"\x2\x1CC\x1CE\a\x39\x2\x2\x1CD\x1CF\a:\x2\x2\x1CE\x1CD\x3\x2\x2\x2\x1CE"+
		"\x1CF\x3\x2\x2\x2\x1CF\x1D1\x3\x2\x2\x2\x1D0\x1D2\x5h\x35\x2\x1D1\x1D0"+
		"\x3\x2\x2\x2\x1D1\x1D2\x3\x2\x2\x2\x1D2\x1D4\x3\x2\x2\x2\x1D3\x1D5\x5"+
		".\x18\x2\x1D4\x1D3\x3\x2\x2\x2\x1D4\x1D5\x3\x2\x2\x2\x1D5Q\x3\x2\x2\x2"+
		"\x1D6\x1D7\a\x1C\x2\x2\x1D7\x1D9\a;\x2\x2\x1D8\x1DA\x5h\x35\x2\x1D9\x1D8"+
		"\x3\x2\x2\x2\x1D9\x1DA\x3\x2\x2\x2\x1DAS\x3\x2\x2\x2\x1DB\x1E5\x5V,\x2"+
		"\x1DC\x1E5\x5X-\x2\x1DD\x1E5\x5Z.\x2\x1DE\x1E5\x5\\/\x2\x1DF\x1E5\x5^"+
		"\x30\x2\x1E0\x1E5\x5`\x31\x2\x1E1\x1E5\x5\x62\x32\x2\x1E2\x1E5\x5\x64"+
		"\x33\x2\x1E3\x1E5\x5\x66\x34\x2\x1E4\x1DB\x3\x2\x2\x2\x1E4\x1DC\x3\x2"+
		"\x2\x2\x1E4\x1DD\x3\x2\x2\x2\x1E4\x1DE\x3\x2\x2\x2\x1E4\x1DF\x3\x2\x2"+
		"\x2\x1E4\x1E0\x3\x2\x2\x2\x1E4\x1E1\x3\x2\x2\x2\x1E4\x1E2\x3\x2\x2\x2"+
		"\x1E4\x1E3\x3\x2\x2\x2\x1E5U\x3\x2\x2\x2\x1E6\x1E8\a\x1D\x2\x2\x1E7\x1E9"+
		"\t\xE\x2\x2\x1E8\x1E7\x3\x2\x2\x2\x1E8\x1E9\x3\x2\x2\x2\x1E9\x1EB\x3\x2"+
		"\x2\x2\x1EA\x1EC\x5\x32\x1A\x2\x1EB\x1EA\x3\x2\x2\x2\x1EB\x1EC\x3\x2\x2"+
		"\x2\x1EC\x1EE\x3\x2\x2\x2\x1ED\x1EF\x5h\x35\x2\x1EE\x1ED\x3\x2\x2\x2\x1EE"+
		"\x1EF\x3\x2\x2\x2\x1EFW\x3\x2\x2\x2\x1F0\x1F1\a\x1D\x2\x2\x1F1\x1F3\a"+
		"\x32\x2\x2\x1F2\x1F4\x5h\x35\x2\x1F3\x1F2\x3\x2\x2\x2\x1F3\x1F4\x3\x2"+
		"\x2\x2\x1F4Y\x3\x2\x2\x2\x1F5\x1F6\a\x1D\x2\x2\x1F6\x1F8\a\x33\x2\x2\x1F7"+
		"\x1F9\x5h\x35\x2\x1F8\x1F7\x3\x2\x2\x2\x1F8\x1F9\x3\x2\x2\x2\x1F9\x1FB"+
		"\x3\x2\x2\x2\x1FA\x1FC\x5.\x18\x2\x1FB\x1FA\x3\x2\x2\x2\x1FB\x1FC\x3\x2"+
		"\x2\x2\x1FC\x1FF\x3\x2\x2\x2\x1FD\x1FE\a\x5\x2\x2\x1FE\x200\x5$\x13\x2"+
		"\x1FF\x1FD\x3\x2\x2\x2\x1FF\x200\x3\x2\x2\x2\x200[\x3\x2\x2\x2\x201\x202"+
		"\a\x1D\x2\x2\x202\x204\a\x34\x2\x2\x203\x205\x5h\x35\x2\x204\x203\x3\x2"+
		"\x2\x2\x204\x205\x3\x2\x2\x2\x205\x207\x3\x2\x2\x2\x206\x208\x5.\x18\x2"+
		"\x207\x206\x3\x2\x2\x2\x207\x208\x3\x2\x2\x2\x208\x20B\x3\x2\x2\x2\x209"+
		"\x20A\a\x5\x2\x2\x20A\x20C\x5$\x13\x2\x20B\x209\x3\x2\x2\x2\x20B\x20C"+
		"\x3\x2\x2\x2\x20C]\x3\x2\x2\x2\x20D\x20E\a\x1D\x2\x2\x20E\x210\a\x35\x2"+
		"\x2\x20F\x211\x5h\x35\x2\x210\x20F\x3\x2\x2\x2\x210\x211\x3\x2\x2\x2\x211"+
		"_\x3\x2\x2\x2\x212\x213\a\x1D\x2\x2\x213\x215\a\x36\x2\x2\x214\x216\x5"+
		"h\x35\x2\x215\x214\x3\x2\x2\x2\x215\x216\x3\x2\x2\x2\x216\x218\x3\x2\x2"+
		"\x2\x217\x219\x5.\x18\x2\x218\x217\x3\x2\x2\x2\x218\x219\x3\x2\x2\x2\x219"+
		"\x61\x3\x2\x2\x2\x21A\x21B\a\x1D\x2\x2\x21B\x21D\a\x38\x2\x2\x21C\x21E"+
		"\x5h\x35\x2\x21D\x21C\x3\x2\x2\x2\x21D\x21E\x3\x2\x2\x2\x21E\x220\x3\x2"+
		"\x2\x2\x21F\x221\x5.\x18\x2\x220\x21F\x3\x2\x2\x2\x220\x221\x3\x2\x2\x2"+
		"\x221\x224\x3\x2\x2\x2\x222\x223\a\x5\x2\x2\x223\x225\x5$\x13\x2\x224"+
		"\x222\x3\x2\x2\x2\x224\x225\x3\x2\x2\x2\x225\x63\x3\x2\x2\x2\x226\x227"+
		"\a\x1D\x2\x2\x227\x229\a\x39\x2\x2\x228\x22A\a:\x2\x2\x229\x228\x3\x2"+
		"\x2\x2\x229\x22A\x3\x2\x2\x2\x22A\x22C\x3\x2\x2\x2\x22B\x22D\x5h\x35\x2"+
		"\x22C\x22B\x3\x2\x2\x2\x22C\x22D\x3\x2\x2\x2\x22D\x22F\x3\x2\x2\x2\x22E"+
		"\x230\x5.\x18\x2\x22F\x22E\x3\x2\x2\x2\x22F\x230\x3\x2\x2\x2\x230\x65"+
		"\x3\x2\x2\x2\x231\x232\a\x1D\x2\x2\x232\x234\a;\x2\x2\x233\x235\x5h\x35"+
		"\x2\x234\x233\x3\x2\x2\x2\x234\x235\x3\x2\x2\x2\x235g\x3\x2\x2\x2\x236"+
		"\x237\b\x35\x1\x2\x237\x238\t\x6\x2\x2\x238\x23F\x5h\x35\x5\x239\x23F"+
		"\x5j\x36\x2\x23A\x23B\a\x15\x2\x2\x23B\x23C\x5h\x35\x2\x23C\x23D\a\x16"+
		"\x2\x2\x23D\x23F\x3\x2\x2\x2\x23E\x236\x3\x2\x2\x2\x23E\x239\x3\x2\x2"+
		"\x2\x23E\x23A\x3\x2\x2\x2\x23F\x248\x3\x2\x2\x2\x240\x241\f\a\x2\x2\x241"+
		"\x242\aP\x2\x2\x242\x247\x5h\x35\b\x243\x244\f\x6\x2\x2\x244\x245\t\x6"+
		"\x2\x2\x245\x247\x5h\x35\a\x246\x240\x3\x2\x2\x2\x246\x243\x3\x2\x2\x2"+
		"\x247\x24A\x3\x2\x2\x2\x248\x246\x3\x2\x2\x2\x248\x249\x3\x2\x2\x2\x249"+
		"i\x3\x2\x2\x2\x24A\x248\x3\x2\x2\x2\x24B\x24D\a=\x2\x2\x24C\x24B\x3\x2"+
		"\x2\x2\x24C\x24D\x3\x2\x2\x2\x24D\x24F\x3\x2\x2\x2\x24E\x250\aI\x2\x2"+
		"\x24F\x24E\x3\x2\x2\x2\x24F\x250\x3\x2\x2\x2\x250\x252\x3\x2\x2\x2\x251"+
		"\x253\aH\x2\x2\x252\x251\x3\x2\x2\x2\x252\x253\x3\x2\x2\x2\x253\x258\x3"+
		"\x2\x2\x2\x254\x255\a\x1E\x2\x2\x255\x256\x5\x30\x19\x2\x256\x257\a\x1F"+
		"\x2\x2\x257\x259\x3\x2\x2\x2\x258\x254\x3\x2\x2\x2\x258\x259\x3\x2\x2"+
		"\x2\x259k\x3\x2\x2\x2\x25A\x25F\x5n\x38\x2\x25B\x25F\x5p\x39\x2\x25C\x25F"+
		"\x5r:\x2\x25D\x25F\x5t;\x2\x25E\x25A\x3\x2\x2\x2\x25E\x25B\x3\x2\x2\x2"+
		"\x25E\x25C\x3\x2\x2\x2\x25E\x25D\x3\x2\x2\x2\x25Fm\x3\x2\x2\x2\x260\x261"+
		"\a \x2\x2\x261\x263\a\x37\x2\x2\x262\x264\x5.\x18\x2\x263\x262\x3\x2\x2"+
		"\x2\x263\x264\x3\x2\x2\x2\x264o\x3\x2\x2\x2\x265\x266\a \x2\x2\x266\x268"+
		"\a\x39\x2\x2\x267\x269\x5.\x18\x2\x268\x267\x3\x2\x2\x2\x268\x269\x3\x2"+
		"\x2\x2\x269q\x3\x2\x2\x2\x26A\x26B\a!\x2\x2\x26B\x26D\a\x37\x2\x2\x26C"+
		"\x26E\x5.\x18\x2\x26D\x26C\x3\x2\x2\x2\x26D\x26E\x3\x2\x2\x2\x26Es\x3"+
		"\x2\x2\x2\x26F\x270\a!\x2\x2\x270\x272\a\x39\x2\x2\x271\x273\x5.\x18\x2"+
		"\x272\x271\x3\x2\x2\x2\x272\x273\x3\x2\x2\x2\x273u\x3\x2\x2\x2\x64\x8E"+
		"\x95\x9C\xA6\xA9\xAE\xB2\xB7\xBB\xBE\xC6\xCD\xD0\xE2\xE5\xE9\xF0\xF6\xFB"+
		"\xFF\x10C\x114\x116\x11A\x11D\x120\x123\x126\x129\x133\x13B\x13D\x141"+
		"\x144\x147\x14A\x152\x159\x15E\x163\x169\x16E\x180\x184\x187\x18A\x18F"+
		"\x194\x197\x19B\x1A0\x1A3\x1A7\x1AC\x1B1\x1B4\x1B9\x1BC\x1C0\x1C5\x1C9"+
		"\x1CE\x1D1\x1D4\x1D9\x1E4\x1E8\x1EB\x1EE\x1F3\x1F8\x1FB\x1FF\x204\x207"+
		"\x20B\x210\x215\x218\x21D\x220\x224\x229\x22C\x22F\x234\x23E\x246\x248"+
		"\x24C\x24F\x252\x258\x25E\x263\x268\x26D\x272";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace AccountingServer.Console
