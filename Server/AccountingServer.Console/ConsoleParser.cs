//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.4.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\b1f6c1c4\Documents\GitHub\ProfessionalAccounting\Server\AccountingServer.QueryGeneration\Console.g4 by ANTLR 4.4.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace AccountingServer.Console {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.4.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class ConsoleParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, ChartArea=30, Series=31, 
		Ignore=32, Launch=33, Connect=34, Shutdown=35, Backup=36, Mobile=37, Fetch=38, 
		Help=39, Titles=40, Exit=41, Check=42, EditNamedQueries=43, AOAll=44, 
		AOList=45, AOQuery=46, AORegister=47, AOUnregister=48, AORecalc=49, AOResetSoft=50, 
		AOResetHard=51, AOResetMixed=52, AOApply=53, AOCollapse=54, AOCheck=55, 
		SubtotalFields=56, Guid=57, RangeNull=58, RangeAllNotNull=59, RangeAYear=60, 
		RangeAMonth=61, RangeDeltaMonth=62, RangeADay=63, RangeDeltaDay=64, RangeDeltaWeek=65, 
		VoucherType=66, CaretQuotedString=67, PercentQuotedString=68, DollarQuotedString=69, 
		DoubleQuotedString=70, SingleQuotedString=71, DetailTitle=72, DetailTitleSubTitle=73, 
		Float=74, Percent=75, Intersect=76, Union=77, Substract=78, WS=79;
	public const int
		RULE_command = 0, RULE_otherCommand = 1, RULE_chart = 2, RULE_chartLevels = 3, 
		RULE_chartLevel = 4, RULE_report = 5, RULE_namedQueryTemplate = 6, RULE_namedQuery = 7, 
		RULE_namedQueries = 8, RULE_namedQ = 9, RULE_namedQueryReference = 10, 
		RULE_name = 11, RULE_coef = 12, RULE_groupedQuery = 13, RULE_subtotal = 14, 
		RULE_subtotalAggr = 15, RULE_voucherDetailQuery = 16, RULE_emit = 17, 
		RULE_vouchers = 18, RULE_vouchersB = 19, RULE_voucherQuery = 20, RULE_details = 21, 
		RULE_detailQuery = 22, RULE_range = 23, RULE_rangeCore = 24, RULE_rangePoint = 25, 
		RULE_rangeCertainPoint = 26, RULE_rangeYear = 27, RULE_rangeMonth = 28, 
		RULE_rangeWeek = 29, RULE_rangeDay = 30, RULE_asset = 31, RULE_assetList = 32, 
		RULE_assetQuery = 33, RULE_assetRegister = 34, RULE_assetUnregister = 35, 
		RULE_assetRedep = 36, RULE_assetResetSoft = 37, RULE_assetResetMixed = 38, 
		RULE_assetResetHard = 39, RULE_assetApply = 40, RULE_assetCheck = 41, 
		RULE_amort = 42, RULE_amortList = 43, RULE_amortQuery = 44, RULE_amortRegister = 45, 
		RULE_amortUnregister = 46, RULE_amortReamo = 47, RULE_amortResetSoft = 48, 
		RULE_amortResetMixed = 49, RULE_amortApply = 50, RULE_amortCheck = 51, 
		RULE_distributedQ = 52, RULE_distributedQAtom = 53;
	public static readonly string[] ruleNames = {
		"command", "otherCommand", "chart", "chartLevels", "chartLevel", "report", 
		"namedQueryTemplate", "namedQuery", "namedQueries", "namedQ", "namedQueryReference", 
		"name", "coef", "groupedQuery", "subtotal", "subtotalAggr", "voucherDetailQuery", 
		"emit", "vouchers", "vouchersB", "voucherQuery", "details", "detailQuery", 
		"range", "rangeCore", "rangePoint", "rangeCertainPoint", "rangeYear", 
		"rangeMonth", "rangeWeek", "rangeDay", "asset", "assetList", "assetQuery", 
		"assetRegister", "assetUnregister", "assetRedep", "assetResetSoft", "assetResetMixed", 
		"assetResetHard", "assetApply", "assetCheck", "amort", "amortList", "amortQuery", 
		"amortRegister", "amortUnregister", "amortReamo", "amortResetSoft", "amortResetMixed", 
		"amortApply", "amortCheck", "distributedQ", "distributedQAtom"
	};

	private static readonly string[] _LiteralNames = {
		null, "'ch'", "';'", "':'", "'='", "'rp'", "'::'", "'|'", "'`'", "'``'", 
		"'!'", "'D'", "'[]'", "'['", "']'", "'A'", "'{'", "'}'", "'E'", "'('", 
		"')'", "'>'", "'<'", "'~'", "'@'", "'#'", "'a'", "'o'", "'[['", "']]'", 
		"'chartArea'", "'series'", "'ignore'", null, null, null, "'backup'", null, 
		"'fetch'", null, null, "'exit'", null, "'nq'", "'-all'", null, null, null, 
		null, null, "'-reset-soft'", "'-reset-hard'", "'-reset-mixed'", null, 
		null, "'-chk'", null, null, "'null'", "'~null'", null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"'*'", "'+'", "'-'", "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "ChartArea", "Series", "Ignore", "Launch", 
		"Connect", "Shutdown", "Backup", "Mobile", "Fetch", "Help", "Titles", 
		"Exit", "Check", "EditNamedQueries", "AOAll", "AOList", "AOQuery", "AORegister", 
		"AOUnregister", "AORecalc", "AOResetSoft", "AOResetHard", "AOResetMixed", 
		"AOApply", "AOCollapse", "AOCheck", "SubtotalFields", "Guid", "RangeNull", 
		"RangeAllNotNull", "RangeAYear", "RangeAMonth", "RangeDeltaMonth", "RangeADay", 
		"RangeDeltaDay", "RangeDeltaWeek", "VoucherType", "CaretQuotedString", 
		"PercentQuotedString", "DollarQuotedString", "DoubleQuotedString", "SingleQuotedString", 
		"DetailTitle", "DetailTitleSubTitle", "Float", "Percent", "Intersect", 
		"Union", "Substract", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Console.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public ConsoleParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CommandContext : ParserRuleContext {
		public AssetContext asset() {
			return GetRuleContext<AssetContext>(0);
		}
		public GroupedQueryContext groupedQuery() {
			return GetRuleContext<GroupedQueryContext>(0);
		}
		public ChartContext chart() {
			return GetRuleContext<ChartContext>(0);
		}
		public AmortContext amort() {
			return GetRuleContext<AmortContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(ConsoleParser.Eof, 0); }
		public OtherCommandContext otherCommand() {
			return GetRuleContext<OtherCommandContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public ReportContext report() {
			return GetRuleContext<ReportContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_command);
		try {
			State = 129;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 108; vouchers();
				State = 109; Match(Eof);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 111; groupedQuery();
				State = 112; Match(Eof);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 114; chart();
				State = 115; Match(Eof);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 117; report();
				State = 118; Match(Eof);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 120; asset();
				State = 121; Match(Eof);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 123; amort();
				State = 124; Match(Eof);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 126; otherCommand();
				State = 127; Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherCommandContext : ParserRuleContext {
		public ITerminalNode Connect() { return GetToken(ConsoleParser.Connect, 0); }
		public ITerminalNode Backup() { return GetToken(ConsoleParser.Backup, 0); }
		public ITerminalNode EditNamedQueries() { return GetToken(ConsoleParser.EditNamedQueries, 0); }
		public ITerminalNode Shutdown() { return GetToken(ConsoleParser.Shutdown, 0); }
		public ITerminalNode Fetch() { return GetToken(ConsoleParser.Fetch, 0); }
		public ITerminalNode Mobile() { return GetToken(ConsoleParser.Mobile, 0); }
		public ITerminalNode Help() { return GetToken(ConsoleParser.Help, 0); }
		public ITerminalNode Check() { return GetToken(ConsoleParser.Check, 0); }
		public ITerminalNode Launch() { return GetToken(ConsoleParser.Launch, 0); }
		public ITerminalNode Exit() { return GetToken(ConsoleParser.Exit, 0); }
		public ITerminalNode Titles() { return GetToken(ConsoleParser.Titles, 0); }
		public OtherCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherCommand; } }
	}

	[RuleVersion(0)]
	public OtherCommandContext otherCommand() {
		OtherCommandContext _localctx = new OtherCommandContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_otherCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Launch) | (1L << Connect) | (1L << Shutdown) | (1L << Backup) | (1L << Mobile) | (1L << Fetch) | (1L << Help) | (1L << Titles) | (1L << Exit) | (1L << Check) | (1L << EditNamedQueries))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChartContext : ParserRuleContext {
		public NamedQueryContext namedQuery() {
			return GetRuleContext<NamedQueryContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ChartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chart; } }
	}

	[RuleVersion(0)]
	public ChartContext chart() {
		ChartContext _localctx = new ChartContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_chart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; Match(T__0);
			State = 134; namedQuery();
			State = 136;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 135; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChartLevelsContext : ParserRuleContext {
		public ChartLevelContext chartLevel(int i) {
			return GetRuleContext<ChartLevelContext>(i);
		}
		public IReadOnlyList<ChartLevelContext> chartLevel() {
			return GetRuleContexts<ChartLevelContext>();
		}
		public ChartLevelsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chartLevels; } }
	}

	[RuleVersion(0)]
	public ChartLevelsContext chartLevels() {
		ChartLevelsContext _localctx = new ChartLevelsContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_chartLevels);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; chartLevel();
			State = 143;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__1) {
				{
				{
				State = 139; Match(T__1);
				State = 140; chartLevel();
				}
				}
				State = 145;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChartLevelContext : ParserRuleContext {
		public ITerminalNode Series() { return GetToken(ConsoleParser.Series, 0); }
		public ITerminalNode SingleQuotedString(int i) {
			return GetToken(ConsoleParser.SingleQuotedString, i);
		}
		public ITerminalNode Ignore() { return GetToken(ConsoleParser.Ignore, 0); }
		public IReadOnlyList<ITerminalNode> SingleQuotedString() { return GetTokens(ConsoleParser.SingleQuotedString); }
		public ITerminalNode ChartArea() { return GetToken(ConsoleParser.ChartArea, 0); }
		public ChartLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chartLevel; } }
	}

	[RuleVersion(0)]
	public ChartLevelContext chartLevel() {
		ChartLevelContext _localctx = new ChartLevelContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_chartLevel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ChartArea) | (1L << Series) | (1L << Ignore))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 156;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 147; Match(T__2);
				State = 153;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==SingleQuotedString) {
					{
					{
					State = 148; Match(SingleQuotedString);
					State = 149; Match(T__3);
					State = 150; Match(SingleQuotedString);
					}
					}
					State = 155;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReportContext : ParserRuleContext {
		public NamedQueryContext namedQuery() {
			return GetRuleContext<NamedQueryContext>(0);
		}
		public GroupedQueryContext groupedQuery() {
			return GetRuleContext<GroupedQueryContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ReportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_report; } }
	}

	[RuleVersion(0)]
	public ReportContext report() {
		ReportContext _localctx = new ReportContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_report);
		int _la;
		try {
			State = 165;
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 158; Match(T__4);
				State = 159; namedQuery();
				State = 161;
				_la = _input.La(1);
				if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
					{
					State = 160; range();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 163; Match(T__4);
				State = 164; groupedQuery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedQueryTemplateContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NamedQueryTemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedQueryTemplate; } }
	}

	[RuleVersion(0)]
	public NamedQueryTemplateContext namedQueryTemplate() {
		NamedQueryTemplateContext _localctx = new NamedQueryTemplateContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_namedQueryTemplate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167; name();
			State = 168; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedQueryContext : ParserRuleContext {
		public NamedQContext namedQ() {
			return GetRuleContext<NamedQContext>(0);
		}
		public NamedQueryReferenceContext namedQueryReference() {
			return GetRuleContext<NamedQueryReferenceContext>(0);
		}
		public NamedQueriesContext namedQueries() {
			return GetRuleContext<NamedQueriesContext>(0);
		}
		public NamedQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedQuery; } }
	}

	[RuleVersion(0)]
	public NamedQueryContext namedQuery() {
		NamedQueryContext _localctx = new NamedQueryContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_namedQuery);
		try {
			State = 173;
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 170; namedQueries();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 171; namedQ();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 172; namedQueryReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedQueriesContext : ParserRuleContext {
		public CoefContext coef() {
			return GetRuleContext<CoefContext>(0);
		}
		public IReadOnlyList<NamedQueryContext> namedQuery() {
			return GetRuleContexts<NamedQueryContext>();
		}
		public ITerminalNode DoubleQuotedString() { return GetToken(ConsoleParser.DoubleQuotedString, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NamedQueryContext namedQuery(int i) {
			return GetRuleContext<NamedQueryContext>(i);
		}
		public NamedQueriesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedQueries; } }
	}

	[RuleVersion(0)]
	public NamedQueriesContext namedQueries() {
		NamedQueriesContext _localctx = new NamedQueriesContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_namedQueries);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175; name();
			State = 177;
			_la = _input.La(1);
			if (_la==Intersect) {
				{
				State = 176; coef();
				}
			}

			State = 180;
			_la = _input.La(1);
			if (_la==DoubleQuotedString) {
				{
				State = 179; Match(DoubleQuotedString);
				}
			}

			State = 182; Match(T__5);
			State = 183; namedQuery();
			State = 188;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__6) {
				{
				{
				State = 184; Match(T__6);
				State = 185; namedQuery();
				}
				}
				State = 190;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 191; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedQContext : ParserRuleContext {
		public CoefContext coef() {
			return GetRuleContext<CoefContext>(0);
		}
		public GroupedQueryContext groupedQuery() {
			return GetRuleContext<GroupedQueryContext>(0);
		}
		public ITerminalNode DoubleQuotedString() { return GetToken(ConsoleParser.DoubleQuotedString, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NamedQContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedQ; } }
	}

	[RuleVersion(0)]
	public NamedQContext namedQ() {
		NamedQContext _localctx = new NamedQContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_namedQ);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; name();
			State = 195;
			_la = _input.La(1);
			if (_la==Intersect) {
				{
				State = 194; coef();
				}
			}

			State = 198;
			_la = _input.La(1);
			if (_la==DoubleQuotedString) {
				{
				State = 197; Match(DoubleQuotedString);
				}
			}

			State = 200; Match(T__2);
			State = 201; groupedQuery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedQueryReferenceContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NamedQueryReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedQueryReference; } }
	}

	[RuleVersion(0)]
	public NamedQueryReferenceContext namedQueryReference() {
		NamedQueryReferenceContext _localctx = new NamedQueryReferenceContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_namedQueryReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203; name();
			State = 204; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public ITerminalNode DollarQuotedString() { return GetToken(ConsoleParser.DollarQuotedString, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206; Match(DollarQuotedString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CoefContext : ParserRuleContext {
		public ITerminalNode Percent() { return GetToken(ConsoleParser.Percent, 0); }
		public ITerminalNode Float() { return GetToken(ConsoleParser.Float, 0); }
		public CoefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coef; } }
	}

	[RuleVersion(0)]
	public CoefContext coef() {
		CoefContext _localctx = new CoefContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_coef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208; Match(Intersect);
			State = 209;
			_la = _input.La(1);
			if ( !(_la==Float || _la==Percent) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupedQueryContext : ParserRuleContext {
		public SubtotalContext subtotal() {
			return GetRuleContext<SubtotalContext>(0);
		}
		public VoucherDetailQueryContext voucherDetailQuery() {
			return GetRuleContext<VoucherDetailQueryContext>(0);
		}
		public GroupedQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupedQuery; } }
	}

	[RuleVersion(0)]
	public GroupedQueryContext groupedQuery() {
		GroupedQueryContext _localctx = new GroupedQueryContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_groupedQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211; voucherDetailQuery();
			State = 212; subtotal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtotalContext : ParserRuleContext {
		public IToken SubtotalMark;
		public ITerminalNode SubtotalFields() { return GetToken(ConsoleParser.SubtotalFields, 0); }
		public SubtotalAggrContext subtotalAggr() {
			return GetRuleContext<SubtotalAggrContext>(0);
		}
		public SubtotalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtotal; } }
	}

	[RuleVersion(0)]
	public SubtotalContext subtotal() {
		SubtotalContext _localctx = new SubtotalContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_subtotal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			_localctx.SubtotalMark = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__8) | (1L << T__9))) != 0)) ) {
				_localctx.SubtotalMark = _errHandler.RecoverInline(this);
			}
			Consume();
			State = 216;
			_la = _input.La(1);
			if (_la==SubtotalFields) {
				{
				State = 215; Match(SubtotalFields);
				}
			}

			State = 219;
			_la = _input.La(1);
			if (_la==T__10) {
				{
				State = 218; subtotalAggr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtotalAggrContext : ParserRuleContext {
		public IToken IsAll;
		public RangeCoreContext rangeCore() {
			return GetRuleContext<RangeCoreContext>(0);
		}
		public SubtotalAggrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtotalAggr; } }
	}

	[RuleVersion(0)]
	public SubtotalAggrContext subtotalAggr() {
		SubtotalAggrContext _localctx = new SubtotalAggrContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_subtotalAggr);
		try {
			State = 230;
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 221; Match(T__10);
				State = 223;
				switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
				case 1:
					{
					State = 222; _localctx.IsAll = Match(T__11);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 225; Match(T__10);
				State = 226; Match(T__12);
				State = 227; rangeCore();
				State = 228; Match(T__13);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoucherDetailQueryContext : ParserRuleContext {
		public VoucherQueryContext voucherQuery() {
			return GetRuleContext<VoucherQueryContext>(0);
		}
		public EmitContext emit() {
			return GetRuleContext<EmitContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public VoucherDetailQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voucherDetailQuery; } }
	}

	[RuleVersion(0)]
	public VoucherDetailQueryContext voucherDetailQuery() {
		VoucherDetailQueryContext _localctx = new VoucherDetailQueryContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_voucherDetailQuery);
		try {
			State = 236;
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 232; vouchers();
				State = 233; emit();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 235; voucherQuery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmitContext : ParserRuleContext {
		public IToken Op;
		public DetailsContext details() {
			return GetRuleContext<DetailsContext>(0);
		}
		public EmitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emit; } }
	}

	[RuleVersion(0)]
	public EmitContext emit() {
		EmitContext _localctx = new EmitContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_emit);
		try {
			State = 241;
			switch (_input.La(1)) {
			case T__14:
				EnterOuterAlt(_localctx, 1);
				{
				State = 238; _localctx.Op = Match(T__14);
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 239; Match(T__2);
				State = 240; details(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VouchersContext : ParserRuleContext {
		public VoucherQueryContext voucherQuery() {
			return GetRuleContext<VoucherQueryContext>(0);
		}
		public VouchersBContext vouchersB() {
			return GetRuleContext<VouchersBContext>(0);
		}
		public VouchersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vouchers; } }
	}

	[RuleVersion(0)]
	public VouchersContext vouchers() {
		VouchersContext _localctx = new VouchersContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_vouchers);
		try {
			State = 245;
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 243; vouchersB(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 244; voucherQuery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VouchersBContext : ParserRuleContext {
		public IToken Op;
		public VouchersBContext vouchersB(int i) {
			return GetRuleContext<VouchersBContext>(i);
		}
		public VoucherQueryContext voucherQuery() {
			return GetRuleContext<VoucherQueryContext>(0);
		}
		public IReadOnlyList<VouchersBContext> vouchersB() {
			return GetRuleContexts<VouchersBContext>();
		}
		public VouchersBContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vouchersB; } }
	}

	[RuleVersion(0)]
	public VouchersBContext vouchersB() {
		return vouchersB(0);
	}

	private VouchersBContext vouchersB(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		VouchersBContext _localctx = new VouchersBContext(_ctx, _parentState);
		VouchersBContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_vouchersB, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				{
				State = 248;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==Union || _la==Substract) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 249; vouchersB(3);
				}
				break;

			case 2:
				{
				State = 250; Match(T__15);
				State = 251; voucherQuery();
				State = 252; Match(T__16);
				}
				break;

			case 3:
				{
				State = 254; Match(T__15);
				State = 255; vouchersB(0);
				State = 256; Match(T__16);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 268;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 266;
					switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
					case 1:
						{
						_localctx = new VouchersBContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_vouchersB);
						State = 260;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 261; _localctx.Op = Match(Intersect);
						State = 262; vouchersB(6);
						}
						break;

					case 2:
						{
						_localctx = new VouchersBContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_vouchersB);
						State = 263;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 264;
						_localctx.Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==Union || _la==Substract) ) {
							_localctx.Op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 265; vouchersB(5);
						}
						break;
					}
					} 
				}
				State = 270;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VoucherQueryContext : ParserRuleContext {
		public IToken Op;
		public ITerminalNode CaretQuotedString() { return GetToken(ConsoleParser.CaretQuotedString, 0); }
		public ITerminalNode PercentQuotedString() { return GetToken(ConsoleParser.PercentQuotedString, 0); }
		public DetailsContext details() {
			return GetRuleContext<DetailsContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode VoucherType() { return GetToken(ConsoleParser.VoucherType, 0); }
		public VoucherQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voucherQuery; } }
	}

	[RuleVersion(0)]
	public VoucherQueryContext voucherQuery() {
		VoucherQueryContext _localctx = new VoucherQueryContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_voucherQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
			case 1:
				{
				State = 271; details(0);
				}
				break;
			}
			State = 275;
			switch ( Interpreter.AdaptivePredict(_input,24,_ctx) ) {
			case 1:
				{
				State = 274;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__14 || _la==T__17) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 278;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 277; range();
				}
			}

			State = 281;
			_la = _input.La(1);
			if (_la==CaretQuotedString) {
				{
				State = 280; Match(CaretQuotedString);
				}
			}

			State = 284;
			_la = _input.La(1);
			if (_la==PercentQuotedString) {
				{
				State = 283; Match(PercentQuotedString);
				}
			}

			State = 287;
			_la = _input.La(1);
			if (_la==VoucherType) {
				{
				State = 286; Match(VoucherType);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DetailsContext : ParserRuleContext {
		public IToken Op;
		public DetailsContext details(int i) {
			return GetRuleContext<DetailsContext>(i);
		}
		public IReadOnlyList<DetailsContext> details() {
			return GetRuleContexts<DetailsContext>();
		}
		public DetailQueryContext detailQuery() {
			return GetRuleContext<DetailQueryContext>(0);
		}
		public DetailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_details; } }
	}

	[RuleVersion(0)]
	public DetailsContext details() {
		return details(0);
	}

	private DetailsContext details(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		DetailsContext _localctx = new DetailsContext(_ctx, _parentState);
		DetailsContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_details, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				State = 290;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==Union || _la==Substract) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 291; details(3);
				}
				break;

			case 2:
				{
				State = 292; detailQuery();
				}
				break;

			case 3:
				{
				State = 293; Match(T__18);
				State = 294; details(0);
				State = 295; Match(T__19);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 307;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 305;
					switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
					case 1:
						{
						_localctx = new DetailsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_details);
						State = 299;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 300; _localctx.Op = Match(Intersect);
						State = 301; details(6);
						}
						break;

					case 2:
						{
						_localctx = new DetailsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_details);
						State = 302;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 303;
						_localctx.Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==Union || _la==Substract) ) {
							_localctx.Op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 304; details(5);
						}
						break;
					}
					} 
				}
				State = 309;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DetailQueryContext : ParserRuleContext {
		public IToken Direction;
		public ITerminalNode DetailTitleSubTitle() { return GetToken(ConsoleParser.DetailTitleSubTitle, 0); }
		public ITerminalNode DoubleQuotedString() { return GetToken(ConsoleParser.DoubleQuotedString, 0); }
		public ITerminalNode SingleQuotedString() { return GetToken(ConsoleParser.SingleQuotedString, 0); }
		public ITerminalNode DetailTitle() { return GetToken(ConsoleParser.DetailTitle, 0); }
		public DetailQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_detailQuery; } }
	}

	[RuleVersion(0)]
	public DetailQueryContext detailQuery() {
		DetailQueryContext _localctx = new DetailQueryContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_detailQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				State = 310;
				_la = _input.La(1);
				if ( !(_la==DetailTitle || _la==DetailTitleSubTitle) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 314;
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				{
				State = 313; Match(SingleQuotedString);
				}
				break;
			}
			State = 317;
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				{
				State = 316; Match(DoubleQuotedString);
				}
				break;
			}
			State = 320;
			switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
			case 1:
				{
				State = 319;
				_localctx.Direction = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__20 || _la==T__21) ) {
					_localctx.Direction = _errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public RangeCoreContext Core;
		public RangeCoreContext rangeCore() {
			return GetRuleContext<RangeCoreContext>(0);
		}
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_range);
		try {
			State = 328;
			switch (_input.La(1)) {
			case T__11:
				EnterOuterAlt(_localctx, 1);
				{
				State = 322; Match(T__11);
				}
				break;
			case T__3:
			case T__22:
			case T__23:
			case T__24:
			case RangeNull:
			case RangeAllNotNull:
			case RangeAYear:
			case RangeAMonth:
			case RangeDeltaMonth:
			case RangeADay:
			case RangeDeltaDay:
			case RangeDeltaWeek:
				EnterOuterAlt(_localctx, 2);
				{
				State = 323; _localctx.Core = rangeCore();
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 3);
				{
				State = 324; Match(T__12);
				State = 325; _localctx.Core = rangeCore();
				State = 326; Match(T__13);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeCoreContext : ParserRuleContext {
		public RangeCertainPointContext Begin;
		public IToken Op;
		public RangeCertainPointContext End;
		public RangeCertainPointContext Certain;
		public ITerminalNode RangeNull() { return GetToken(ConsoleParser.RangeNull, 0); }
		public RangeCertainPointContext rangeCertainPoint(int i) {
			return GetRuleContext<RangeCertainPointContext>(i);
		}
		public ITerminalNode RangeAllNotNull() { return GetToken(ConsoleParser.RangeAllNotNull, 0); }
		public IReadOnlyList<RangeCertainPointContext> rangeCertainPoint() {
			return GetRuleContexts<RangeCertainPointContext>();
		}
		public RangeCoreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeCore; } }
	}

	[RuleVersion(0)]
	public RangeCoreContext rangeCore() {
		RangeCoreContext _localctx = new RangeCoreContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_rangeCore);
		int _la;
		try {
			State = 340;
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 330; Match(RangeNull);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 331; Match(RangeAllNotNull);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 332; _localctx.Begin = rangeCertainPoint();
				State = 333;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__3 || _la==T__22) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 335;
				_la = _input.La(1);
				if (((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & ((1L << (T__23 - 24)) | (1L << (T__24 - 24)) | (1L << (RangeAYear - 24)) | (1L << (RangeAMonth - 24)) | (1L << (RangeDeltaMonth - 24)) | (1L << (RangeADay - 24)) | (1L << (RangeDeltaDay - 24)) | (1L << (RangeDeltaWeek - 24)))) != 0)) {
					{
					State = 334; _localctx.End = rangeCertainPoint();
					}
				}

				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 337;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__3 || _la==T__22) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 338; _localctx.End = rangeCertainPoint();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 339; _localctx.Certain = rangeCertainPoint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangePointContext : ParserRuleContext {
		public IToken All;
		public ITerminalNode RangeNull() { return GetToken(ConsoleParser.RangeNull, 0); }
		public RangeCertainPointContext rangeCertainPoint() {
			return GetRuleContext<RangeCertainPointContext>(0);
		}
		public RangePointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangePoint; } }
	}

	[RuleVersion(0)]
	public RangePointContext rangePoint() {
		RangePointContext _localctx = new RangePointContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_rangePoint);
		try {
			State = 345;
			switch (_input.La(1)) {
			case RangeNull:
				EnterOuterAlt(_localctx, 1);
				{
				State = 342; Match(RangeNull);
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 343; _localctx.All = Match(T__11);
				}
				break;
			case T__23:
			case T__24:
			case RangeAYear:
			case RangeAMonth:
			case RangeDeltaMonth:
			case RangeADay:
			case RangeDeltaDay:
			case RangeDeltaWeek:
				EnterOuterAlt(_localctx, 3);
				{
				State = 344; rangeCertainPoint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeCertainPointContext : ParserRuleContext {
		public RangeWeekContext rangeWeek() {
			return GetRuleContext<RangeWeekContext>(0);
		}
		public RangeYearContext rangeYear() {
			return GetRuleContext<RangeYearContext>(0);
		}
		public RangeMonthContext rangeMonth() {
			return GetRuleContext<RangeMonthContext>(0);
		}
		public RangeDayContext rangeDay() {
			return GetRuleContext<RangeDayContext>(0);
		}
		public RangeCertainPointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeCertainPoint; } }
	}

	[RuleVersion(0)]
	public RangeCertainPointContext rangeCertainPoint() {
		RangeCertainPointContext _localctx = new RangeCertainPointContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_rangeCertainPoint);
		try {
			State = 351;
			switch (_input.La(1)) {
			case RangeAYear:
				EnterOuterAlt(_localctx, 1);
				{
				State = 347; rangeYear();
				}
				break;
			case T__23:
			case T__24:
			case RangeAMonth:
			case RangeDeltaMonth:
				EnterOuterAlt(_localctx, 2);
				{
				State = 348; rangeMonth();
				}
				break;
			case RangeDeltaWeek:
				EnterOuterAlt(_localctx, 3);
				{
				State = 349; rangeWeek();
				}
				break;
			case RangeADay:
			case RangeDeltaDay:
				EnterOuterAlt(_localctx, 4);
				{
				State = 350; rangeDay();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeYearContext : ParserRuleContext {
		public ITerminalNode RangeAYear() { return GetToken(ConsoleParser.RangeAYear, 0); }
		public RangeYearContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeYear; } }
	}

	[RuleVersion(0)]
	public RangeYearContext rangeYear() {
		RangeYearContext _localctx = new RangeYearContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_rangeYear);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353; Match(RangeAYear);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeMonthContext : ParserRuleContext {
		public IToken Modifier;
		public ITerminalNode RangeDeltaMonth() { return GetToken(ConsoleParser.RangeDeltaMonth, 0); }
		public ITerminalNode RangeAMonth() { return GetToken(ConsoleParser.RangeAMonth, 0); }
		public RangeMonthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeMonth; } }
	}

	[RuleVersion(0)]
	public RangeMonthContext rangeMonth() {
		RangeMonthContext _localctx = new RangeMonthContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_rangeMonth);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356;
			_la = _input.La(1);
			if (_la==T__23 || _la==T__24) {
				{
				State = 355;
				_localctx.Modifier = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__23 || _la==T__24) ) {
					_localctx.Modifier = _errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			State = 358;
			_la = _input.La(1);
			if ( !(_la==RangeAMonth || _la==RangeDeltaMonth) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeWeekContext : ParserRuleContext {
		public ITerminalNode RangeDeltaWeek() { return GetToken(ConsoleParser.RangeDeltaWeek, 0); }
		public RangeWeekContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeWeek; } }
	}

	[RuleVersion(0)]
	public RangeWeekContext rangeWeek() {
		RangeWeekContext _localctx = new RangeWeekContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_rangeWeek);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360; Match(RangeDeltaWeek);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeDayContext : ParserRuleContext {
		public ITerminalNode RangeADay() { return GetToken(ConsoleParser.RangeADay, 0); }
		public ITerminalNode RangeDeltaDay() { return GetToken(ConsoleParser.RangeDeltaDay, 0); }
		public RangeDayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeDay; } }
	}

	[RuleVersion(0)]
	public RangeDayContext rangeDay() {
		RangeDayContext _localctx = new RangeDayContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_rangeDay);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362;
			_la = _input.La(1);
			if ( !(_la==RangeADay || _la==RangeDeltaDay) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetContext : ParserRuleContext {
		public AssetRegisterContext assetRegister() {
			return GetRuleContext<AssetRegisterContext>(0);
		}
		public AssetUnregisterContext assetUnregister() {
			return GetRuleContext<AssetUnregisterContext>(0);
		}
		public AssetResetMixedContext assetResetMixed() {
			return GetRuleContext<AssetResetMixedContext>(0);
		}
		public AssetResetHardContext assetResetHard() {
			return GetRuleContext<AssetResetHardContext>(0);
		}
		public AssetResetSoftContext assetResetSoft() {
			return GetRuleContext<AssetResetSoftContext>(0);
		}
		public AssetApplyContext assetApply() {
			return GetRuleContext<AssetApplyContext>(0);
		}
		public AssetListContext assetList() {
			return GetRuleContext<AssetListContext>(0);
		}
		public AssetQueryContext assetQuery() {
			return GetRuleContext<AssetQueryContext>(0);
		}
		public AssetCheckContext assetCheck() {
			return GetRuleContext<AssetCheckContext>(0);
		}
		public AssetRedepContext assetRedep() {
			return GetRuleContext<AssetRedepContext>(0);
		}
		public AssetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asset; } }
	}

	[RuleVersion(0)]
	public AssetContext asset() {
		AssetContext _localctx = new AssetContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_asset);
		try {
			State = 374;
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 364; assetList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 365; assetQuery();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 366; assetRegister();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 367; assetUnregister();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 368; assetRedep();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 369; assetResetSoft();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 370; assetResetMixed();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 371; assetResetHard();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 372; assetApply();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 373; assetCheck();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetListContext : ParserRuleContext {
		public ITerminalNode AOList() { return GetToken(ConsoleParser.AOList, 0); }
		public ITerminalNode AOAll() { return GetToken(ConsoleParser.AOAll, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangePointContext rangePoint() {
			return GetRuleContext<RangePointContext>(0);
		}
		public AssetListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetList; } }
	}

	[RuleVersion(0)]
	public AssetListContext assetList() {
		AssetListContext _localctx = new AssetListContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_assetList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376; Match(T__25);
			State = 378;
			switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
			case 1:
				{
				State = 377;
				_la = _input.La(1);
				if ( !(_la==AOAll || _la==AOList) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 381;
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				{
				State = 380; rangePoint();
				}
				break;
			}
			State = 384;
			switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
			case 1:
				{
				State = 383; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetQueryContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOQuery() { return GetToken(ConsoleParser.AOQuery, 0); }
		public AssetQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetQuery; } }
	}

	[RuleVersion(0)]
	public AssetQueryContext assetQuery() {
		AssetQueryContext _localctx = new AssetQueryContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_assetQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386; Match(T__25);
			State = 387; Match(AOQuery);
			State = 389;
			switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
			case 1:
				{
				State = 388; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetRegisterContext : ParserRuleContext {
		public ITerminalNode AORegister() { return GetToken(ConsoleParser.AORegister, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AssetRegisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetRegister; } }
	}

	[RuleVersion(0)]
	public AssetRegisterContext assetRegister() {
		AssetRegisterContext _localctx = new AssetRegisterContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_assetRegister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391; Match(T__25);
			State = 392; Match(AORegister);
			State = 394;
			switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
			case 1:
				{
				State = 393; distributedQ(0);
				}
				break;
			}
			State = 397;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 396; range();
				}
			}

			State = 401;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 399; Match(T__2);
				State = 400; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetUnregisterContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode AOUnregister() { return GetToken(ConsoleParser.AOUnregister, 0); }
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AssetUnregisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetUnregister; } }
	}

	[RuleVersion(0)]
	public AssetUnregisterContext assetUnregister() {
		AssetUnregisterContext _localctx = new AssetUnregisterContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_assetUnregister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403; Match(T__25);
			State = 404; Match(AOUnregister);
			State = 406;
			switch ( Interpreter.AdaptivePredict(_input,50,_ctx) ) {
			case 1:
				{
				State = 405; distributedQ(0);
				}
				break;
			}
			State = 409;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 408; range();
				}
			}

			State = 413;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 411; Match(T__2);
				State = 412; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetRedepContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AORecalc() { return GetToken(ConsoleParser.AORecalc, 0); }
		public AssetRedepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetRedep; } }
	}

	[RuleVersion(0)]
	public AssetRedepContext assetRedep() {
		AssetRedepContext _localctx = new AssetRedepContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_assetRedep);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415; Match(T__25);
			State = 416; Match(AORecalc);
			State = 418;
			switch ( Interpreter.AdaptivePredict(_input,53,_ctx) ) {
			case 1:
				{
				State = 417; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetResetSoftContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOResetSoft() { return GetToken(ConsoleParser.AOResetSoft, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AssetResetSoftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetResetSoft; } }
	}

	[RuleVersion(0)]
	public AssetResetSoftContext assetResetSoft() {
		AssetResetSoftContext _localctx = new AssetResetSoftContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_assetResetSoft);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420; Match(T__25);
			State = 421; Match(AOResetSoft);
			State = 423;
			switch ( Interpreter.AdaptivePredict(_input,54,_ctx) ) {
			case 1:
				{
				State = 422; distributedQ(0);
				}
				break;
			}
			State = 426;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 425; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetResetMixedContext : ParserRuleContext {
		public ITerminalNode AOResetMixed() { return GetToken(ConsoleParser.AOResetMixed, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AssetResetMixedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetResetMixed; } }
	}

	[RuleVersion(0)]
	public AssetResetMixedContext assetResetMixed() {
		AssetResetMixedContext _localctx = new AssetResetMixedContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_assetResetMixed);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428; Match(T__25);
			State = 429; Match(AOResetMixed);
			State = 431;
			switch ( Interpreter.AdaptivePredict(_input,56,_ctx) ) {
			case 1:
				{
				State = 430; distributedQ(0);
				}
				break;
			}
			State = 434;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 433; range();
				}
			}

			State = 438;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 436; Match(T__2);
				State = 437; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetResetHardContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOResetHard() { return GetToken(ConsoleParser.AOResetHard, 0); }
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AssetResetHardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetResetHard; } }
	}

	[RuleVersion(0)]
	public AssetResetHardContext assetResetHard() {
		AssetResetHardContext _localctx = new AssetResetHardContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_assetResetHard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440; Match(T__25);
			State = 441; Match(AOResetHard);
			State = 443;
			switch ( Interpreter.AdaptivePredict(_input,59,_ctx) ) {
			case 1:
				{
				State = 442; distributedQ(0);
				}
				break;
			}
			State = 447;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 445; Match(T__2);
				State = 446; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetApplyContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOCollapse() { return GetToken(ConsoleParser.AOCollapse, 0); }
		public ITerminalNode AOApply() { return GetToken(ConsoleParser.AOApply, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AssetApplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetApply; } }
	}

	[RuleVersion(0)]
	public AssetApplyContext assetApply() {
		AssetApplyContext _localctx = new AssetApplyContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_assetApply);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 449; Match(T__25);
			State = 450; Match(AOApply);
			State = 452;
			switch ( Interpreter.AdaptivePredict(_input,61,_ctx) ) {
			case 1:
				{
				State = 451; Match(AOCollapse);
				}
				break;
			}
			State = 455;
			switch ( Interpreter.AdaptivePredict(_input,62,_ctx) ) {
			case 1:
				{
				State = 454; distributedQ(0);
				}
				break;
			}
			State = 458;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 457; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetCheckContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOCheck() { return GetToken(ConsoleParser.AOCheck, 0); }
		public AssetCheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetCheck; } }
	}

	[RuleVersion(0)]
	public AssetCheckContext assetCheck() {
		AssetCheckContext _localctx = new AssetCheckContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_assetCheck);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460; Match(T__25);
			State = 461; Match(AOCheck);
			State = 463;
			switch ( Interpreter.AdaptivePredict(_input,64,_ctx) ) {
			case 1:
				{
				State = 462; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortContext : ParserRuleContext {
		public AmortReamoContext amortReamo() {
			return GetRuleContext<AmortReamoContext>(0);
		}
		public AmortQueryContext amortQuery() {
			return GetRuleContext<AmortQueryContext>(0);
		}
		public AmortCheckContext amortCheck() {
			return GetRuleContext<AmortCheckContext>(0);
		}
		public AmortResetMixedContext amortResetMixed() {
			return GetRuleContext<AmortResetMixedContext>(0);
		}
		public AmortResetSoftContext amortResetSoft() {
			return GetRuleContext<AmortResetSoftContext>(0);
		}
		public AmortRegisterContext amortRegister() {
			return GetRuleContext<AmortRegisterContext>(0);
		}
		public AmortUnregisterContext amortUnregister() {
			return GetRuleContext<AmortUnregisterContext>(0);
		}
		public AmortApplyContext amortApply() {
			return GetRuleContext<AmortApplyContext>(0);
		}
		public AmortListContext amortList() {
			return GetRuleContext<AmortListContext>(0);
		}
		public AmortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amort; } }
	}

	[RuleVersion(0)]
	public AmortContext amort() {
		AmortContext _localctx = new AmortContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_amort);
		try {
			State = 474;
			switch ( Interpreter.AdaptivePredict(_input,65,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 465; amortList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 466; amortQuery();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 467; amortRegister();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 468; amortUnregister();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 469; amortReamo();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 470; amortResetSoft();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 471; amortResetMixed();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 472; amortApply();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 473; amortCheck();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortListContext : ParserRuleContext {
		public ITerminalNode AOList() { return GetToken(ConsoleParser.AOList, 0); }
		public ITerminalNode AOAll() { return GetToken(ConsoleParser.AOAll, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangePointContext rangePoint() {
			return GetRuleContext<RangePointContext>(0);
		}
		public AmortListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortList; } }
	}

	[RuleVersion(0)]
	public AmortListContext amortList() {
		AmortListContext _localctx = new AmortListContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_amortList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 476; Match(T__26);
			State = 478;
			switch ( Interpreter.AdaptivePredict(_input,66,_ctx) ) {
			case 1:
				{
				State = 477;
				_la = _input.La(1);
				if ( !(_la==AOAll || _la==AOList) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 481;
			switch ( Interpreter.AdaptivePredict(_input,67,_ctx) ) {
			case 1:
				{
				State = 480; rangePoint();
				}
				break;
			}
			State = 484;
			switch ( Interpreter.AdaptivePredict(_input,68,_ctx) ) {
			case 1:
				{
				State = 483; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortQueryContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOQuery() { return GetToken(ConsoleParser.AOQuery, 0); }
		public AmortQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortQuery; } }
	}

	[RuleVersion(0)]
	public AmortQueryContext amortQuery() {
		AmortQueryContext _localctx = new AmortQueryContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_amortQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486; Match(T__26);
			State = 487; Match(AOQuery);
			State = 489;
			switch ( Interpreter.AdaptivePredict(_input,69,_ctx) ) {
			case 1:
				{
				State = 488; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortRegisterContext : ParserRuleContext {
		public ITerminalNode AORegister() { return GetToken(ConsoleParser.AORegister, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AmortRegisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortRegister; } }
	}

	[RuleVersion(0)]
	public AmortRegisterContext amortRegister() {
		AmortRegisterContext _localctx = new AmortRegisterContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_amortRegister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 491; Match(T__26);
			State = 492; Match(AORegister);
			State = 494;
			switch ( Interpreter.AdaptivePredict(_input,70,_ctx) ) {
			case 1:
				{
				State = 493; distributedQ(0);
				}
				break;
			}
			State = 497;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 496; range();
				}
			}

			State = 501;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 499; Match(T__2);
				State = 500; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortUnregisterContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode AOUnregister() { return GetToken(ConsoleParser.AOUnregister, 0); }
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AmortUnregisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortUnregister; } }
	}

	[RuleVersion(0)]
	public AmortUnregisterContext amortUnregister() {
		AmortUnregisterContext _localctx = new AmortUnregisterContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_amortUnregister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503; Match(T__26);
			State = 504; Match(AOUnregister);
			State = 506;
			switch ( Interpreter.AdaptivePredict(_input,73,_ctx) ) {
			case 1:
				{
				State = 505; distributedQ(0);
				}
				break;
			}
			State = 509;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 508; range();
				}
			}

			State = 513;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 511; Match(T__2);
				State = 512; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortReamoContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AORecalc() { return GetToken(ConsoleParser.AORecalc, 0); }
		public AmortReamoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortReamo; } }
	}

	[RuleVersion(0)]
	public AmortReamoContext amortReamo() {
		AmortReamoContext _localctx = new AmortReamoContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_amortReamo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 515; Match(T__26);
			State = 516; Match(AORecalc);
			State = 518;
			switch ( Interpreter.AdaptivePredict(_input,76,_ctx) ) {
			case 1:
				{
				State = 517; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortResetSoftContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOResetSoft() { return GetToken(ConsoleParser.AOResetSoft, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AmortResetSoftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortResetSoft; } }
	}

	[RuleVersion(0)]
	public AmortResetSoftContext amortResetSoft() {
		AmortResetSoftContext _localctx = new AmortResetSoftContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_amortResetSoft);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 520; Match(T__26);
			State = 521; Match(AOResetSoft);
			State = 523;
			switch ( Interpreter.AdaptivePredict(_input,77,_ctx) ) {
			case 1:
				{
				State = 522; distributedQ(0);
				}
				break;
			}
			State = 526;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 525; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortResetMixedContext : ParserRuleContext {
		public ITerminalNode AOResetMixed() { return GetToken(ConsoleParser.AOResetMixed, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AmortResetMixedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortResetMixed; } }
	}

	[RuleVersion(0)]
	public AmortResetMixedContext amortResetMixed() {
		AmortResetMixedContext _localctx = new AmortResetMixedContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_amortResetMixed);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 528; Match(T__26);
			State = 529; Match(AOResetMixed);
			State = 531;
			switch ( Interpreter.AdaptivePredict(_input,79,_ctx) ) {
			case 1:
				{
				State = 530; distributedQ(0);
				}
				break;
			}
			State = 534;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 533; range();
				}
			}

			State = 538;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 536; Match(T__2);
				State = 537; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortApplyContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOCollapse() { return GetToken(ConsoleParser.AOCollapse, 0); }
		public ITerminalNode AOApply() { return GetToken(ConsoleParser.AOApply, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AmortApplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortApply; } }
	}

	[RuleVersion(0)]
	public AmortApplyContext amortApply() {
		AmortApplyContext _localctx = new AmortApplyContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_amortApply);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 540; Match(T__26);
			State = 541; Match(AOApply);
			State = 543;
			switch ( Interpreter.AdaptivePredict(_input,82,_ctx) ) {
			case 1:
				{
				State = 542; Match(AOCollapse);
				}
				break;
			}
			State = 546;
			switch ( Interpreter.AdaptivePredict(_input,83,_ctx) ) {
			case 1:
				{
				State = 545; distributedQ(0);
				}
				break;
			}
			State = 549;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 548; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortCheckContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOCheck() { return GetToken(ConsoleParser.AOCheck, 0); }
		public AmortCheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortCheck; } }
	}

	[RuleVersion(0)]
	public AmortCheckContext amortCheck() {
		AmortCheckContext _localctx = new AmortCheckContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_amortCheck);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 551; Match(T__26);
			State = 552; Match(AOCheck);
			State = 554;
			switch ( Interpreter.AdaptivePredict(_input,85,_ctx) ) {
			case 1:
				{
				State = 553; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DistributedQContext : ParserRuleContext {
		public IToken Op;
		public DistributedQAtomContext distributedQAtom() {
			return GetRuleContext<DistributedQAtomContext>(0);
		}
		public DistributedQContext distributedQ(int i) {
			return GetRuleContext<DistributedQContext>(i);
		}
		public IReadOnlyList<DistributedQContext> distributedQ() {
			return GetRuleContexts<DistributedQContext>();
		}
		public DistributedQContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distributedQ; } }
	}

	[RuleVersion(0)]
	public DistributedQContext distributedQ() {
		return distributedQ(0);
	}

	private DistributedQContext distributedQ(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		DistributedQContext _localctx = new DistributedQContext(_ctx, _parentState);
		DistributedQContext _prevctx = _localctx;
		int _startState = 104;
		EnterRecursionRule(_localctx, 104, RULE_distributedQ, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 564;
			switch ( Interpreter.AdaptivePredict(_input,86,_ctx) ) {
			case 1:
				{
				State = 557;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==Union || _la==Substract) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 558; distributedQ(3);
				}
				break;

			case 2:
				{
				State = 559; distributedQAtom();
				}
				break;

			case 3:
				{
				State = 560; Match(T__18);
				State = 561; distributedQ(0);
				State = 562; Match(T__19);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 574;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,88,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 572;
					switch ( Interpreter.AdaptivePredict(_input,87,_ctx) ) {
					case 1:
						{
						_localctx = new DistributedQContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_distributedQ);
						State = 566;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 567; _localctx.Op = Match(Intersect);
						State = 568; distributedQ(6);
						}
						break;

					case 2:
						{
						_localctx = new DistributedQContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_distributedQ);
						State = 569;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 570;
						_localctx.Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==Union || _la==Substract) ) {
							_localctx.Op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 571; distributedQ(5);
						}
						break;
					}
					} 
				}
				State = 576;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,88,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DistributedQAtomContext : ParserRuleContext {
		public ITerminalNode DollarQuotedString() { return GetToken(ConsoleParser.DollarQuotedString, 0); }
		public ITerminalNode PercentQuotedString() { return GetToken(ConsoleParser.PercentQuotedString, 0); }
		public ITerminalNode Guid() { return GetToken(ConsoleParser.Guid, 0); }
		public RangeCoreContext rangeCore() {
			return GetRuleContext<RangeCoreContext>(0);
		}
		public DistributedQAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distributedQAtom; } }
	}

	[RuleVersion(0)]
	public DistributedQAtomContext distributedQAtom() {
		DistributedQAtomContext _localctx = new DistributedQAtomContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_distributedQAtom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 578;
			switch ( Interpreter.AdaptivePredict(_input,89,_ctx) ) {
			case 1:
				{
				State = 577; Match(Guid);
				}
				break;
			}
			State = 581;
			switch ( Interpreter.AdaptivePredict(_input,90,_ctx) ) {
			case 1:
				{
				State = 580; Match(DollarQuotedString);
				}
				break;
			}
			State = 584;
			switch ( Interpreter.AdaptivePredict(_input,91,_ctx) ) {
			case 1:
				{
				State = 583; Match(PercentQuotedString);
				}
				break;
			}
			State = 590;
			switch ( Interpreter.AdaptivePredict(_input,92,_ctx) ) {
			case 1:
				{
				State = 586; Match(T__27);
				State = 587; rangeCore();
				State = 588; Match(T__28);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 19: return vouchersB_sempred((VouchersBContext)_localctx, predIndex);

		case 21: return details_sempred((DetailsContext)_localctx, predIndex);

		case 52: return distributedQ_sempred((DistributedQContext)_localctx, predIndex);
		}
		return true;
	}
	private bool vouchersB_sempred(VouchersBContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 5);

		case 1: return Precpred(_ctx, 4);
		}
		return true;
	}
	private bool distributedQ_sempred(DistributedQContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(_ctx, 5);

		case 5: return Precpred(_ctx, 4);
		}
		return true;
	}
	private bool details_sempred(DetailsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 5);

		case 3: return Precpred(_ctx, 4);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3Q\x253\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3"+
		"\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2\x84\n"+
		"\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x5\x4\x8B\n\x4\x3\x5\x3\x5\x3\x5\a\x5"+
		"\x90\n\x5\f\x5\xE\x5\x93\v\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6\x9A\n"+
		"\x6\f\x6\xE\x6\x9D\v\x6\x5\x6\x9F\n\x6\x3\a\x3\a\x3\a\x5\a\xA4\n\a\x3"+
		"\a\x3\a\x5\a\xA8\n\a\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x5\t\xB0\n\t\x3\n\x3"+
		"\n\x5\n\xB4\n\n\x3\n\x5\n\xB7\n\n\x3\n\x3\n\x3\n\x3\n\a\n\xBD\n\n\f\n"+
		"\xE\n\xC0\v\n\x3\n\x3\n\x3\v\x3\v\x5\v\xC6\n\v\x3\v\x5\v\xC9\n\v\x3\v"+
		"\x3\v\x3\v\x3\f\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF"+
		"\x3\x10\x3\x10\x5\x10\xDB\n\x10\x3\x10\x5\x10\xDE\n\x10\x3\x11\x3\x11"+
		"\x5\x11\xE2\n\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\xE9\n\x11"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\xEF\n\x12\x3\x13\x3\x13\x3\x13\x5"+
		"\x13\xF4\n\x13\x3\x14\x3\x14\x5\x14\xF8\n\x14\x3\x15\x3\x15\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x105\n\x15"+
		"\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\a\x15\x10D\n\x15\f\x15\xE\x15"+
		"\x110\v\x15\x3\x16\x5\x16\x113\n\x16\x3\x16\x5\x16\x116\n\x16\x3\x16\x5"+
		"\x16\x119\n\x16\x3\x16\x5\x16\x11C\n\x16\x3\x16\x5\x16\x11F\n\x16\x3\x16"+
		"\x5\x16\x122\n\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3"+
		"\x17\x5\x17\x12C\n\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\a\x17"+
		"\x134\n\x17\f\x17\xE\x17\x137\v\x17\x3\x18\x5\x18\x13A\n\x18\x3\x18\x5"+
		"\x18\x13D\n\x18\x3\x18\x5\x18\x140\n\x18\x3\x18\x5\x18\x143\n\x18\x3\x19"+
		"\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x14B\n\x19\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x5\x1A\x152\n\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x157"+
		"\n\x1A\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x15C\n\x1B\x3\x1C\x3\x1C\x3\x1C\x3"+
		"\x1C\x5\x1C\x162\n\x1C\x3\x1D\x3\x1D\x3\x1E\x5\x1E\x167\n\x1E\x3\x1E\x3"+
		"\x1E\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x5"+
		"!\x179\n!\x3\"\x3\"\x5\"\x17D\n\"\x3\"\x5\"\x180\n\"\x3\"\x5\"\x183\n"+
		"\"\x3#\x3#\x3#\x5#\x188\n#\x3$\x3$\x3$\x5$\x18D\n$\x3$\x5$\x190\n$\x3"+
		"$\x3$\x5$\x194\n$\x3%\x3%\x3%\x5%\x199\n%\x3%\x5%\x19C\n%\x3%\x3%\x5%"+
		"\x1A0\n%\x3&\x3&\x3&\x5&\x1A5\n&\x3\'\x3\'\x3\'\x5\'\x1AA\n\'\x3\'\x5"+
		"\'\x1AD\n\'\x3(\x3(\x3(\x5(\x1B2\n(\x3(\x5(\x1B5\n(\x3(\x3(\x5(\x1B9\n"+
		"(\x3)\x3)\x3)\x5)\x1BE\n)\x3)\x3)\x5)\x1C2\n)\x3*\x3*\x3*\x5*\x1C7\n*"+
		"\x3*\x5*\x1CA\n*\x3*\x5*\x1CD\n*\x3+\x3+\x3+\x5+\x1D2\n+\x3,\x3,\x3,\x3"+
		",\x3,\x3,\x3,\x3,\x3,\x5,\x1DD\n,\x3-\x3-\x5-\x1E1\n-\x3-\x5-\x1E4\n-"+
		"\x3-\x5-\x1E7\n-\x3.\x3.\x3.\x5.\x1EC\n.\x3/\x3/\x3/\x5/\x1F1\n/\x3/\x5"+
		"/\x1F4\n/\x3/\x3/\x5/\x1F8\n/\x3\x30\x3\x30\x3\x30\x5\x30\x1FD\n\x30\x3"+
		"\x30\x5\x30\x200\n\x30\x3\x30\x3\x30\x5\x30\x204\n\x30\x3\x31\x3\x31\x3"+
		"\x31\x5\x31\x209\n\x31\x3\x32\x3\x32\x3\x32\x5\x32\x20E\n\x32\x3\x32\x5"+
		"\x32\x211\n\x32\x3\x33\x3\x33\x3\x33\x5\x33\x216\n\x33\x3\x33\x5\x33\x219"+
		"\n\x33\x3\x33\x3\x33\x5\x33\x21D\n\x33\x3\x34\x3\x34\x3\x34\x5\x34\x222"+
		"\n\x34\x3\x34\x5\x34\x225\n\x34\x3\x34\x5\x34\x228\n\x34\x3\x35\x3\x35"+
		"\x3\x35\x5\x35\x22D\n\x35\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3"+
		"\x36\x3\x36\x5\x36\x237\n\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36"+
		"\a\x36\x23F\n\x36\f\x36\xE\x36\x242\v\x36\x3\x37\x5\x37\x245\n\x37\x3"+
		"\x37\x5\x37\x248\n\x37\x3\x37\x5\x37\x24B\n\x37\x3\x37\x3\x37\x3\x37\x3"+
		"\x37\x5\x37\x251\n\x37\x3\x37\x2\x2\x5(,j\x38\x2\x2\x4\x2\x6\x2\b\x2\n"+
		"\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2"+
		" \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:"+
		"\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X"+
		"\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2\x2\xF\x3\x2#-\x3"+
		"\x2 \"\x3\x2LM\x3\x2\n\f\x3\x2OP\x4\x2\x11\x11\x14\x14\x3\x2JK\x3\x2\x17"+
		"\x18\x4\x2\x6\x6\x19\x19\x3\x2\x1A\x1B\x3\x2?@\x3\x2\x41\x42\x3\x2./\x298"+
		"\x2\x83\x3\x2\x2\x2\x4\x85\x3\x2\x2\x2\x6\x87\x3\x2\x2\x2\b\x8C\x3\x2"+
		"\x2\x2\n\x94\x3\x2\x2\x2\f\xA7\x3\x2\x2\x2\xE\xA9\x3\x2\x2\x2\x10\xAF"+
		"\x3\x2\x2\x2\x12\xB1\x3\x2\x2\x2\x14\xC3\x3\x2\x2\x2\x16\xCD\x3\x2\x2"+
		"\x2\x18\xD0\x3\x2\x2\x2\x1A\xD2\x3\x2\x2\x2\x1C\xD5\x3\x2\x2\x2\x1E\xD8"+
		"\x3\x2\x2\x2 \xE8\x3\x2\x2\x2\"\xEE\x3\x2\x2\x2$\xF3\x3\x2\x2\x2&\xF7"+
		"\x3\x2\x2\x2(\x104\x3\x2\x2\x2*\x112\x3\x2\x2\x2,\x12B\x3\x2\x2\x2.\x139"+
		"\x3\x2\x2\x2\x30\x14A\x3\x2\x2\x2\x32\x156\x3\x2\x2\x2\x34\x15B\x3\x2"+
		"\x2\x2\x36\x161\x3\x2\x2\x2\x38\x163\x3\x2\x2\x2:\x166\x3\x2\x2\x2<\x16A"+
		"\x3\x2\x2\x2>\x16C\x3\x2\x2\x2@\x178\x3\x2\x2\x2\x42\x17A\x3\x2\x2\x2"+
		"\x44\x184\x3\x2\x2\x2\x46\x189\x3\x2\x2\x2H\x195\x3\x2\x2\x2J\x1A1\x3"+
		"\x2\x2\x2L\x1A6\x3\x2\x2\x2N\x1AE\x3\x2\x2\x2P\x1BA\x3\x2\x2\x2R\x1C3"+
		"\x3\x2\x2\x2T\x1CE\x3\x2\x2\x2V\x1DC\x3\x2\x2\x2X\x1DE\x3\x2\x2\x2Z\x1E8"+
		"\x3\x2\x2\x2\\\x1ED\x3\x2\x2\x2^\x1F9\x3\x2\x2\x2`\x205\x3\x2\x2\x2\x62"+
		"\x20A\x3\x2\x2\x2\x64\x212\x3\x2\x2\x2\x66\x21E\x3\x2\x2\x2h\x229\x3\x2"+
		"\x2\x2j\x236\x3\x2\x2\x2l\x244\x3\x2\x2\x2no\x5&\x14\x2op\a\x2\x2\x3p"+
		"\x84\x3\x2\x2\x2qr\x5\x1C\xF\x2rs\a\x2\x2\x3s\x84\x3\x2\x2\x2tu\x5\x6"+
		"\x4\x2uv\a\x2\x2\x3v\x84\x3\x2\x2\x2wx\x5\f\a\x2xy\a\x2\x2\x3y\x84\x3"+
		"\x2\x2\x2z{\x5@!\x2{|\a\x2\x2\x3|\x84\x3\x2\x2\x2}~\x5V,\x2~\x7F\a\x2"+
		"\x2\x3\x7F\x84\x3\x2\x2\x2\x80\x81\x5\x4\x3\x2\x81\x82\a\x2\x2\x3\x82"+
		"\x84\x3\x2\x2\x2\x83n\x3\x2\x2\x2\x83q\x3\x2\x2\x2\x83t\x3\x2\x2\x2\x83"+
		"w\x3\x2\x2\x2\x83z\x3\x2\x2\x2\x83}\x3\x2\x2\x2\x83\x80\x3\x2\x2\x2\x84"+
		"\x3\x3\x2\x2\x2\x85\x86\t\x2\x2\x2\x86\x5\x3\x2\x2\x2\x87\x88\a\x3\x2"+
		"\x2\x88\x8A\x5\x10\t\x2\x89\x8B\x5\x30\x19\x2\x8A\x89\x3\x2\x2\x2\x8A"+
		"\x8B\x3\x2\x2\x2\x8B\a\x3\x2\x2\x2\x8C\x91\x5\n\x6\x2\x8D\x8E\a\x4\x2"+
		"\x2\x8E\x90\x5\n\x6\x2\x8F\x8D\x3\x2\x2\x2\x90\x93\x3\x2\x2\x2\x91\x8F"+
		"\x3\x2\x2\x2\x91\x92\x3\x2\x2\x2\x92\t\x3\x2\x2\x2\x93\x91\x3\x2\x2\x2"+
		"\x94\x9E\t\x3\x2\x2\x95\x9B\a\x5\x2\x2\x96\x97\aI\x2\x2\x97\x98\a\x6\x2"+
		"\x2\x98\x9A\aI\x2\x2\x99\x96\x3\x2\x2\x2\x9A\x9D\x3\x2\x2\x2\x9B\x99\x3"+
		"\x2\x2\x2\x9B\x9C\x3\x2\x2\x2\x9C\x9F\x3\x2\x2\x2\x9D\x9B\x3\x2\x2\x2"+
		"\x9E\x95\x3\x2\x2\x2\x9E\x9F\x3\x2\x2\x2\x9F\v\x3\x2\x2\x2\xA0\xA1\a\a"+
		"\x2\x2\xA1\xA3\x5\x10\t\x2\xA2\xA4\x5\x30\x19\x2\xA3\xA2\x3\x2\x2\x2\xA3"+
		"\xA4\x3\x2\x2\x2\xA4\xA8\x3\x2\x2\x2\xA5\xA6\a\a\x2\x2\xA6\xA8\x5\x1C"+
		"\xF\x2\xA7\xA0\x3\x2\x2\x2\xA7\xA5\x3\x2\x2\x2\xA8\r\x3\x2\x2\x2\xA9\xAA"+
		"\x5\x18\r\x2\xAA\xAB\a\x5\x2\x2\xAB\xF\x3\x2\x2\x2\xAC\xB0\x5\x12\n\x2"+
		"\xAD\xB0\x5\x14\v\x2\xAE\xB0\x5\x16\f\x2\xAF\xAC\x3\x2\x2\x2\xAF\xAD\x3"+
		"\x2\x2\x2\xAF\xAE\x3\x2\x2\x2\xB0\x11\x3\x2\x2\x2\xB1\xB3\x5\x18\r\x2"+
		"\xB2\xB4\x5\x1A\xE\x2\xB3\xB2\x3\x2\x2\x2\xB3\xB4\x3\x2\x2\x2\xB4\xB6"+
		"\x3\x2\x2\x2\xB5\xB7\aH\x2\x2\xB6\xB5\x3\x2\x2\x2\xB6\xB7\x3\x2\x2\x2"+
		"\xB7\xB8\x3\x2\x2\x2\xB8\xB9\a\b\x2\x2\xB9\xBE\x5\x10\t\x2\xBA\xBB\a\t"+
		"\x2\x2\xBB\xBD\x5\x10\t\x2\xBC\xBA\x3\x2\x2\x2\xBD\xC0\x3\x2\x2\x2\xBE"+
		"\xBC\x3\x2\x2\x2\xBE\xBF\x3\x2\x2\x2\xBF\xC1\x3\x2\x2\x2\xC0\xBE\x3\x2"+
		"\x2\x2\xC1\xC2\a\x4\x2\x2\xC2\x13\x3\x2\x2\x2\xC3\xC5\x5\x18\r\x2\xC4"+
		"\xC6\x5\x1A\xE\x2\xC5\xC4\x3\x2\x2\x2\xC5\xC6\x3\x2\x2\x2\xC6\xC8\x3\x2"+
		"\x2\x2\xC7\xC9\aH\x2\x2\xC8\xC7\x3\x2\x2\x2\xC8\xC9\x3\x2\x2\x2\xC9\xCA"+
		"\x3\x2\x2\x2\xCA\xCB\a\x5\x2\x2\xCB\xCC\x5\x1C\xF\x2\xCC\x15\x3\x2\x2"+
		"\x2\xCD\xCE\x5\x18\r\x2\xCE\xCF\a\x4\x2\x2\xCF\x17\x3\x2\x2\x2\xD0\xD1"+
		"\aG\x2\x2\xD1\x19\x3\x2\x2\x2\xD2\xD3\aN\x2\x2\xD3\xD4\t\x4\x2\x2\xD4"+
		"\x1B\x3\x2\x2\x2\xD5\xD6\x5\"\x12\x2\xD6\xD7\x5\x1E\x10\x2\xD7\x1D\x3"+
		"\x2\x2\x2\xD8\xDA\t\x5\x2\x2\xD9\xDB\a:\x2\x2\xDA\xD9\x3\x2\x2\x2\xDA"+
		"\xDB\x3\x2\x2\x2\xDB\xDD\x3\x2\x2\x2\xDC\xDE\x5 \x11\x2\xDD\xDC\x3\x2"+
		"\x2\x2\xDD\xDE\x3\x2\x2\x2\xDE\x1F\x3\x2\x2\x2\xDF\xE1\a\r\x2\x2\xE0\xE2"+
		"\a\xE\x2\x2\xE1\xE0\x3\x2\x2\x2\xE1\xE2\x3\x2\x2\x2\xE2\xE9\x3\x2\x2\x2"+
		"\xE3\xE4\a\r\x2\x2\xE4\xE5\a\xF\x2\x2\xE5\xE6\x5\x32\x1A\x2\xE6\xE7\a"+
		"\x10\x2\x2\xE7\xE9\x3\x2\x2\x2\xE8\xDF\x3\x2\x2\x2\xE8\xE3\x3\x2\x2\x2"+
		"\xE9!\x3\x2\x2\x2\xEA\xEB\x5&\x14\x2\xEB\xEC\x5$\x13\x2\xEC\xEF\x3\x2"+
		"\x2\x2\xED\xEF\x5*\x16\x2\xEE\xEA\x3\x2\x2\x2\xEE\xED\x3\x2\x2\x2\xEF"+
		"#\x3\x2\x2\x2\xF0\xF4\a\x11\x2\x2\xF1\xF2\a\x5\x2\x2\xF2\xF4\x5,\x17\x2"+
		"\xF3\xF0\x3\x2\x2\x2\xF3\xF1\x3\x2\x2\x2\xF4%\x3\x2\x2\x2\xF5\xF8\x5("+
		"\x15\x2\xF6\xF8\x5*\x16\x2\xF7\xF5\x3\x2\x2\x2\xF7\xF6\x3\x2\x2\x2\xF8"+
		"\'\x3\x2\x2\x2\xF9\xFA\b\x15\x1\x2\xFA\xFB\t\x6\x2\x2\xFB\x105\x5(\x15"+
		"\x5\xFC\xFD\a\x12\x2\x2\xFD\xFE\x5*\x16\x2\xFE\xFF\a\x13\x2\x2\xFF\x105"+
		"\x3\x2\x2\x2\x100\x101\a\x12\x2\x2\x101\x102\x5(\x15\x2\x102\x103\a\x13"+
		"\x2\x2\x103\x105\x3\x2\x2\x2\x104\xF9\x3\x2\x2\x2\x104\xFC\x3\x2\x2\x2"+
		"\x104\x100\x3\x2\x2\x2\x105\x10E\x3\x2\x2\x2\x106\x107\f\a\x2\x2\x107"+
		"\x108\aN\x2\x2\x108\x10D\x5(\x15\b\x109\x10A\f\x6\x2\x2\x10A\x10B\t\x6"+
		"\x2\x2\x10B\x10D\x5(\x15\a\x10C\x106\x3\x2\x2\x2\x10C\x109\x3\x2\x2\x2"+
		"\x10D\x110\x3\x2\x2\x2\x10E\x10C\x3\x2\x2\x2\x10E\x10F\x3\x2\x2\x2\x10F"+
		")\x3\x2\x2\x2\x110\x10E\x3\x2\x2\x2\x111\x113\x5,\x17\x2\x112\x111\x3"+
		"\x2\x2\x2\x112\x113\x3\x2\x2\x2\x113\x115\x3\x2\x2\x2\x114\x116\t\a\x2"+
		"\x2\x115\x114\x3\x2\x2\x2\x115\x116\x3\x2\x2\x2\x116\x118\x3\x2\x2\x2"+
		"\x117\x119\x5\x30\x19\x2\x118\x117\x3\x2\x2\x2\x118\x119\x3\x2\x2\x2\x119"+
		"\x11B\x3\x2\x2\x2\x11A\x11C\a\x45\x2\x2\x11B\x11A\x3\x2\x2\x2\x11B\x11C"+
		"\x3\x2\x2\x2\x11C\x11E\x3\x2\x2\x2\x11D\x11F\a\x46\x2\x2\x11E\x11D\x3"+
		"\x2\x2\x2\x11E\x11F\x3\x2\x2\x2\x11F\x121\x3\x2\x2\x2\x120\x122\a\x44"+
		"\x2\x2\x121\x120\x3\x2\x2\x2\x121\x122\x3\x2\x2\x2\x122+\x3\x2\x2\x2\x123"+
		"\x124\b\x17\x1\x2\x124\x125\t\x6\x2\x2\x125\x12C\x5,\x17\x5\x126\x12C"+
		"\x5.\x18\x2\x127\x128\a\x15\x2\x2\x128\x129\x5,\x17\x2\x129\x12A\a\x16"+
		"\x2\x2\x12A\x12C\x3\x2\x2\x2\x12B\x123\x3\x2\x2\x2\x12B\x126\x3\x2\x2"+
		"\x2\x12B\x127\x3\x2\x2\x2\x12C\x135\x3\x2\x2\x2\x12D\x12E\f\a\x2\x2\x12E"+
		"\x12F\aN\x2\x2\x12F\x134\x5,\x17\b\x130\x131\f\x6\x2\x2\x131\x132\t\x6"+
		"\x2\x2\x132\x134\x5,\x17\a\x133\x12D\x3\x2\x2\x2\x133\x130\x3\x2\x2\x2"+
		"\x134\x137\x3\x2\x2\x2\x135\x133\x3\x2\x2\x2\x135\x136\x3\x2\x2\x2\x136"+
		"-\x3\x2\x2\x2\x137\x135\x3\x2\x2\x2\x138\x13A\t\b\x2\x2\x139\x138\x3\x2"+
		"\x2\x2\x139\x13A\x3\x2\x2\x2\x13A\x13C\x3\x2\x2\x2\x13B\x13D\aI\x2\x2"+
		"\x13C\x13B\x3\x2\x2\x2\x13C\x13D\x3\x2\x2\x2\x13D\x13F\x3\x2\x2\x2\x13E"+
		"\x140\aH\x2\x2\x13F\x13E\x3\x2\x2\x2\x13F\x140\x3\x2\x2\x2\x140\x142\x3"+
		"\x2\x2\x2\x141\x143\t\t\x2\x2\x142\x141\x3\x2\x2\x2\x142\x143\x3\x2\x2"+
		"\x2\x143/\x3\x2\x2\x2\x144\x14B\a\xE\x2\x2\x145\x14B\x5\x32\x1A\x2\x146"+
		"\x147\a\xF\x2\x2\x147\x148\x5\x32\x1A\x2\x148\x149\a\x10\x2\x2\x149\x14B"+
		"\x3\x2\x2\x2\x14A\x144\x3\x2\x2\x2\x14A\x145\x3\x2\x2\x2\x14A\x146\x3"+
		"\x2\x2\x2\x14B\x31\x3\x2\x2\x2\x14C\x157\a<\x2\x2\x14D\x157\a=\x2\x2\x14E"+
		"\x14F\x5\x36\x1C\x2\x14F\x151\t\n\x2\x2\x150\x152\x5\x36\x1C\x2\x151\x150"+
		"\x3\x2\x2\x2\x151\x152\x3\x2\x2\x2\x152\x157\x3\x2\x2\x2\x153\x154\t\n"+
		"\x2\x2\x154\x157\x5\x36\x1C\x2\x155\x157\x5\x36\x1C\x2\x156\x14C\x3\x2"+
		"\x2\x2\x156\x14D\x3\x2\x2\x2\x156\x14E\x3\x2\x2\x2\x156\x153\x3\x2\x2"+
		"\x2\x156\x155\x3\x2\x2\x2\x157\x33\x3\x2\x2\x2\x158\x15C\a<\x2\x2\x159"+
		"\x15C\a\xE\x2\x2\x15A\x15C\x5\x36\x1C\x2\x15B\x158\x3\x2\x2\x2\x15B\x159"+
		"\x3\x2\x2\x2\x15B\x15A\x3\x2\x2\x2\x15C\x35\x3\x2\x2\x2\x15D\x162\x5\x38"+
		"\x1D\x2\x15E\x162\x5:\x1E\x2\x15F\x162\x5<\x1F\x2\x160\x162\x5> \x2\x161"+
		"\x15D\x3\x2\x2\x2\x161\x15E\x3\x2\x2\x2\x161\x15F\x3\x2\x2\x2\x161\x160"+
		"\x3\x2\x2\x2\x162\x37\x3\x2\x2\x2\x163\x164\a>\x2\x2\x164\x39\x3\x2\x2"+
		"\x2\x165\x167\t\v\x2\x2\x166\x165\x3\x2\x2\x2\x166\x167\x3\x2\x2\x2\x167"+
		"\x168\x3\x2\x2\x2\x168\x169\t\f\x2\x2\x169;\x3\x2\x2\x2\x16A\x16B\a\x43"+
		"\x2\x2\x16B=\x3\x2\x2\x2\x16C\x16D\t\r\x2\x2\x16D?\x3\x2\x2\x2\x16E\x179"+
		"\x5\x42\"\x2\x16F\x179\x5\x44#\x2\x170\x179\x5\x46$\x2\x171\x179\x5H%"+
		"\x2\x172\x179\x5J&\x2\x173\x179\x5L\'\x2\x174\x179\x5N(\x2\x175\x179\x5"+
		"P)\x2\x176\x179\x5R*\x2\x177\x179\x5T+\x2\x178\x16E\x3\x2\x2\x2\x178\x16F"+
		"\x3\x2\x2\x2\x178\x170\x3\x2\x2\x2\x178\x171\x3\x2\x2\x2\x178\x172\x3"+
		"\x2\x2\x2\x178\x173\x3\x2\x2\x2\x178\x174\x3\x2\x2\x2\x178\x175\x3\x2"+
		"\x2\x2\x178\x176\x3\x2\x2\x2\x178\x177\x3\x2\x2\x2\x179\x41\x3\x2\x2\x2"+
		"\x17A\x17C\a\x1C\x2\x2\x17B\x17D\t\xE\x2\x2\x17C\x17B\x3\x2\x2\x2\x17C"+
		"\x17D\x3\x2\x2\x2\x17D\x17F\x3\x2\x2\x2\x17E\x180\x5\x34\x1B\x2\x17F\x17E"+
		"\x3\x2\x2\x2\x17F\x180\x3\x2\x2\x2\x180\x182\x3\x2\x2\x2\x181\x183\x5"+
		"j\x36\x2\x182\x181\x3\x2\x2\x2\x182\x183\x3\x2\x2\x2\x183\x43\x3\x2\x2"+
		"\x2\x184\x185\a\x1C\x2\x2\x185\x187\a\x30\x2\x2\x186\x188\x5j\x36\x2\x187"+
		"\x186\x3\x2\x2\x2\x187\x188\x3\x2\x2\x2\x188\x45\x3\x2\x2\x2\x189\x18A"+
		"\a\x1C\x2\x2\x18A\x18C\a\x31\x2\x2\x18B\x18D\x5j\x36\x2\x18C\x18B\x3\x2"+
		"\x2\x2\x18C\x18D\x3\x2\x2\x2\x18D\x18F\x3\x2\x2\x2\x18E\x190\x5\x30\x19"+
		"\x2\x18F\x18E\x3\x2\x2\x2\x18F\x190\x3\x2\x2\x2\x190\x193\x3\x2\x2\x2"+
		"\x191\x192\a\x5\x2\x2\x192\x194\x5&\x14\x2\x193\x191\x3\x2\x2\x2\x193"+
		"\x194\x3\x2\x2\x2\x194G\x3\x2\x2\x2\x195\x196\a\x1C\x2\x2\x196\x198\a"+
		"\x32\x2\x2\x197\x199\x5j\x36\x2\x198\x197\x3\x2\x2\x2\x198\x199\x3\x2"+
		"\x2\x2\x199\x19B\x3\x2\x2\x2\x19A\x19C\x5\x30\x19\x2\x19B\x19A\x3\x2\x2"+
		"\x2\x19B\x19C\x3\x2\x2\x2\x19C\x19F\x3\x2\x2\x2\x19D\x19E\a\x5\x2\x2\x19E"+
		"\x1A0\x5&\x14\x2\x19F\x19D\x3\x2\x2\x2\x19F\x1A0\x3\x2\x2\x2\x1A0I\x3"+
		"\x2\x2\x2\x1A1\x1A2\a\x1C\x2\x2\x1A2\x1A4\a\x33\x2\x2\x1A3\x1A5\x5j\x36"+
		"\x2\x1A4\x1A3\x3\x2\x2\x2\x1A4\x1A5\x3\x2\x2\x2\x1A5K\x3\x2\x2\x2\x1A6"+
		"\x1A7\a\x1C\x2\x2\x1A7\x1A9\a\x34\x2\x2\x1A8\x1AA\x5j\x36\x2\x1A9\x1A8"+
		"\x3\x2\x2\x2\x1A9\x1AA\x3\x2\x2\x2\x1AA\x1AC\x3\x2\x2\x2\x1AB\x1AD\x5"+
		"\x30\x19\x2\x1AC\x1AB\x3\x2\x2\x2\x1AC\x1AD\x3\x2\x2\x2\x1ADM\x3\x2\x2"+
		"\x2\x1AE\x1AF\a\x1C\x2\x2\x1AF\x1B1\a\x36\x2\x2\x1B0\x1B2\x5j\x36\x2\x1B1"+
		"\x1B0\x3\x2\x2\x2\x1B1\x1B2\x3\x2\x2\x2\x1B2\x1B4\x3\x2\x2\x2\x1B3\x1B5"+
		"\x5\x30\x19\x2\x1B4\x1B3\x3\x2\x2\x2\x1B4\x1B5\x3\x2\x2\x2\x1B5\x1B8\x3"+
		"\x2\x2\x2\x1B6\x1B7\a\x5\x2\x2\x1B7\x1B9\x5&\x14\x2\x1B8\x1B6\x3\x2\x2"+
		"\x2\x1B8\x1B9\x3\x2\x2\x2\x1B9O\x3\x2\x2\x2\x1BA\x1BB\a\x1C\x2\x2\x1BB"+
		"\x1BD\a\x35\x2\x2\x1BC\x1BE\x5j\x36\x2\x1BD\x1BC\x3\x2\x2\x2\x1BD\x1BE"+
		"\x3\x2\x2\x2\x1BE\x1C1\x3\x2\x2\x2\x1BF\x1C0\a\x5\x2\x2\x1C0\x1C2\x5&"+
		"\x14\x2\x1C1\x1BF\x3\x2\x2\x2\x1C1\x1C2\x3\x2\x2\x2\x1C2Q\x3\x2\x2\x2"+
		"\x1C3\x1C4\a\x1C\x2\x2\x1C4\x1C6\a\x37\x2\x2\x1C5\x1C7\a\x38\x2\x2\x1C6"+
		"\x1C5\x3\x2\x2\x2\x1C6\x1C7\x3\x2\x2\x2\x1C7\x1C9\x3\x2\x2\x2\x1C8\x1CA"+
		"\x5j\x36\x2\x1C9\x1C8\x3\x2\x2\x2\x1C9\x1CA\x3\x2\x2\x2\x1CA\x1CC\x3\x2"+
		"\x2\x2\x1CB\x1CD\x5\x30\x19\x2\x1CC\x1CB\x3\x2\x2\x2\x1CC\x1CD\x3\x2\x2"+
		"\x2\x1CDS\x3\x2\x2\x2\x1CE\x1CF\a\x1C\x2\x2\x1CF\x1D1\a\x39\x2\x2\x1D0"+
		"\x1D2\x5j\x36\x2\x1D1\x1D0\x3\x2\x2\x2\x1D1\x1D2\x3\x2\x2\x2\x1D2U\x3"+
		"\x2\x2\x2\x1D3\x1DD\x5X-\x2\x1D4\x1DD\x5Z.\x2\x1D5\x1DD\x5\\/\x2\x1D6"+
		"\x1DD\x5^\x30\x2\x1D7\x1DD\x5`\x31\x2\x1D8\x1DD\x5\x62\x32\x2\x1D9\x1DD"+
		"\x5\x64\x33\x2\x1DA\x1DD\x5\x66\x34\x2\x1DB\x1DD\x5h\x35\x2\x1DC\x1D3"+
		"\x3\x2\x2\x2\x1DC\x1D4\x3\x2\x2\x2\x1DC\x1D5\x3\x2\x2\x2\x1DC\x1D6\x3"+
		"\x2\x2\x2\x1DC\x1D7\x3\x2\x2\x2\x1DC\x1D8\x3\x2\x2\x2\x1DC\x1D9\x3\x2"+
		"\x2\x2\x1DC\x1DA\x3\x2\x2\x2\x1DC\x1DB\x3\x2\x2\x2\x1DDW\x3\x2\x2\x2\x1DE"+
		"\x1E0\a\x1D\x2\x2\x1DF\x1E1\t\xE\x2\x2\x1E0\x1DF\x3\x2\x2\x2\x1E0\x1E1"+
		"\x3\x2\x2\x2\x1E1\x1E3\x3\x2\x2\x2\x1E2\x1E4\x5\x34\x1B\x2\x1E3\x1E2\x3"+
		"\x2\x2\x2\x1E3\x1E4\x3\x2\x2\x2\x1E4\x1E6\x3\x2\x2\x2\x1E5\x1E7\x5j\x36"+
		"\x2\x1E6\x1E5\x3\x2\x2\x2\x1E6\x1E7\x3\x2\x2\x2\x1E7Y\x3\x2\x2\x2\x1E8"+
		"\x1E9\a\x1D\x2\x2\x1E9\x1EB\a\x30\x2\x2\x1EA\x1EC\x5j\x36\x2\x1EB\x1EA"+
		"\x3\x2\x2\x2\x1EB\x1EC\x3\x2\x2\x2\x1EC[\x3\x2\x2\x2\x1ED\x1EE\a\x1D\x2"+
		"\x2\x1EE\x1F0\a\x31\x2\x2\x1EF\x1F1\x5j\x36\x2\x1F0\x1EF\x3\x2\x2\x2\x1F0"+
		"\x1F1\x3\x2\x2\x2\x1F1\x1F3\x3\x2\x2\x2\x1F2\x1F4\x5\x30\x19\x2\x1F3\x1F2"+
		"\x3\x2\x2\x2\x1F3\x1F4\x3\x2\x2\x2\x1F4\x1F7\x3\x2\x2\x2\x1F5\x1F6\a\x5"+
		"\x2\x2\x1F6\x1F8\x5&\x14\x2\x1F7\x1F5\x3\x2\x2\x2\x1F7\x1F8\x3\x2\x2\x2"+
		"\x1F8]\x3\x2\x2\x2\x1F9\x1FA\a\x1D\x2\x2\x1FA\x1FC\a\x32\x2\x2\x1FB\x1FD"+
		"\x5j\x36\x2\x1FC\x1FB\x3\x2\x2\x2\x1FC\x1FD\x3\x2\x2\x2\x1FD\x1FF\x3\x2"+
		"\x2\x2\x1FE\x200\x5\x30\x19\x2\x1FF\x1FE\x3\x2\x2\x2\x1FF\x200\x3\x2\x2"+
		"\x2\x200\x203\x3\x2\x2\x2\x201\x202\a\x5\x2\x2\x202\x204\x5&\x14\x2\x203"+
		"\x201\x3\x2\x2\x2\x203\x204\x3\x2\x2\x2\x204_\x3\x2\x2\x2\x205\x206\a"+
		"\x1D\x2\x2\x206\x208\a\x33\x2\x2\x207\x209\x5j\x36\x2\x208\x207\x3\x2"+
		"\x2\x2\x208\x209\x3\x2\x2\x2\x209\x61\x3\x2\x2\x2\x20A\x20B\a\x1D\x2\x2"+
		"\x20B\x20D\a\x34\x2\x2\x20C\x20E\x5j\x36\x2\x20D\x20C\x3\x2\x2\x2\x20D"+
		"\x20E\x3\x2\x2\x2\x20E\x210\x3\x2\x2\x2\x20F\x211\x5\x30\x19\x2\x210\x20F"+
		"\x3\x2\x2\x2\x210\x211\x3\x2\x2\x2\x211\x63\x3\x2\x2\x2\x212\x213\a\x1D"+
		"\x2\x2\x213\x215\a\x36\x2\x2\x214\x216\x5j\x36\x2\x215\x214\x3\x2\x2\x2"+
		"\x215\x216\x3\x2\x2\x2\x216\x218\x3\x2\x2\x2\x217\x219\x5\x30\x19\x2\x218"+
		"\x217\x3\x2\x2\x2\x218\x219\x3\x2\x2\x2\x219\x21C\x3\x2\x2\x2\x21A\x21B"+
		"\a\x5\x2\x2\x21B\x21D\x5&\x14\x2\x21C\x21A\x3\x2\x2\x2\x21C\x21D\x3\x2"+
		"\x2\x2\x21D\x65\x3\x2\x2\x2\x21E\x21F\a\x1D\x2\x2\x21F\x221\a\x37\x2\x2"+
		"\x220\x222\a\x38\x2\x2\x221\x220\x3\x2\x2\x2\x221\x222\x3\x2\x2\x2\x222"+
		"\x224\x3\x2\x2\x2\x223\x225\x5j\x36\x2\x224\x223\x3\x2\x2\x2\x224\x225"+
		"\x3\x2\x2\x2\x225\x227\x3\x2\x2\x2\x226\x228\x5\x30\x19\x2\x227\x226\x3"+
		"\x2\x2\x2\x227\x228\x3\x2\x2\x2\x228g\x3\x2\x2\x2\x229\x22A\a\x1D\x2\x2"+
		"\x22A\x22C\a\x39\x2\x2\x22B\x22D\x5j\x36\x2\x22C\x22B\x3\x2\x2\x2\x22C"+
		"\x22D\x3\x2\x2\x2\x22Di\x3\x2\x2\x2\x22E\x22F\b\x36\x1\x2\x22F\x230\t"+
		"\x6\x2\x2\x230\x237\x5j\x36\x5\x231\x237\x5l\x37\x2\x232\x233\a\x15\x2"+
		"\x2\x233\x234\x5j\x36\x2\x234\x235\a\x16\x2\x2\x235\x237\x3\x2\x2\x2\x236"+
		"\x22E\x3\x2\x2\x2\x236\x231\x3\x2\x2\x2\x236\x232\x3\x2\x2\x2\x237\x240"+
		"\x3\x2\x2\x2\x238\x239\f\a\x2\x2\x239\x23A\aN\x2\x2\x23A\x23F\x5j\x36"+
		"\b\x23B\x23C\f\x6\x2\x2\x23C\x23D\t\x6\x2\x2\x23D\x23F\x5j\x36\a\x23E"+
		"\x238\x3\x2\x2\x2\x23E\x23B\x3\x2\x2\x2\x23F\x242\x3\x2\x2\x2\x240\x23E"+
		"\x3\x2\x2\x2\x240\x241\x3\x2\x2\x2\x241k\x3\x2\x2\x2\x242\x240\x3\x2\x2"+
		"\x2\x243\x245\a;\x2\x2\x244\x243\x3\x2\x2\x2\x244\x245\x3\x2\x2\x2\x245"+
		"\x247\x3\x2\x2\x2\x246\x248\aG\x2\x2\x247\x246\x3\x2\x2\x2\x247\x248\x3"+
		"\x2\x2\x2\x248\x24A\x3\x2\x2\x2\x249\x24B\a\x46\x2\x2\x24A\x249\x3\x2"+
		"\x2\x2\x24A\x24B\x3\x2\x2\x2\x24B\x250\x3\x2\x2\x2\x24C\x24D\a\x1E\x2"+
		"\x2\x24D\x24E\x5\x32\x1A\x2\x24E\x24F\a\x1F\x2\x2\x24F\x251\x3\x2\x2\x2"+
		"\x250\x24C\x3\x2\x2\x2\x250\x251\x3\x2\x2\x2\x251m\x3\x2\x2\x2_\x83\x8A"+
		"\x91\x9B\x9E\xA3\xA7\xAF\xB3\xB6\xBE\xC5\xC8\xDA\xDD\xE1\xE8\xEE\xF3\xF7"+
		"\x104\x10C\x10E\x112\x115\x118\x11B\x11E\x121\x12B\x133\x135\x139\x13C"+
		"\x13F\x142\x14A\x151\x156\x15B\x161\x166\x178\x17C\x17F\x182\x187\x18C"+
		"\x18F\x193\x198\x19B\x19F\x1A4\x1A9\x1AC\x1B1\x1B4\x1B8\x1BD\x1C1\x1C6"+
		"\x1C9\x1CC\x1D1\x1DC\x1E0\x1E3\x1E6\x1EB\x1F0\x1F3\x1F7\x1FC\x1FF\x203"+
		"\x208\x20D\x210\x215\x218\x21C\x221\x224\x227\x22C\x236\x23E\x240\x244"+
		"\x247\x24A\x250";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace AccountingServer.Console
