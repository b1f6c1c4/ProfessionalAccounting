//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.4.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\b1f6c1c4\Documents\GitHub\ProfessionalAccounting\Server\AccountingServer.QueryGeneration\Console.g4 by ANTLR 4.4.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace AccountingServer.Console {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.4.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class ConsoleParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		Launch=39, Connect=40, Shutdown=41, Backup=42, Mobile=43, Fetch=44, Help=45, 
		Titles=46, Exit=47, Check=48, AOAll=49, AOList=50, AOQuery=51, AORegister=52, 
		AOUnregister=53, ARedep=54, OReamo=55, AOResetSoft=56, AOResetHard=57, 
		AOApply=58, AOCollapse=59, AOCheck=60, Guid=61, RangeNull=62, RangeAllNotNull=63, 
		RangeAYear=64, RangeAMonth=65, RangeDeltaMonth=66, RangeADay=67, RangeDeltaDay=68, 
		RangeDeltaWeek=69, VoucherType=70, PercentQuotedString=71, DollarQuotedString=72, 
		DoubleQuotedString=73, SingleQuotedString=74, DetailTitle=75, DetailTitleSubTitle=76, 
		Float=77, Percent=78, Intersect=79, Union=80, Substract=81, WS=82;
	public const int
		RULE_command = 0, RULE_otherCommand = 1, RULE_groupedQuery = 2, RULE_chart = 3, 
		RULE_chartArea = 4, RULE_report = 5, RULE_hyperItem = 6, RULE_hyperItemAtom = 7, 
		RULE_name = 8, RULE_coef = 9, RULE_subtotal = 10, RULE_voucherDetailQuery = 11, 
		RULE_emit = 12, RULE_vouchers = 13, RULE_vouchersB = 14, RULE_voucherQuery = 15, 
		RULE_details = 16, RULE_detailQuery = 17, RULE_range = 18, RULE_rangeCore = 19, 
		RULE_rangePoint = 20, RULE_rangeCertainPoint = 21, RULE_rangeYear = 22, 
		RULE_rangeMonth = 23, RULE_rangeWeek = 24, RULE_rangeDay = 25, RULE_asset = 26, 
		RULE_assetList = 27, RULE_assetQuery = 28, RULE_assetRegister = 29, RULE_assetUnregister = 30, 
		RULE_assetRedep = 31, RULE_assetResetSoft = 32, RULE_assetResetHard = 33, 
		RULE_assetApply = 34, RULE_assetCheck = 35, RULE_amort = 36, RULE_amortList = 37, 
		RULE_amortQuery = 38, RULE_amortRegister = 39, RULE_amortUnregister = 40, 
		RULE_amortReamo = 41, RULE_amortResetSoft = 42, RULE_amortResetHard = 43, 
		RULE_amortApply = 44, RULE_amortCheck = 45, RULE_aoQ = 46, RULE_aoQAtom = 47;
	public static readonly string[] ruleNames = {
		"command", "otherCommand", "groupedQuery", "chart", "chartArea", "report", 
		"hyperItem", "hyperItemAtom", "name", "coef", "subtotal", "voucherDetailQuery", 
		"emit", "vouchers", "vouchersB", "voucherQuery", "details", "detailQuery", 
		"range", "rangeCore", "rangePoint", "rangeCertainPoint", "rangeYear", 
		"rangeMonth", "rangeWeek", "rangeDay", "asset", "assetList", "assetQuery", 
		"assetRegister", "assetUnregister", "assetRedep", "assetResetSoft", "assetResetHard", 
		"assetApply", "assetCheck", "amort", "amortList", "amortQuery", "amortRegister", 
		"amortUnregister", "amortReamo", "amortResetSoft", "amortResetHard", "amortApply", 
		"amortCheck", "aoQ", "aoQAtom"
	};

	private static readonly string[] _LiteralNames = {
		null, "'c::'", "'c||'", "'||'", "'c:'", "':'", "'|'", "'_'", "'^'", "'r::'", 
		"'r||'", "'r:'", "'`'", "'``'", "'t'", "'s'", "'c'", "'r'", "'d'", "'w'", 
		"'m'", "'f'", "'b'", "'y'", "'D'", "'['", "']'", "'A'", "'{'", "'}'", 
		"'E'", "'('", "')'", "'[]'", "'~'", "'@'", "'#'", "'a'", "'o'", null, 
		null, null, "'backup'", null, "'fetch'", null, null, "'exit'", null, "'-all'", 
		null, null, null, null, null, null, "'-reset-soft'", "'-reset-hard'", 
		null, null, "'-chk'", null, "'null'", "'~null'", null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "'*'", 
		"'+'", "'-'", "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "Launch", "Connect", "Shutdown", "Backup", "Mobile", 
		"Fetch", "Help", "Titles", "Exit", "Check", "AOAll", "AOList", "AOQuery", 
		"AORegister", "AOUnregister", "ARedep", "OReamo", "AOResetSoft", "AOResetHard", 
		"AOApply", "AOCollapse", "AOCheck", "Guid", "RangeNull", "RangeAllNotNull", 
		"RangeAYear", "RangeAMonth", "RangeDeltaMonth", "RangeADay", "RangeDeltaDay", 
		"RangeDeltaWeek", "VoucherType", "PercentQuotedString", "DollarQuotedString", 
		"DoubleQuotedString", "SingleQuotedString", "DetailTitle", "DetailTitleSubTitle", 
		"Float", "Percent", "Intersect", "Union", "Substract", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Console.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }


		protected const int EOF = Eof;

	public ConsoleParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CommandContext : ParserRuleContext {
		public AssetContext asset() {
			return GetRuleContext<AssetContext>(0);
		}
		public GroupedQueryContext groupedQuery() {
			return GetRuleContext<GroupedQueryContext>(0);
		}
		public AmortContext amort() {
			return GetRuleContext<AmortContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(ConsoleParser.Eof, 0); }
		public OtherCommandContext otherCommand() {
			return GetRuleContext<OtherCommandContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_command);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 96; vouchers();
				}
				break;

			case 2:
				{
				State = 97; groupedQuery();
				}
				break;

			case 3:
				{
				State = 98; asset();
				}
				break;

			case 4:
				{
				State = 99; amort();
				}
				break;

			case 5:
				{
				State = 100; otherCommand();
				}
				break;
			}
			State = 103; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherCommandContext : ParserRuleContext {
		public ITerminalNode Connect() { return GetToken(ConsoleParser.Connect, 0); }
		public ITerminalNode Backup() { return GetToken(ConsoleParser.Backup, 0); }
		public ITerminalNode Shutdown() { return GetToken(ConsoleParser.Shutdown, 0); }
		public ITerminalNode Fetch() { return GetToken(ConsoleParser.Fetch, 0); }
		public ITerminalNode Mobile() { return GetToken(ConsoleParser.Mobile, 0); }
		public ITerminalNode Help() { return GetToken(ConsoleParser.Help, 0); }
		public ITerminalNode Check() { return GetToken(ConsoleParser.Check, 0); }
		public ITerminalNode Launch() { return GetToken(ConsoleParser.Launch, 0); }
		public ITerminalNode Exit() { return GetToken(ConsoleParser.Exit, 0); }
		public ITerminalNode Titles() { return GetToken(ConsoleParser.Titles, 0); }
		public OtherCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherCommand; } }
	}

	[RuleVersion(0)]
	public OtherCommandContext otherCommand() {
		OtherCommandContext _localctx = new OtherCommandContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_otherCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Launch) | (1L << Connect) | (1L << Shutdown) | (1L << Backup) | (1L << Mobile) | (1L << Fetch) | (1L << Help) | (1L << Titles) | (1L << Exit) | (1L << Check))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupedQueryContext : ParserRuleContext {
		public SubtotalContext subtotal() {
			return GetRuleContext<SubtotalContext>(0);
		}
		public VoucherDetailQueryContext voucherDetailQuery() {
			return GetRuleContext<VoucherDetailQueryContext>(0);
		}
		public GroupedQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupedQuery; } }
	}

	[RuleVersion(0)]
	public GroupedQueryContext groupedQuery() {
		GroupedQueryContext _localctx = new GroupedQueryContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_groupedQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; voucherDetailQuery();
			State = 108; subtotal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChartContext : ParserRuleContext {
		public ITerminalNode DollarQuotedString() { return GetToken(ConsoleParser.DollarQuotedString, 0); }
		public ChartAreaContext chartArea() {
			return GetRuleContext<ChartAreaContext>(0);
		}
		public HyperItemContext hyperItem(int i) {
			return GetRuleContext<HyperItemContext>(i);
		}
		public IReadOnlyList<HyperItemContext> hyperItem() {
			return GetRuleContexts<HyperItemContext>();
		}
		public ChartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chart; } }
	}

	[RuleVersion(0)]
	public ChartContext chart() {
		ChartContext _localctx = new ChartContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_chart);
		int _la;
		try {
			State = 130;
			switch (_input.La(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 110; Match(T__0);
				State = 111; Match(DollarQuotedString);
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 112; Match(T__1);
				State = 113; chartArea();
				State = 116;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 114; Match(T__2);
					State = 115; hyperItem();
					}
					}
					State = 118;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==T__2 );
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 120; Match(T__3);
				State = 121; Match(DollarQuotedString);
				State = 122; Match(T__4);
				State = 123; chartArea();
				State = 126;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 124; Match(T__2);
					State = 125; hyperItem();
					}
					}
					State = 128;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==T__2 );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChartAreaContext : ParserRuleContext {
		public IReadOnlyList<HyperItemAtomContext> hyperItemAtom() {
			return GetRuleContexts<HyperItemAtomContext>();
		}
		public ITerminalNode Float(int i) {
			return GetToken(ConsoleParser.Float, i);
		}
		public HyperItemAtomContext hyperItemAtom(int i) {
			return GetRuleContext<HyperItemAtomContext>(i);
		}
		public IReadOnlyList<ITerminalNode> Float() { return GetTokens(ConsoleParser.Float); }
		public ChartAreaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chartArea; } }
	}

	[RuleVersion(0)]
	public ChartAreaContext chartArea() {
		ChartAreaContext _localctx = new ChartAreaContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_chartArea);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 132; hyperItemAtom();
			State = 137;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 133; Match(T__5);
					State = 134; hyperItemAtom();
					}
					} 
				}
				State = 139;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			}
			State = 140; Match(T__5);
			State = 143;
			_la = _input.La(1);
			if (_la==T__6) {
				{
				State = 141; Match(T__6);
				State = 142; Match(Float);
				}
			}

			State = 147;
			_la = _input.La(1);
			if (_la==T__7) {
				{
				State = 145; Match(T__7);
				State = 146; Match(Float);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReportContext : ParserRuleContext {
		public ITerminalNode DollarQuotedString() { return GetToken(ConsoleParser.DollarQuotedString, 0); }
		public ChartAreaContext chartArea() {
			return GetRuleContext<ChartAreaContext>(0);
		}
		public HyperItemContext hyperItem(int i) {
			return GetRuleContext<HyperItemContext>(i);
		}
		public IReadOnlyList<HyperItemContext> hyperItem() {
			return GetRuleContexts<HyperItemContext>();
		}
		public ReportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_report; } }
	}

	[RuleVersion(0)]
	public ReportContext report() {
		ReportContext _localctx = new ReportContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_report);
		int _la;
		try {
			State = 163;
			switch (_input.La(1)) {
			case T__8:
				EnterOuterAlt(_localctx, 1);
				{
				State = 149; Match(T__8);
				State = 150; Match(DollarQuotedString);
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 151; Match(T__9);
				State = 152; hyperItem();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 3);
				{
				State = 153; Match(T__10);
				State = 154; Match(DollarQuotedString);
				State = 155; Match(T__4);
				State = 156; chartArea();
				State = 159;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 157; Match(T__2);
					State = 158; hyperItem();
					}
					}
					State = 161;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==T__2 );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HyperItemContext : ParserRuleContext {
		public HyperItemAtomContext hyperItemAtom() {
			return GetRuleContext<HyperItemAtomContext>(0);
		}
		public HyperItemContext hyperItem(int i) {
			return GetRuleContext<HyperItemContext>(i);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public IReadOnlyList<HyperItemContext> hyperItem() {
			return GetRuleContexts<HyperItemContext>();
		}
		public HyperItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hyperItem; } }
	}

	[RuleVersion(0)]
	public HyperItemContext hyperItem() {
		HyperItemContext _localctx = new HyperItemContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_hyperItem);
		try {
			int _alt;
			State = 174;
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 165; name();
				State = 166; hyperItem();
				State = 169;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 167; Match(T__5);
						State = 168; hyperItem();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 171;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 173; hyperItemAtom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HyperItemAtomContext : ParserRuleContext {
		public CoefContext coef() {
			return GetRuleContext<CoefContext>(0);
		}
		public GroupedQueryContext groupedQuery() {
			return GetRuleContext<GroupedQueryContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public HyperItemAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hyperItemAtom; } }
	}

	[RuleVersion(0)]
	public HyperItemAtomContext hyperItemAtom() {
		HyperItemAtomContext _localctx = new HyperItemAtomContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_hyperItemAtom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176; name();
			State = 177; groupedQuery();
			State = 179;
			_la = _input.La(1);
			if (_la==Intersect) {
				{
				State = 178; coef();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public ITerminalNode DollarQuotedString() { return GetToken(ConsoleParser.DollarQuotedString, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181; Match(DollarQuotedString);
			State = 182; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CoefContext : ParserRuleContext {
		public ITerminalNode Percent() { return GetToken(ConsoleParser.Percent, 0); }
		public ITerminalNode Float() { return GetToken(ConsoleParser.Float, 0); }
		public CoefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coef; } }
	}

	[RuleVersion(0)]
	public CoefContext coef() {
		CoefContext _localctx = new CoefContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_coef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184; Match(Intersect);
			State = 185;
			_la = _input.La(1);
			if ( !(_la==Float || _la==Percent) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtotalContext : ParserRuleContext {
		public IToken SubtotalMark;
		public IToken SubtotalFields;
		public IToken Aggregation;
		public IToken Ranged;
		public RangeCoreContext rangeCore() {
			return GetRuleContext<RangeCoreContext>(0);
		}
		public SubtotalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtotal; } }
	}

	[RuleVersion(0)]
	public SubtotalContext subtotal() {
		SubtotalContext _localctx = new SubtotalContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_subtotal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			_localctx.SubtotalMark = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==T__11 || _la==T__12) ) {
				_localctx.SubtotalMark = _errHandler.RecoverInline(this);
			}
			Consume();
			State = 191;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22))) != 0)) {
				{
				{
				State = 188;
				_localctx.SubtotalFields = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22))) != 0)) ) {
					_localctx.SubtotalFields = _errHandler.RecoverInline(this);
				}
				Consume();
				}
				}
				State = 193;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 202;
			_la = _input.La(1);
			if (_la==T__23) {
				{
				State = 194; _localctx.Aggregation = Match(T__23);
				State = 200;
				_la = _input.La(1);
				if (_la==T__24) {
					{
					State = 195; _localctx.Ranged = Match(T__24);
					State = 197;
					_la = _input.La(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (T__33 - 34)) | (1L << (T__34 - 34)) | (1L << (T__35 - 34)) | (1L << (RangeNull - 34)) | (1L << (RangeAllNotNull - 34)) | (1L << (RangeAYear - 34)) | (1L << (RangeAMonth - 34)) | (1L << (RangeDeltaMonth - 34)) | (1L << (RangeADay - 34)) | (1L << (RangeDeltaDay - 34)) | (1L << (RangeDeltaWeek - 34)) | (1L << (Substract - 34)))) != 0)) {
						{
						State = 196; rangeCore();
						}
					}

					State = 199; Match(T__25);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoucherDetailQueryContext : ParserRuleContext {
		public VoucherQueryContext voucherQuery() {
			return GetRuleContext<VoucherQueryContext>(0);
		}
		public EmitContext emit() {
			return GetRuleContext<EmitContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public VoucherDetailQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voucherDetailQuery; } }
	}

	[RuleVersion(0)]
	public VoucherDetailQueryContext voucherDetailQuery() {
		VoucherDetailQueryContext _localctx = new VoucherDetailQueryContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_voucherDetailQuery);
		try {
			State = 208;
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 204; vouchers();
				State = 205; emit();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 207; voucherQuery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmitContext : ParserRuleContext {
		public IToken Op;
		public DetailsContext details() {
			return GetRuleContext<DetailsContext>(0);
		}
		public EmitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emit; } }
	}

	[RuleVersion(0)]
	public EmitContext emit() {
		EmitContext _localctx = new EmitContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_emit);
		try {
			State = 213;
			switch (_input.La(1)) {
			case T__26:
				EnterOuterAlt(_localctx, 1);
				{
				State = 210; _localctx.Op = Match(T__26);
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 211; Match(T__4);
				State = 212; details(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VouchersContext : ParserRuleContext {
		public VoucherQueryContext voucherQuery() {
			return GetRuleContext<VoucherQueryContext>(0);
		}
		public VouchersBContext vouchersB() {
			return GetRuleContext<VouchersBContext>(0);
		}
		public VouchersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vouchers; } }
	}

	[RuleVersion(0)]
	public VouchersContext vouchers() {
		VouchersContext _localctx = new VouchersContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_vouchers);
		try {
			State = 217;
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 215; vouchersB(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 216; voucherQuery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VouchersBContext : ParserRuleContext {
		public IToken Op;
		public VouchersBContext vouchersB(int i) {
			return GetRuleContext<VouchersBContext>(i);
		}
		public VoucherQueryContext voucherQuery() {
			return GetRuleContext<VoucherQueryContext>(0);
		}
		public IReadOnlyList<VouchersBContext> vouchersB() {
			return GetRuleContexts<VouchersBContext>();
		}
		public VouchersBContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vouchersB; } }
	}

	[RuleVersion(0)]
	public VouchersBContext vouchersB() {
		return vouchersB(0);
	}

	private VouchersBContext vouchersB(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		VouchersBContext _localctx = new VouchersBContext(_ctx, _parentState);
		VouchersBContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_vouchersB, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				{
				State = 220;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==Union || _la==Substract) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 221; vouchersB(3);
				}
				break;

			case 2:
				{
				State = 222; Match(T__27);
				State = 223; voucherQuery();
				State = 224; Match(T__28);
				}
				break;

			case 3:
				{
				State = 226; Match(T__27);
				State = 227; vouchersB(0);
				State = 228; Match(T__28);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 240;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 238;
					switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
					case 1:
						{
						_localctx = new VouchersBContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_vouchersB);
						State = 232;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 233; _localctx.Op = Match(Intersect);
						State = 234; vouchersB(6);
						}
						break;

					case 2:
						{
						_localctx = new VouchersBContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_vouchersB);
						State = 235;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 236;
						_localctx.Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==Union || _la==Substract) ) {
							_localctx.Op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 237; vouchersB(5);
						}
						break;
					}
					} 
				}
				State = 242;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VoucherQueryContext : ParserRuleContext {
		public IToken Op;
		public ITerminalNode DollarQuotedString() { return GetToken(ConsoleParser.DollarQuotedString, 0); }
		public ITerminalNode PercentQuotedString() { return GetToken(ConsoleParser.PercentQuotedString, 0); }
		public DetailsContext details() {
			return GetRuleContext<DetailsContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode VoucherType() { return GetToken(ConsoleParser.VoucherType, 0); }
		public VoucherQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voucherQuery; } }
	}

	[RuleVersion(0)]
	public VoucherQueryContext voucherQuery() {
		VoucherQueryContext _localctx = new VoucherQueryContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_voucherQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
			case 1:
				{
				State = 243; details(0);
				}
				break;
			}
			State = 247;
			switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
			case 1:
				{
				State = 246;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__26 || _la==T__29) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 250;
			_la = _input.La(1);
			if (((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & ((1L << (T__24 - 25)) | (1L << (T__32 - 25)) | (1L << (T__33 - 25)) | (1L << (T__34 - 25)) | (1L << (T__35 - 25)) | (1L << (RangeNull - 25)) | (1L << (RangeAllNotNull - 25)) | (1L << (RangeAYear - 25)) | (1L << (RangeAMonth - 25)) | (1L << (RangeDeltaMonth - 25)) | (1L << (RangeADay - 25)) | (1L << (RangeDeltaDay - 25)) | (1L << (RangeDeltaWeek - 25)) | (1L << (Substract - 25)))) != 0)) {
				{
				State = 249; range();
				}
			}

			State = 253;
			_la = _input.La(1);
			if (_la==DollarQuotedString) {
				{
				State = 252; Match(DollarQuotedString);
				}
			}

			State = 256;
			_la = _input.La(1);
			if (_la==PercentQuotedString) {
				{
				State = 255; Match(PercentQuotedString);
				}
			}

			State = 259;
			_la = _input.La(1);
			if (_la==VoucherType) {
				{
				State = 258; Match(VoucherType);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DetailsContext : ParserRuleContext {
		public IToken Op;
		public DetailsContext details(int i) {
			return GetRuleContext<DetailsContext>(i);
		}
		public IReadOnlyList<DetailsContext> details() {
			return GetRuleContexts<DetailsContext>();
		}
		public DetailQueryContext detailQuery() {
			return GetRuleContext<DetailQueryContext>(0);
		}
		public DetailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_details; } }
	}

	[RuleVersion(0)]
	public DetailsContext details() {
		return details(0);
	}

	private DetailsContext details(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		DetailsContext _localctx = new DetailsContext(_ctx, _parentState);
		DetailsContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_details, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
			case 1:
				{
				State = 262;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==Union || _la==Substract) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 263; details(3);
				}
				break;

			case 2:
				{
				State = 264; detailQuery();
				}
				break;

			case 3:
				{
				State = 265; Match(T__30);
				State = 266; details(0);
				State = 267; Match(T__31);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 279;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,30,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 277;
					switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
					case 1:
						{
						_localctx = new DetailsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_details);
						State = 271;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 272; _localctx.Op = Match(Intersect);
						State = 273; details(6);
						}
						break;

					case 2:
						{
						_localctx = new DetailsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_details);
						State = 274;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 275;
						_localctx.Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==Union || _la==Substract) ) {
							_localctx.Op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 276; details(5);
						}
						break;
					}
					} 
				}
				State = 281;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,30,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DetailQueryContext : ParserRuleContext {
		public IToken Direction;
		public ITerminalNode DetailTitleSubTitle() { return GetToken(ConsoleParser.DetailTitleSubTitle, 0); }
		public ITerminalNode DoubleQuotedString() { return GetToken(ConsoleParser.DoubleQuotedString, 0); }
		public ITerminalNode SingleQuotedString() { return GetToken(ConsoleParser.SingleQuotedString, 0); }
		public ITerminalNode DetailTitle() { return GetToken(ConsoleParser.DetailTitle, 0); }
		public DetailQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_detailQuery; } }
	}

	[RuleVersion(0)]
	public DetailQueryContext detailQuery() {
		DetailQueryContext _localctx = new DetailQueryContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_detailQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
			case 1:
				{
				State = 282;
				_la = _input.La(1);
				if ( !(_la==DetailTitle || _la==DetailTitleSubTitle) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 286;
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				State = 285; Match(SingleQuotedString);
				}
				break;
			}
			State = 289;
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				{
				State = 288; Match(DoubleQuotedString);
				}
				break;
			}
			State = 292;
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				{
				State = 291;
				_localctx.Direction = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__15 || _la==T__17) ) {
					_localctx.Direction = _errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public RangeCoreContext Core;
		public RangeCoreContext rangeCore() {
			return GetRuleContext<RangeCoreContext>(0);
		}
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_range);
		try {
			State = 300;
			switch (_input.La(1)) {
			case T__32:
				EnterOuterAlt(_localctx, 1);
				{
				State = 294; Match(T__32);
				}
				break;
			case T__33:
			case T__34:
			case T__35:
			case RangeNull:
			case RangeAllNotNull:
			case RangeAYear:
			case RangeAMonth:
			case RangeDeltaMonth:
			case RangeADay:
			case RangeDeltaDay:
			case RangeDeltaWeek:
			case Substract:
				EnterOuterAlt(_localctx, 2);
				{
				State = 295; _localctx.Core = rangeCore();
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 3);
				{
				State = 296; Match(T__24);
				State = 297; _localctx.Core = rangeCore();
				State = 298; Match(T__25);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeCoreContext : ParserRuleContext {
		public RangeCertainPointContext Begin;
		public RangeCertainPointContext End;
		public IToken Op;
		public RangeCertainPointContext Certain;
		public ITerminalNode RangeNull() { return GetToken(ConsoleParser.RangeNull, 0); }
		public RangeCertainPointContext rangeCertainPoint(int i) {
			return GetRuleContext<RangeCertainPointContext>(i);
		}
		public ITerminalNode RangeAllNotNull() { return GetToken(ConsoleParser.RangeAllNotNull, 0); }
		public IReadOnlyList<RangeCertainPointContext> rangeCertainPoint() {
			return GetRuleContexts<RangeCertainPointContext>();
		}
		public RangeCoreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeCore; } }
	}

	[RuleVersion(0)]
	public RangeCoreContext rangeCore() {
		RangeCoreContext _localctx = new RangeCoreContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_rangeCore);
		int _la;
		try {
			State = 312;
			switch ( Interpreter.AdaptivePredict(_input,37,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 302; Match(RangeNull);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 303; Match(RangeAllNotNull);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 304; _localctx.Begin = rangeCertainPoint();
				State = 305;
				_la = _input.La(1);
				if ( !(_la==T__33 || _la==Substract) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 307;
				_la = _input.La(1);
				if (((((_la - 35)) & ~0x3f) == 0 && ((1L << (_la - 35)) & ((1L << (T__34 - 35)) | (1L << (T__35 - 35)) | (1L << (RangeAYear - 35)) | (1L << (RangeAMonth - 35)) | (1L << (RangeDeltaMonth - 35)) | (1L << (RangeADay - 35)) | (1L << (RangeDeltaDay - 35)) | (1L << (RangeDeltaWeek - 35)))) != 0)) {
					{
					State = 306; _localctx.End = rangeCertainPoint();
					}
				}

				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 309;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__33 || _la==Substract) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 310; _localctx.End = rangeCertainPoint();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 311; _localctx.Certain = rangeCertainPoint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangePointContext : ParserRuleContext {
		public IToken All;
		public ITerminalNode RangeNull() { return GetToken(ConsoleParser.RangeNull, 0); }
		public RangeCertainPointContext rangeCertainPoint() {
			return GetRuleContext<RangeCertainPointContext>(0);
		}
		public RangePointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangePoint; } }
	}

	[RuleVersion(0)]
	public RangePointContext rangePoint() {
		RangePointContext _localctx = new RangePointContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_rangePoint);
		try {
			State = 317;
			switch (_input.La(1)) {
			case RangeNull:
				EnterOuterAlt(_localctx, 1);
				{
				State = 314; Match(RangeNull);
				}
				break;
			case T__32:
				EnterOuterAlt(_localctx, 2);
				{
				State = 315; _localctx.All = Match(T__32);
				}
				break;
			case T__34:
			case T__35:
			case RangeAYear:
			case RangeAMonth:
			case RangeDeltaMonth:
			case RangeADay:
			case RangeDeltaDay:
			case RangeDeltaWeek:
				EnterOuterAlt(_localctx, 3);
				{
				State = 316; rangeCertainPoint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeCertainPointContext : ParserRuleContext {
		public RangeWeekContext rangeWeek() {
			return GetRuleContext<RangeWeekContext>(0);
		}
		public RangeYearContext rangeYear() {
			return GetRuleContext<RangeYearContext>(0);
		}
		public RangeMonthContext rangeMonth() {
			return GetRuleContext<RangeMonthContext>(0);
		}
		public RangeDayContext rangeDay() {
			return GetRuleContext<RangeDayContext>(0);
		}
		public RangeCertainPointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeCertainPoint; } }
	}

	[RuleVersion(0)]
	public RangeCertainPointContext rangeCertainPoint() {
		RangeCertainPointContext _localctx = new RangeCertainPointContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_rangeCertainPoint);
		try {
			State = 323;
			switch (_input.La(1)) {
			case RangeAYear:
				EnterOuterAlt(_localctx, 1);
				{
				State = 319; rangeYear();
				}
				break;
			case T__34:
			case T__35:
			case RangeAMonth:
			case RangeDeltaMonth:
				EnterOuterAlt(_localctx, 2);
				{
				State = 320; rangeMonth();
				}
				break;
			case RangeDeltaWeek:
				EnterOuterAlt(_localctx, 3);
				{
				State = 321; rangeWeek();
				}
				break;
			case RangeADay:
			case RangeDeltaDay:
				EnterOuterAlt(_localctx, 4);
				{
				State = 322; rangeDay();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeYearContext : ParserRuleContext {
		public ITerminalNode RangeAYear() { return GetToken(ConsoleParser.RangeAYear, 0); }
		public RangeYearContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeYear; } }
	}

	[RuleVersion(0)]
	public RangeYearContext rangeYear() {
		RangeYearContext _localctx = new RangeYearContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_rangeYear);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325; Match(RangeAYear);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeMonthContext : ParserRuleContext {
		public IToken Modifier;
		public ITerminalNode RangeDeltaMonth() { return GetToken(ConsoleParser.RangeDeltaMonth, 0); }
		public ITerminalNode RangeAMonth() { return GetToken(ConsoleParser.RangeAMonth, 0); }
		public RangeMonthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeMonth; } }
	}

	[RuleVersion(0)]
	public RangeMonthContext rangeMonth() {
		RangeMonthContext _localctx = new RangeMonthContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_rangeMonth);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			_la = _input.La(1);
			if (_la==T__34 || _la==T__35) {
				{
				State = 327;
				_localctx.Modifier = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__34 || _la==T__35) ) {
					_localctx.Modifier = _errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			State = 330;
			_la = _input.La(1);
			if ( !(_la==RangeAMonth || _la==RangeDeltaMonth) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeWeekContext : ParserRuleContext {
		public ITerminalNode RangeDeltaWeek() { return GetToken(ConsoleParser.RangeDeltaWeek, 0); }
		public RangeWeekContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeWeek; } }
	}

	[RuleVersion(0)]
	public RangeWeekContext rangeWeek() {
		RangeWeekContext _localctx = new RangeWeekContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_rangeWeek);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332; Match(RangeDeltaWeek);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeDayContext : ParserRuleContext {
		public ITerminalNode RangeADay() { return GetToken(ConsoleParser.RangeADay, 0); }
		public ITerminalNode RangeDeltaDay() { return GetToken(ConsoleParser.RangeDeltaDay, 0); }
		public RangeDayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeDay; } }
	}

	[RuleVersion(0)]
	public RangeDayContext rangeDay() {
		RangeDayContext _localctx = new RangeDayContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_rangeDay);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			_la = _input.La(1);
			if ( !(_la==RangeADay || _la==RangeDeltaDay) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetContext : ParserRuleContext {
		public AssetRegisterContext assetRegister() {
			return GetRuleContext<AssetRegisterContext>(0);
		}
		public AssetUnregisterContext assetUnregister() {
			return GetRuleContext<AssetUnregisterContext>(0);
		}
		public AssetResetHardContext assetResetHard() {
			return GetRuleContext<AssetResetHardContext>(0);
		}
		public AssetResetSoftContext assetResetSoft() {
			return GetRuleContext<AssetResetSoftContext>(0);
		}
		public AssetApplyContext assetApply() {
			return GetRuleContext<AssetApplyContext>(0);
		}
		public AssetListContext assetList() {
			return GetRuleContext<AssetListContext>(0);
		}
		public AssetQueryContext assetQuery() {
			return GetRuleContext<AssetQueryContext>(0);
		}
		public AssetCheckContext assetCheck() {
			return GetRuleContext<AssetCheckContext>(0);
		}
		public AssetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asset; } }
	}

	[RuleVersion(0)]
	public AssetContext asset() {
		AssetContext _localctx = new AssetContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_asset);
		try {
			State = 344;
			switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 336; assetList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 337; assetQuery();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 338; assetRegister();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 339; assetUnregister();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 340; assetResetSoft();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 341; assetResetHard();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 342; assetApply();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 343; assetCheck();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetListContext : ParserRuleContext {
		public ITerminalNode AOList() { return GetToken(ConsoleParser.AOList, 0); }
		public ITerminalNode AOAll() { return GetToken(ConsoleParser.AOAll, 0); }
		public RangePointContext rangePoint() {
			return GetRuleContext<RangePointContext>(0);
		}
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AssetListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetList; } }
	}

	[RuleVersion(0)]
	public AssetListContext assetList() {
		AssetListContext _localctx = new AssetListContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_assetList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 346; Match(T__36);
			State = 348;
			_la = _input.La(1);
			if (_la==AOAll || _la==AOList) {
				{
				State = 347;
				_la = _input.La(1);
				if ( !(_la==AOAll || _la==AOList) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			State = 351;
			_la = _input.La(1);
			if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (T__32 - 33)) | (1L << (T__34 - 33)) | (1L << (T__35 - 33)) | (1L << (RangeNull - 33)) | (1L << (RangeAYear - 33)) | (1L << (RangeAMonth - 33)) | (1L << (RangeDeltaMonth - 33)) | (1L << (RangeADay - 33)) | (1L << (RangeDeltaDay - 33)) | (1L << (RangeDeltaWeek - 33)))) != 0)) {
				{
				State = 350; rangePoint();
				}
			}

			State = 354;
			_la = _input.La(1);
			if (((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (Guid - 61)) | (1L << (DoubleQuotedString - 61)) | (1L << (SingleQuotedString - 61)))) != 0)) {
				{
				State = 353; aoQ();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetQueryContext : ParserRuleContext {
		public ITerminalNode AOQuery() { return GetToken(ConsoleParser.AOQuery, 0); }
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AssetQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetQuery; } }
	}

	[RuleVersion(0)]
	public AssetQueryContext assetQuery() {
		AssetQueryContext _localctx = new AssetQueryContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_assetQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356; Match(T__36);
			State = 357; Match(AOQuery);
			State = 359;
			_la = _input.La(1);
			if (((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (Guid - 61)) | (1L << (DoubleQuotedString - 61)) | (1L << (SingleQuotedString - 61)))) != 0)) {
				{
				State = 358; aoQ();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetRegisterContext : ParserRuleContext {
		public ITerminalNode AORegister() { return GetToken(ConsoleParser.AORegister, 0); }
		public VoucherDetailQueryContext voucherDetailQuery() {
			return GetRuleContext<VoucherDetailQueryContext>(0);
		}
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AssetRegisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetRegister; } }
	}

	[RuleVersion(0)]
	public AssetRegisterContext assetRegister() {
		AssetRegisterContext _localctx = new AssetRegisterContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_assetRegister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361; Match(T__36);
			State = 362; Match(AORegister);
			State = 364;
			_la = _input.La(1);
			if (((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (Guid - 61)) | (1L << (DoubleQuotedString - 61)) | (1L << (SingleQuotedString - 61)))) != 0)) {
				{
				State = 363; aoQ();
				}
			}

			State = 368;
			_la = _input.La(1);
			if (_la==T__4) {
				{
				State = 366; Match(T__4);
				State = 367; voucherDetailQuery();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetUnregisterContext : ParserRuleContext {
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode AOUnregister() { return GetToken(ConsoleParser.AOUnregister, 0); }
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AssetUnregisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetUnregister; } }
	}

	[RuleVersion(0)]
	public AssetUnregisterContext assetUnregister() {
		AssetUnregisterContext _localctx = new AssetUnregisterContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_assetUnregister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370; Match(T__36);
			State = 371; Match(AOUnregister);
			State = 373;
			_la = _input.La(1);
			if (((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (Guid - 61)) | (1L << (DoubleQuotedString - 61)) | (1L << (SingleQuotedString - 61)))) != 0)) {
				{
				State = 372; aoQ();
				}
			}

			State = 376;
			_la = _input.La(1);
			if (((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & ((1L << (T__24 - 25)) | (1L << (T__32 - 25)) | (1L << (T__33 - 25)) | (1L << (T__34 - 25)) | (1L << (T__35 - 25)) | (1L << (RangeNull - 25)) | (1L << (RangeAllNotNull - 25)) | (1L << (RangeAYear - 25)) | (1L << (RangeAMonth - 25)) | (1L << (RangeDeltaMonth - 25)) | (1L << (RangeADay - 25)) | (1L << (RangeDeltaDay - 25)) | (1L << (RangeDeltaWeek - 25)) | (1L << (Substract - 25)))) != 0)) {
				{
				State = 375; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetRedepContext : ParserRuleContext {
		public ITerminalNode ARedep() { return GetToken(ConsoleParser.ARedep, 0); }
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AssetRedepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetRedep; } }
	}

	[RuleVersion(0)]
	public AssetRedepContext assetRedep() {
		AssetRedepContext _localctx = new AssetRedepContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_assetRedep);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378; Match(T__36);
			State = 379; Match(ARedep);
			State = 381;
			_la = _input.La(1);
			if (((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (Guid - 61)) | (1L << (DoubleQuotedString - 61)) | (1L << (SingleQuotedString - 61)))) != 0)) {
				{
				State = 380; aoQ();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetResetSoftContext : ParserRuleContext {
		public ITerminalNode AOResetSoft() { return GetToken(ConsoleParser.AOResetSoft, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AssetResetSoftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetResetSoft; } }
	}

	[RuleVersion(0)]
	public AssetResetSoftContext assetResetSoft() {
		AssetResetSoftContext _localctx = new AssetResetSoftContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_assetResetSoft);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383; Match(T__36);
			State = 384; Match(AOResetSoft);
			State = 386;
			_la = _input.La(1);
			if (((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (Guid - 61)) | (1L << (DoubleQuotedString - 61)) | (1L << (SingleQuotedString - 61)))) != 0)) {
				{
				State = 385; aoQ();
				}
			}

			State = 389;
			_la = _input.La(1);
			if (((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & ((1L << (T__24 - 25)) | (1L << (T__32 - 25)) | (1L << (T__33 - 25)) | (1L << (T__34 - 25)) | (1L << (T__35 - 25)) | (1L << (RangeNull - 25)) | (1L << (RangeAllNotNull - 25)) | (1L << (RangeAYear - 25)) | (1L << (RangeAMonth - 25)) | (1L << (RangeDeltaMonth - 25)) | (1L << (RangeADay - 25)) | (1L << (RangeDeltaDay - 25)) | (1L << (RangeDeltaWeek - 25)) | (1L << (Substract - 25)))) != 0)) {
				{
				State = 388; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetResetHardContext : ParserRuleContext {
		public ITerminalNode AOResetHard() { return GetToken(ConsoleParser.AOResetHard, 0); }
		public VoucherDetailQueryContext voucherDetailQuery() {
			return GetRuleContext<VoucherDetailQueryContext>(0);
		}
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AssetResetHardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetResetHard; } }
	}

	[RuleVersion(0)]
	public AssetResetHardContext assetResetHard() {
		AssetResetHardContext _localctx = new AssetResetHardContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_assetResetHard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391; Match(T__36);
			State = 392; Match(AOResetHard);
			State = 394;
			_la = _input.La(1);
			if (((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (Guid - 61)) | (1L << (DoubleQuotedString - 61)) | (1L << (SingleQuotedString - 61)))) != 0)) {
				{
				State = 393; aoQ();
				}
			}

			State = 398;
			_la = _input.La(1);
			if (_la==T__4) {
				{
				State = 396; Match(T__4);
				State = 397; voucherDetailQuery();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetApplyContext : ParserRuleContext {
		public ITerminalNode AOCollapse() { return GetToken(ConsoleParser.AOCollapse, 0); }
		public ITerminalNode AOApply() { return GetToken(ConsoleParser.AOApply, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AssetApplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetApply; } }
	}

	[RuleVersion(0)]
	public AssetApplyContext assetApply() {
		AssetApplyContext _localctx = new AssetApplyContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_assetApply);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400; Match(T__36);
			State = 401; Match(AOApply);
			State = 403;
			_la = _input.La(1);
			if (_la==AOCollapse) {
				{
				State = 402; Match(AOCollapse);
				}
			}

			State = 406;
			_la = _input.La(1);
			if (((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (Guid - 61)) | (1L << (DoubleQuotedString - 61)) | (1L << (SingleQuotedString - 61)))) != 0)) {
				{
				State = 405; aoQ();
				}
			}

			State = 409;
			_la = _input.La(1);
			if (((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & ((1L << (T__24 - 25)) | (1L << (T__32 - 25)) | (1L << (T__33 - 25)) | (1L << (T__34 - 25)) | (1L << (T__35 - 25)) | (1L << (RangeNull - 25)) | (1L << (RangeAllNotNull - 25)) | (1L << (RangeAYear - 25)) | (1L << (RangeAMonth - 25)) | (1L << (RangeDeltaMonth - 25)) | (1L << (RangeADay - 25)) | (1L << (RangeDeltaDay - 25)) | (1L << (RangeDeltaWeek - 25)) | (1L << (Substract - 25)))) != 0)) {
				{
				State = 408; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetCheckContext : ParserRuleContext {
		public ITerminalNode AOCheck() { return GetToken(ConsoleParser.AOCheck, 0); }
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AssetCheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetCheck; } }
	}

	[RuleVersion(0)]
	public AssetCheckContext assetCheck() {
		AssetCheckContext _localctx = new AssetCheckContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_assetCheck);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411; Match(T__36);
			State = 412; Match(AOCheck);
			State = 414;
			_la = _input.La(1);
			if (((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (Guid - 61)) | (1L << (DoubleQuotedString - 61)) | (1L << (SingleQuotedString - 61)))) != 0)) {
				{
				State = 413; aoQ();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortContext : ParserRuleContext {
		public AmortQueryContext amortQuery() {
			return GetRuleContext<AmortQueryContext>(0);
		}
		public AmortCheckContext amortCheck() {
			return GetRuleContext<AmortCheckContext>(0);
		}
		public AmortResetSoftContext amortResetSoft() {
			return GetRuleContext<AmortResetSoftContext>(0);
		}
		public AmortRegisterContext amortRegister() {
			return GetRuleContext<AmortRegisterContext>(0);
		}
		public AmortUnregisterContext amortUnregister() {
			return GetRuleContext<AmortUnregisterContext>(0);
		}
		public AmortApplyContext amortApply() {
			return GetRuleContext<AmortApplyContext>(0);
		}
		public AmortListContext amortList() {
			return GetRuleContext<AmortListContext>(0);
		}
		public AmortResetHardContext amortResetHard() {
			return GetRuleContext<AmortResetHardContext>(0);
		}
		public AmortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amort; } }
	}

	[RuleVersion(0)]
	public AmortContext amort() {
		AmortContext _localctx = new AmortContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_amort);
		try {
			State = 424;
			switch ( Interpreter.AdaptivePredict(_input,59,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 416; amortList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 417; amortQuery();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 418; amortRegister();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 419; amortUnregister();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 420; amortResetSoft();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 421; amortResetHard();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 422; amortApply();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 423; amortCheck();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortListContext : ParserRuleContext {
		public ITerminalNode AOList() { return GetToken(ConsoleParser.AOList, 0); }
		public ITerminalNode AOAll() { return GetToken(ConsoleParser.AOAll, 0); }
		public RangePointContext rangePoint() {
			return GetRuleContext<RangePointContext>(0);
		}
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AmortListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortList; } }
	}

	[RuleVersion(0)]
	public AmortListContext amortList() {
		AmortListContext _localctx = new AmortListContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_amortList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426; Match(T__37);
			State = 428;
			_la = _input.La(1);
			if (_la==AOAll || _la==AOList) {
				{
				State = 427;
				_la = _input.La(1);
				if ( !(_la==AOAll || _la==AOList) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			State = 431;
			_la = _input.La(1);
			if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (T__32 - 33)) | (1L << (T__34 - 33)) | (1L << (T__35 - 33)) | (1L << (RangeNull - 33)) | (1L << (RangeAYear - 33)) | (1L << (RangeAMonth - 33)) | (1L << (RangeDeltaMonth - 33)) | (1L << (RangeADay - 33)) | (1L << (RangeDeltaDay - 33)) | (1L << (RangeDeltaWeek - 33)))) != 0)) {
				{
				State = 430; rangePoint();
				}
			}

			State = 434;
			_la = _input.La(1);
			if (((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (Guid - 61)) | (1L << (DoubleQuotedString - 61)) | (1L << (SingleQuotedString - 61)))) != 0)) {
				{
				State = 433; aoQ();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortQueryContext : ParserRuleContext {
		public ITerminalNode AOQuery() { return GetToken(ConsoleParser.AOQuery, 0); }
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AmortQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortQuery; } }
	}

	[RuleVersion(0)]
	public AmortQueryContext amortQuery() {
		AmortQueryContext _localctx = new AmortQueryContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_amortQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436; Match(T__37);
			State = 437; Match(AOQuery);
			State = 439;
			_la = _input.La(1);
			if (((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (Guid - 61)) | (1L << (DoubleQuotedString - 61)) | (1L << (SingleQuotedString - 61)))) != 0)) {
				{
				State = 438; aoQ();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortRegisterContext : ParserRuleContext {
		public ITerminalNode AORegister() { return GetToken(ConsoleParser.AORegister, 0); }
		public VoucherDetailQueryContext voucherDetailQuery() {
			return GetRuleContext<VoucherDetailQueryContext>(0);
		}
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AmortRegisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortRegister; } }
	}

	[RuleVersion(0)]
	public AmortRegisterContext amortRegister() {
		AmortRegisterContext _localctx = new AmortRegisterContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_amortRegister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 441; Match(T__37);
			State = 442; Match(AORegister);
			State = 444;
			_la = _input.La(1);
			if (((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (Guid - 61)) | (1L << (DoubleQuotedString - 61)) | (1L << (SingleQuotedString - 61)))) != 0)) {
				{
				State = 443; aoQ();
				}
			}

			State = 448;
			_la = _input.La(1);
			if (_la==T__4) {
				{
				State = 446; Match(T__4);
				State = 447; voucherDetailQuery();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortUnregisterContext : ParserRuleContext {
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode AOUnregister() { return GetToken(ConsoleParser.AOUnregister, 0); }
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AmortUnregisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortUnregister; } }
	}

	[RuleVersion(0)]
	public AmortUnregisterContext amortUnregister() {
		AmortUnregisterContext _localctx = new AmortUnregisterContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_amortUnregister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450; Match(T__37);
			State = 451; Match(AOUnregister);
			State = 453;
			_la = _input.La(1);
			if (((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (Guid - 61)) | (1L << (DoubleQuotedString - 61)) | (1L << (SingleQuotedString - 61)))) != 0)) {
				{
				State = 452; aoQ();
				}
			}

			State = 456;
			_la = _input.La(1);
			if (((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & ((1L << (T__24 - 25)) | (1L << (T__32 - 25)) | (1L << (T__33 - 25)) | (1L << (T__34 - 25)) | (1L << (T__35 - 25)) | (1L << (RangeNull - 25)) | (1L << (RangeAllNotNull - 25)) | (1L << (RangeAYear - 25)) | (1L << (RangeAMonth - 25)) | (1L << (RangeDeltaMonth - 25)) | (1L << (RangeADay - 25)) | (1L << (RangeDeltaDay - 25)) | (1L << (RangeDeltaWeek - 25)) | (1L << (Substract - 25)))) != 0)) {
				{
				State = 455; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortReamoContext : ParserRuleContext {
		public ITerminalNode OReamo() { return GetToken(ConsoleParser.OReamo, 0); }
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AmortReamoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortReamo; } }
	}

	[RuleVersion(0)]
	public AmortReamoContext amortReamo() {
		AmortReamoContext _localctx = new AmortReamoContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_amortReamo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458; Match(T__37);
			State = 459; Match(OReamo);
			State = 461;
			_la = _input.La(1);
			if (((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (Guid - 61)) | (1L << (DoubleQuotedString - 61)) | (1L << (SingleQuotedString - 61)))) != 0)) {
				{
				State = 460; aoQ();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortResetSoftContext : ParserRuleContext {
		public ITerminalNode AOResetSoft() { return GetToken(ConsoleParser.AOResetSoft, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AmortResetSoftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortResetSoft; } }
	}

	[RuleVersion(0)]
	public AmortResetSoftContext amortResetSoft() {
		AmortResetSoftContext _localctx = new AmortResetSoftContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_amortResetSoft);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463; Match(T__37);
			State = 464; Match(AOResetSoft);
			State = 466;
			_la = _input.La(1);
			if (((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (Guid - 61)) | (1L << (DoubleQuotedString - 61)) | (1L << (SingleQuotedString - 61)))) != 0)) {
				{
				State = 465; aoQ();
				}
			}

			State = 469;
			_la = _input.La(1);
			if (((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & ((1L << (T__24 - 25)) | (1L << (T__32 - 25)) | (1L << (T__33 - 25)) | (1L << (T__34 - 25)) | (1L << (T__35 - 25)) | (1L << (RangeNull - 25)) | (1L << (RangeAllNotNull - 25)) | (1L << (RangeAYear - 25)) | (1L << (RangeAMonth - 25)) | (1L << (RangeDeltaMonth - 25)) | (1L << (RangeADay - 25)) | (1L << (RangeDeltaDay - 25)) | (1L << (RangeDeltaWeek - 25)) | (1L << (Substract - 25)))) != 0)) {
				{
				State = 468; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortResetHardContext : ParserRuleContext {
		public ITerminalNode AOResetHard() { return GetToken(ConsoleParser.AOResetHard, 0); }
		public VoucherDetailQueryContext voucherDetailQuery() {
			return GetRuleContext<VoucherDetailQueryContext>(0);
		}
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AmortResetHardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortResetHard; } }
	}

	[RuleVersion(0)]
	public AmortResetHardContext amortResetHard() {
		AmortResetHardContext _localctx = new AmortResetHardContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_amortResetHard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471; Match(T__37);
			State = 472; Match(AOResetHard);
			State = 474;
			_la = _input.La(1);
			if (((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (Guid - 61)) | (1L << (DoubleQuotedString - 61)) | (1L << (SingleQuotedString - 61)))) != 0)) {
				{
				State = 473; aoQ();
				}
			}

			State = 478;
			_la = _input.La(1);
			if (_la==T__4) {
				{
				State = 476; Match(T__4);
				State = 477; voucherDetailQuery();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortApplyContext : ParserRuleContext {
		public ITerminalNode AOCollapse() { return GetToken(ConsoleParser.AOCollapse, 0); }
		public ITerminalNode AOApply() { return GetToken(ConsoleParser.AOApply, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AmortApplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortApply; } }
	}

	[RuleVersion(0)]
	public AmortApplyContext amortApply() {
		AmortApplyContext _localctx = new AmortApplyContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_amortApply);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 480; Match(T__37);
			State = 481; Match(AOApply);
			State = 483;
			_la = _input.La(1);
			if (_la==AOCollapse) {
				{
				State = 482; Match(AOCollapse);
				}
			}

			State = 486;
			_la = _input.La(1);
			if (((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (Guid - 61)) | (1L << (DoubleQuotedString - 61)) | (1L << (SingleQuotedString - 61)))) != 0)) {
				{
				State = 485; aoQ();
				}
			}

			State = 489;
			_la = _input.La(1);
			if (((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & ((1L << (T__24 - 25)) | (1L << (T__32 - 25)) | (1L << (T__33 - 25)) | (1L << (T__34 - 25)) | (1L << (T__35 - 25)) | (1L << (RangeNull - 25)) | (1L << (RangeAllNotNull - 25)) | (1L << (RangeAYear - 25)) | (1L << (RangeAMonth - 25)) | (1L << (RangeDeltaMonth - 25)) | (1L << (RangeADay - 25)) | (1L << (RangeDeltaDay - 25)) | (1L << (RangeDeltaWeek - 25)) | (1L << (Substract - 25)))) != 0)) {
				{
				State = 488; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortCheckContext : ParserRuleContext {
		public ITerminalNode AOCheck() { return GetToken(ConsoleParser.AOCheck, 0); }
		public AoQContext aoQ() {
			return GetRuleContext<AoQContext>(0);
		}
		public AmortCheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortCheck; } }
	}

	[RuleVersion(0)]
	public AmortCheckContext amortCheck() {
		AmortCheckContext _localctx = new AmortCheckContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_amortCheck);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 491; Match(T__37);
			State = 492; Match(AOCheck);
			State = 494;
			_la = _input.La(1);
			if (((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (Guid - 61)) | (1L << (DoubleQuotedString - 61)) | (1L << (SingleQuotedString - 61)))) != 0)) {
				{
				State = 493; aoQ();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AoQContext : ParserRuleContext {
		public IReadOnlyList<AoQAtomContext> aoQAtom() {
			return GetRuleContexts<AoQAtomContext>();
		}
		public AoQAtomContext aoQAtom(int i) {
			return GetRuleContext<AoQAtomContext>(i);
		}
		public AoQContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aoQ; } }
	}

	[RuleVersion(0)]
	public AoQContext aoQ() {
		AoQContext _localctx = new AoQContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_aoQ);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 496; aoQAtom();
			State = 501;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==Union) {
				{
				{
				State = 497; Match(Union);
				State = 498; aoQAtom();
				}
				}
				State = 503;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AoQAtomContext : ParserRuleContext {
		public ITerminalNode DoubleQuotedString() { return GetToken(ConsoleParser.DoubleQuotedString, 0); }
		public ITerminalNode Guid() { return GetToken(ConsoleParser.Guid, 0); }
		public ITerminalNode SingleQuotedString() { return GetToken(ConsoleParser.SingleQuotedString, 0); }
		public AoQAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aoQAtom; } }
	}

	[RuleVersion(0)]
	public AoQAtomContext aoQAtom() {
		AoQAtomContext _localctx = new AoQAtomContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_aoQAtom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 504;
			_la = _input.La(1);
			if ( !(((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (Guid - 61)) | (1L << (DoubleQuotedString - 61)) | (1L << (SingleQuotedString - 61)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return vouchersB_sempred((VouchersBContext)_localctx, predIndex);

		case 16: return details_sempred((DetailsContext)_localctx, predIndex);
		}
		return true;
	}
	private bool vouchersB_sempred(VouchersBContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 5);

		case 1: return Precpred(_ctx, 4);
		}
		return true;
	}
	private bool details_sempred(DetailsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 5);

		case 3: return Precpred(_ctx, 4);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3T\x1FD\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x3\x2\x3"+
		"\x2\x3\x2\x3\x2\x3\x2\x5\x2h\n\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4"+
		"\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x6\x5w\n\x5\r\x5\xE\x5x\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x6\x5\x81\n\x5\r\x5\xE\x5\x82\x5\x5"+
		"\x85\n\x5\x3\x6\x3\x6\x3\x6\a\x6\x8A\n\x6\f\x6\xE\x6\x8D\v\x6\x3\x6\x3"+
		"\x6\x3\x6\x5\x6\x92\n\x6\x3\x6\x3\x6\x5\x6\x96\n\x6\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x6\a\xA2\n\a\r\a\xE\a\xA3\x5\a\xA6\n"+
		"\a\x3\b\x3\b\x3\b\x3\b\x6\b\xAC\n\b\r\b\xE\b\xAD\x3\b\x5\b\xB1\n\b\x3"+
		"\t\x3\t\x3\t\x5\t\xB6\n\t\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\f\x3\f\a\f"+
		"\xC0\n\f\f\f\xE\f\xC3\v\f\x3\f\x3\f\x3\f\x5\f\xC8\n\f\x3\f\x5\f\xCB\n"+
		"\f\x5\f\xCD\n\f\x3\r\x3\r\x3\r\x3\r\x5\r\xD3\n\r\x3\xE\x3\xE\x3\xE\x5"+
		"\xE\xD8\n\xE\x3\xF\x3\xF\x5\xF\xDC\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\xE9\n\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\a\x10\xF1\n\x10\f\x10\xE\x10\xF4\v"+
		"\x10\x3\x11\x5\x11\xF7\n\x11\x3\x11\x5\x11\xFA\n\x11\x3\x11\x5\x11\xFD"+
		"\n\x11\x3\x11\x5\x11\x100\n\x11\x3\x11\x5\x11\x103\n\x11\x3\x11\x5\x11"+
		"\x106\n\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5"+
		"\x12\x110\n\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\a\x12\x118\n"+
		"\x12\f\x12\xE\x12\x11B\v\x12\x3\x13\x5\x13\x11E\n\x13\x3\x13\x5\x13\x121"+
		"\n\x13\x3\x13\x5\x13\x124\n\x13\x3\x13\x5\x13\x127\n\x13\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x12F\n\x14\x3\x15\x3\x15\x3\x15\x3"+
		"\x15\x3\x15\x5\x15\x136\n\x15\x3\x15\x3\x15\x3\x15\x5\x15\x13B\n\x15\x3"+
		"\x16\x3\x16\x3\x16\x5\x16\x140\n\x16\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17"+
		"\x146\n\x17\x3\x18\x3\x18\x3\x19\x5\x19\x14B\n\x19\x3\x19\x3\x19\x3\x1A"+
		"\x3\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x5\x1C\x15B\n\x1C\x3\x1D\x3\x1D\x5\x1D\x15F\n\x1D\x3\x1D\x5\x1D"+
		"\x162\n\x1D\x3\x1D\x5\x1D\x165\n\x1D\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x16A"+
		"\n\x1E\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x16F\n\x1F\x3\x1F\x3\x1F\x5\x1F\x173"+
		"\n\x1F\x3 \x3 \x3 \x5 \x178\n \x3 \x5 \x17B\n \x3!\x3!\x3!\x5!\x180\n"+
		"!\x3\"\x3\"\x3\"\x5\"\x185\n\"\x3\"\x5\"\x188\n\"\x3#\x3#\x3#\x5#\x18D"+
		"\n#\x3#\x3#\x5#\x191\n#\x3$\x3$\x3$\x5$\x196\n$\x3$\x5$\x199\n$\x3$\x5"+
		"$\x19C\n$\x3%\x3%\x3%\x5%\x1A1\n%\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x5&"+
		"\x1AB\n&\x3\'\x3\'\x5\'\x1AF\n\'\x3\'\x5\'\x1B2\n\'\x3\'\x5\'\x1B5\n\'"+
		"\x3(\x3(\x3(\x5(\x1BA\n(\x3)\x3)\x3)\x5)\x1BF\n)\x3)\x3)\x5)\x1C3\n)\x3"+
		"*\x3*\x3*\x5*\x1C8\n*\x3*\x5*\x1CB\n*\x3+\x3+\x3+\x5+\x1D0\n+\x3,\x3,"+
		"\x3,\x5,\x1D5\n,\x3,\x5,\x1D8\n,\x3-\x3-\x3-\x5-\x1DD\n-\x3-\x3-\x5-\x1E1"+
		"\n-\x3.\x3.\x3.\x5.\x1E6\n.\x3.\x5.\x1E9\n.\x3.\x5.\x1EC\n.\x3/\x3/\x3"+
		"/\x5/\x1F1\n/\x3\x30\x3\x30\x3\x30\a\x30\x1F6\n\x30\f\x30\xE\x30\x1F9"+
		"\v\x30\x3\x31\x3\x31\x3\x31\x2\x2\x4\x1E\"\x32\x2\x2\x4\x2\x6\x2\b\x2"+
		"\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E"+
		"\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2"+
		":\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2"+
		"X\x2Z\x2\\\x2^\x2`\x2\x2\x10\x3\x2)\x32\x3\x2OP\x3\x2\xE\xF\x3\x2\x10"+
		"\x19\x3\x2RS\x4\x2\x1D\x1D  \x3\x2MN\x4\x2\x12\x12\x14\x14\x4\x2$$SS\x3"+
		"\x2%&\x3\x2\x43\x44\x3\x2\x45\x46\x3\x2\x33\x34\x4\x2??KL\x234\x2g\x3"+
		"\x2\x2\x2\x4k\x3\x2\x2\x2\x6m\x3\x2\x2\x2\b\x84\x3\x2\x2\x2\n\x86\x3\x2"+
		"\x2\x2\f\xA5\x3\x2\x2\x2\xE\xB0\x3\x2\x2\x2\x10\xB2\x3\x2\x2\x2\x12\xB7"+
		"\x3\x2\x2\x2\x14\xBA\x3\x2\x2\x2\x16\xBD\x3\x2\x2\x2\x18\xD2\x3\x2\x2"+
		"\x2\x1A\xD7\x3\x2\x2\x2\x1C\xDB\x3\x2\x2\x2\x1E\xE8\x3\x2\x2\x2 \xF6\x3"+
		"\x2\x2\x2\"\x10F\x3\x2\x2\x2$\x11D\x3\x2\x2\x2&\x12E\x3\x2\x2\x2(\x13A"+
		"\x3\x2\x2\x2*\x13F\x3\x2\x2\x2,\x145\x3\x2\x2\x2.\x147\x3\x2\x2\x2\x30"+
		"\x14A\x3\x2\x2\x2\x32\x14E\x3\x2\x2\x2\x34\x150\x3\x2\x2\x2\x36\x15A\x3"+
		"\x2\x2\x2\x38\x15C\x3\x2\x2\x2:\x166\x3\x2\x2\x2<\x16B\x3\x2\x2\x2>\x174"+
		"\x3\x2\x2\x2@\x17C\x3\x2\x2\x2\x42\x181\x3\x2\x2\x2\x44\x189\x3\x2\x2"+
		"\x2\x46\x192\x3\x2\x2\x2H\x19D\x3\x2\x2\x2J\x1AA\x3\x2\x2\x2L\x1AC\x3"+
		"\x2\x2\x2N\x1B6\x3\x2\x2\x2P\x1BB\x3\x2\x2\x2R\x1C4\x3\x2\x2\x2T\x1CC"+
		"\x3\x2\x2\x2V\x1D1\x3\x2\x2\x2X\x1D9\x3\x2\x2\x2Z\x1E2\x3\x2\x2\x2\\\x1ED"+
		"\x3\x2\x2\x2^\x1F2\x3\x2\x2\x2`\x1FA\x3\x2\x2\x2\x62h\x5\x1C\xF\x2\x63"+
		"h\x5\x6\x4\x2\x64h\x5\x36\x1C\x2\x65h\x5J&\x2\x66h\x5\x4\x3\x2g\x62\x3"+
		"\x2\x2\x2g\x63\x3\x2\x2\x2g\x64\x3\x2\x2\x2g\x65\x3\x2\x2\x2g\x66\x3\x2"+
		"\x2\x2hi\x3\x2\x2\x2ij\a\x2\x2\x3j\x3\x3\x2\x2\x2kl\t\x2\x2\x2l\x5\x3"+
		"\x2\x2\x2mn\x5\x18\r\x2no\x5\x16\f\x2o\a\x3\x2\x2\x2pq\a\x3\x2\x2q\x85"+
		"\aJ\x2\x2rs\a\x4\x2\x2sv\x5\n\x6\x2tu\a\x5\x2\x2uw\x5\xE\b\x2vt\x3\x2"+
		"\x2\x2wx\x3\x2\x2\x2xv\x3\x2\x2\x2xy\x3\x2\x2\x2y\x85\x3\x2\x2\x2z{\a"+
		"\x6\x2\x2{|\aJ\x2\x2|}\a\a\x2\x2}\x80\x5\n\x6\x2~\x7F\a\x5\x2\x2\x7F\x81"+
		"\x5\xE\b\x2\x80~\x3\x2\x2\x2\x81\x82\x3\x2\x2\x2\x82\x80\x3\x2\x2\x2\x82"+
		"\x83\x3\x2\x2\x2\x83\x85\x3\x2\x2\x2\x84p\x3\x2\x2\x2\x84r\x3\x2\x2\x2"+
		"\x84z\x3\x2\x2\x2\x85\t\x3\x2\x2\x2\x86\x8B\x5\x10\t\x2\x87\x88\a\b\x2"+
		"\x2\x88\x8A\x5\x10\t\x2\x89\x87\x3\x2\x2\x2\x8A\x8D\x3\x2\x2\x2\x8B\x89"+
		"\x3\x2\x2\x2\x8B\x8C\x3\x2\x2\x2\x8C\x8E\x3\x2\x2\x2\x8D\x8B\x3\x2\x2"+
		"\x2\x8E\x91\a\b\x2\x2\x8F\x90\a\t\x2\x2\x90\x92\aO\x2\x2\x91\x8F\x3\x2"+
		"\x2\x2\x91\x92\x3\x2\x2\x2\x92\x95\x3\x2\x2\x2\x93\x94\a\n\x2\x2\x94\x96"+
		"\aO\x2\x2\x95\x93\x3\x2\x2\x2\x95\x96\x3\x2\x2\x2\x96\v\x3\x2\x2\x2\x97"+
		"\x98\a\v\x2\x2\x98\xA6\aJ\x2\x2\x99\x9A\a\f\x2\x2\x9A\xA6\x5\xE\b\x2\x9B"+
		"\x9C\a\r\x2\x2\x9C\x9D\aJ\x2\x2\x9D\x9E\a\a\x2\x2\x9E\xA1\x5\n\x6\x2\x9F"+
		"\xA0\a\x5\x2\x2\xA0\xA2\x5\xE\b\x2\xA1\x9F\x3\x2\x2\x2\xA2\xA3\x3\x2\x2"+
		"\x2\xA3\xA1\x3\x2\x2\x2\xA3\xA4\x3\x2\x2\x2\xA4\xA6\x3\x2\x2\x2\xA5\x97"+
		"\x3\x2\x2\x2\xA5\x99\x3\x2\x2\x2\xA5\x9B\x3\x2\x2\x2\xA6\r\x3\x2\x2\x2"+
		"\xA7\xA8\x5\x12\n\x2\xA8\xAB\x5\xE\b\x2\xA9\xAA\a\b\x2\x2\xAA\xAC\x5\xE"+
		"\b\x2\xAB\xA9\x3\x2\x2\x2\xAC\xAD\x3\x2\x2\x2\xAD\xAB\x3\x2\x2\x2\xAD"+
		"\xAE\x3\x2\x2\x2\xAE\xB1\x3\x2\x2\x2\xAF\xB1\x5\x10\t\x2\xB0\xA7\x3\x2"+
		"\x2\x2\xB0\xAF\x3\x2\x2\x2\xB1\xF\x3\x2\x2\x2\xB2\xB3\x5\x12\n\x2\xB3"+
		"\xB5\x5\x6\x4\x2\xB4\xB6\x5\x14\v\x2\xB5\xB4\x3\x2\x2\x2\xB5\xB6\x3\x2"+
		"\x2\x2\xB6\x11\x3\x2\x2\x2\xB7\xB8\aJ\x2\x2\xB8\xB9\a\a\x2\x2\xB9\x13"+
		"\x3\x2\x2\x2\xBA\xBB\aQ\x2\x2\xBB\xBC\t\x3\x2\x2\xBC\x15\x3\x2\x2\x2\xBD"+
		"\xC1\t\x4\x2\x2\xBE\xC0\t\x5\x2\x2\xBF\xBE\x3\x2\x2\x2\xC0\xC3\x3\x2\x2"+
		"\x2\xC1\xBF\x3\x2\x2\x2\xC1\xC2\x3\x2\x2\x2\xC2\xCC\x3\x2\x2\x2\xC3\xC1"+
		"\x3\x2\x2\x2\xC4\xCA\a\x1A\x2\x2\xC5\xC7\a\x1B\x2\x2\xC6\xC8\x5(\x15\x2"+
		"\xC7\xC6\x3\x2\x2\x2\xC7\xC8\x3\x2\x2\x2\xC8\xC9\x3\x2\x2\x2\xC9\xCB\a"+
		"\x1C\x2\x2\xCA\xC5\x3\x2\x2\x2\xCA\xCB\x3\x2\x2\x2\xCB\xCD\x3\x2\x2\x2"+
		"\xCC\xC4\x3\x2\x2\x2\xCC\xCD\x3\x2\x2\x2\xCD\x17\x3\x2\x2\x2\xCE\xCF\x5"+
		"\x1C\xF\x2\xCF\xD0\x5\x1A\xE\x2\xD0\xD3\x3\x2\x2\x2\xD1\xD3\x5 \x11\x2"+
		"\xD2\xCE\x3\x2\x2\x2\xD2\xD1\x3\x2\x2\x2\xD3\x19\x3\x2\x2\x2\xD4\xD8\a"+
		"\x1D\x2\x2\xD5\xD6\a\a\x2\x2\xD6\xD8\x5\"\x12\x2\xD7\xD4\x3\x2\x2\x2\xD7"+
		"\xD5\x3\x2\x2\x2\xD8\x1B\x3\x2\x2\x2\xD9\xDC\x5\x1E\x10\x2\xDA\xDC\x5"+
		" \x11\x2\xDB\xD9\x3\x2\x2\x2\xDB\xDA\x3\x2\x2\x2\xDC\x1D\x3\x2\x2\x2\xDD"+
		"\xDE\b\x10\x1\x2\xDE\xDF\t\x6\x2\x2\xDF\xE9\x5\x1E\x10\x5\xE0\xE1\a\x1E"+
		"\x2\x2\xE1\xE2\x5 \x11\x2\xE2\xE3\a\x1F\x2\x2\xE3\xE9\x3\x2\x2\x2\xE4"+
		"\xE5\a\x1E\x2\x2\xE5\xE6\x5\x1E\x10\x2\xE6\xE7\a\x1F\x2\x2\xE7\xE9\x3"+
		"\x2\x2\x2\xE8\xDD\x3\x2\x2\x2\xE8\xE0\x3\x2\x2\x2\xE8\xE4\x3\x2\x2\x2"+
		"\xE9\xF2\x3\x2\x2\x2\xEA\xEB\f\a\x2\x2\xEB\xEC\aQ\x2\x2\xEC\xF1\x5\x1E"+
		"\x10\b\xED\xEE\f\x6\x2\x2\xEE\xEF\t\x6\x2\x2\xEF\xF1\x5\x1E\x10\a\xF0"+
		"\xEA\x3\x2\x2\x2\xF0\xED\x3\x2\x2\x2\xF1\xF4\x3\x2\x2\x2\xF2\xF0\x3\x2"+
		"\x2\x2\xF2\xF3\x3\x2\x2\x2\xF3\x1F\x3\x2\x2\x2\xF4\xF2\x3\x2\x2\x2\xF5"+
		"\xF7\x5\"\x12\x2\xF6\xF5\x3\x2\x2\x2\xF6\xF7\x3\x2\x2\x2\xF7\xF9\x3\x2"+
		"\x2\x2\xF8\xFA\t\a\x2\x2\xF9\xF8\x3\x2\x2\x2\xF9\xFA\x3\x2\x2\x2\xFA\xFC"+
		"\x3\x2\x2\x2\xFB\xFD\x5&\x14\x2\xFC\xFB\x3\x2\x2\x2\xFC\xFD\x3\x2\x2\x2"+
		"\xFD\xFF\x3\x2\x2\x2\xFE\x100\aJ\x2\x2\xFF\xFE\x3\x2\x2\x2\xFF\x100\x3"+
		"\x2\x2\x2\x100\x102\x3\x2\x2\x2\x101\x103\aI\x2\x2\x102\x101\x3\x2\x2"+
		"\x2\x102\x103\x3\x2\x2\x2\x103\x105\x3\x2\x2\x2\x104\x106\aH\x2\x2\x105"+
		"\x104\x3\x2\x2\x2\x105\x106\x3\x2\x2\x2\x106!\x3\x2\x2\x2\x107\x108\b"+
		"\x12\x1\x2\x108\x109\t\x6\x2\x2\x109\x110\x5\"\x12\x5\x10A\x110\x5$\x13"+
		"\x2\x10B\x10C\a!\x2\x2\x10C\x10D\x5\"\x12\x2\x10D\x10E\a\"\x2\x2\x10E"+
		"\x110\x3\x2\x2\x2\x10F\x107\x3\x2\x2\x2\x10F\x10A\x3\x2\x2\x2\x10F\x10B"+
		"\x3\x2\x2\x2\x110\x119\x3\x2\x2\x2\x111\x112\f\a\x2\x2\x112\x113\aQ\x2"+
		"\x2\x113\x118\x5\"\x12\b\x114\x115\f\x6\x2\x2\x115\x116\t\x6\x2\x2\x116"+
		"\x118\x5\"\x12\a\x117\x111\x3\x2\x2\x2\x117\x114\x3\x2\x2\x2\x118\x11B"+
		"\x3\x2\x2\x2\x119\x117\x3\x2\x2\x2\x119\x11A\x3\x2\x2\x2\x11A#\x3\x2\x2"+
		"\x2\x11B\x119\x3\x2\x2\x2\x11C\x11E\t\b\x2\x2\x11D\x11C\x3\x2\x2\x2\x11D"+
		"\x11E\x3\x2\x2\x2\x11E\x120\x3\x2\x2\x2\x11F\x121\aL\x2\x2\x120\x11F\x3"+
		"\x2\x2\x2\x120\x121\x3\x2\x2\x2\x121\x123\x3\x2\x2\x2\x122\x124\aK\x2"+
		"\x2\x123\x122\x3\x2\x2\x2\x123\x124\x3\x2\x2\x2\x124\x126\x3\x2\x2\x2"+
		"\x125\x127\t\t\x2\x2\x126\x125\x3\x2\x2\x2\x126\x127\x3\x2\x2\x2\x127"+
		"%\x3\x2\x2\x2\x128\x12F\a#\x2\x2\x129\x12F\x5(\x15\x2\x12A\x12B\a\x1B"+
		"\x2\x2\x12B\x12C\x5(\x15\x2\x12C\x12D\a\x1C\x2\x2\x12D\x12F\x3\x2\x2\x2"+
		"\x12E\x128\x3\x2\x2\x2\x12E\x129\x3\x2\x2\x2\x12E\x12A\x3\x2\x2\x2\x12F"+
		"\'\x3\x2\x2\x2\x130\x13B\a@\x2\x2\x131\x13B\a\x41\x2\x2\x132\x133\x5,"+
		"\x17\x2\x133\x135\t\n\x2\x2\x134\x136\x5,\x17\x2\x135\x134\x3\x2\x2\x2"+
		"\x135\x136\x3\x2\x2\x2\x136\x13B\x3\x2\x2\x2\x137\x138\t\n\x2\x2\x138"+
		"\x13B\x5,\x17\x2\x139\x13B\x5,\x17\x2\x13A\x130\x3\x2\x2\x2\x13A\x131"+
		"\x3\x2\x2\x2\x13A\x132\x3\x2\x2\x2\x13A\x137\x3\x2\x2\x2\x13A\x139\x3"+
		"\x2\x2\x2\x13B)\x3\x2\x2\x2\x13C\x140\a@\x2\x2\x13D\x140\a#\x2\x2\x13E"+
		"\x140\x5,\x17\x2\x13F\x13C\x3\x2\x2\x2\x13F\x13D\x3\x2\x2\x2\x13F\x13E"+
		"\x3\x2\x2\x2\x140+\x3\x2\x2\x2\x141\x146\x5.\x18\x2\x142\x146\x5\x30\x19"+
		"\x2\x143\x146\x5\x32\x1A\x2\x144\x146\x5\x34\x1B\x2\x145\x141\x3\x2\x2"+
		"\x2\x145\x142\x3\x2\x2\x2\x145\x143\x3\x2\x2\x2\x145\x144\x3\x2\x2\x2"+
		"\x146-\x3\x2\x2\x2\x147\x148\a\x42\x2\x2\x148/\x3\x2\x2\x2\x149\x14B\t"+
		"\v\x2\x2\x14A\x149\x3\x2\x2\x2\x14A\x14B\x3\x2\x2\x2\x14B\x14C\x3\x2\x2"+
		"\x2\x14C\x14D\t\f\x2\x2\x14D\x31\x3\x2\x2\x2\x14E\x14F\aG\x2\x2\x14F\x33"+
		"\x3\x2\x2\x2\x150\x151\t\r\x2\x2\x151\x35\x3\x2\x2\x2\x152\x15B\x5\x38"+
		"\x1D\x2\x153\x15B\x5:\x1E\x2\x154\x15B\x5<\x1F\x2\x155\x15B\x5> \x2\x156"+
		"\x15B\x5\x42\"\x2\x157\x15B\x5\x44#\x2\x158\x15B\x5\x46$\x2\x159\x15B"+
		"\x5H%\x2\x15A\x152\x3\x2\x2\x2\x15A\x153\x3\x2\x2\x2\x15A\x154\x3\x2\x2"+
		"\x2\x15A\x155\x3\x2\x2\x2\x15A\x156\x3\x2\x2\x2\x15A\x157\x3\x2\x2\x2"+
		"\x15A\x158\x3\x2\x2\x2\x15A\x159\x3\x2\x2\x2\x15B\x37\x3\x2\x2\x2\x15C"+
		"\x15E\a\'\x2\x2\x15D\x15F\t\xE\x2\x2\x15E\x15D\x3\x2\x2\x2\x15E\x15F\x3"+
		"\x2\x2\x2\x15F\x161\x3\x2\x2\x2\x160\x162\x5*\x16\x2\x161\x160\x3\x2\x2"+
		"\x2\x161\x162\x3\x2\x2\x2\x162\x164\x3\x2\x2\x2\x163\x165\x5^\x30\x2\x164"+
		"\x163\x3\x2\x2\x2\x164\x165\x3\x2\x2\x2\x165\x39\x3\x2\x2\x2\x166\x167"+
		"\a\'\x2\x2\x167\x169\a\x35\x2\x2\x168\x16A\x5^\x30\x2\x169\x168\x3\x2"+
		"\x2\x2\x169\x16A\x3\x2\x2\x2\x16A;\x3\x2\x2\x2\x16B\x16C\a\'\x2\x2\x16C"+
		"\x16E\a\x36\x2\x2\x16D\x16F\x5^\x30\x2\x16E\x16D\x3\x2\x2\x2\x16E\x16F"+
		"\x3\x2\x2\x2\x16F\x172\x3\x2\x2\x2\x170\x171\a\a\x2\x2\x171\x173\x5\x18"+
		"\r\x2\x172\x170\x3\x2\x2\x2\x172\x173\x3\x2\x2\x2\x173=\x3\x2\x2\x2\x174"+
		"\x175\a\'\x2\x2\x175\x177\a\x37\x2\x2\x176\x178\x5^\x30\x2\x177\x176\x3"+
		"\x2\x2\x2\x177\x178\x3\x2\x2\x2\x178\x17A\x3\x2\x2\x2\x179\x17B\x5&\x14"+
		"\x2\x17A\x179\x3\x2\x2\x2\x17A\x17B\x3\x2\x2\x2\x17B?\x3\x2\x2\x2\x17C"+
		"\x17D\a\'\x2\x2\x17D\x17F\a\x38\x2\x2\x17E\x180\x5^\x30\x2\x17F\x17E\x3"+
		"\x2\x2\x2\x17F\x180\x3\x2\x2\x2\x180\x41\x3\x2\x2\x2\x181\x182\a\'\x2"+
		"\x2\x182\x184\a:\x2\x2\x183\x185\x5^\x30\x2\x184\x183\x3\x2\x2\x2\x184"+
		"\x185\x3\x2\x2\x2\x185\x187\x3\x2\x2\x2\x186\x188\x5&\x14\x2\x187\x186"+
		"\x3\x2\x2\x2\x187\x188\x3\x2\x2\x2\x188\x43\x3\x2\x2\x2\x189\x18A\a\'"+
		"\x2\x2\x18A\x18C\a;\x2\x2\x18B\x18D\x5^\x30\x2\x18C\x18B\x3\x2\x2\x2\x18C"+
		"\x18D\x3\x2\x2\x2\x18D\x190\x3\x2\x2\x2\x18E\x18F\a\a\x2\x2\x18F\x191"+
		"\x5\x18\r\x2\x190\x18E\x3\x2\x2\x2\x190\x191\x3\x2\x2\x2\x191\x45\x3\x2"+
		"\x2\x2\x192\x193\a\'\x2\x2\x193\x195\a<\x2\x2\x194\x196\a=\x2\x2\x195"+
		"\x194\x3\x2\x2\x2\x195\x196\x3\x2\x2\x2\x196\x198\x3\x2\x2\x2\x197\x199"+
		"\x5^\x30\x2\x198\x197\x3\x2\x2\x2\x198\x199\x3\x2\x2\x2\x199\x19B\x3\x2"+
		"\x2\x2\x19A\x19C\x5&\x14\x2\x19B\x19A\x3\x2\x2\x2\x19B\x19C\x3\x2\x2\x2"+
		"\x19CG\x3\x2\x2\x2\x19D\x19E\a\'\x2\x2\x19E\x1A0\a>\x2\x2\x19F\x1A1\x5"+
		"^\x30\x2\x1A0\x19F\x3\x2\x2\x2\x1A0\x1A1\x3\x2\x2\x2\x1A1I\x3\x2\x2\x2"+
		"\x1A2\x1AB\x5L\'\x2\x1A3\x1AB\x5N(\x2\x1A4\x1AB\x5P)\x2\x1A5\x1AB\x5R"+
		"*\x2\x1A6\x1AB\x5V,\x2\x1A7\x1AB\x5X-\x2\x1A8\x1AB\x5Z.\x2\x1A9\x1AB\x5"+
		"\\/\x2\x1AA\x1A2\x3\x2\x2\x2\x1AA\x1A3\x3\x2\x2\x2\x1AA\x1A4\x3\x2\x2"+
		"\x2\x1AA\x1A5\x3\x2\x2\x2\x1AA\x1A6\x3\x2\x2\x2\x1AA\x1A7\x3\x2\x2\x2"+
		"\x1AA\x1A8\x3\x2\x2\x2\x1AA\x1A9\x3\x2\x2\x2\x1ABK\x3\x2\x2\x2\x1AC\x1AE"+
		"\a(\x2\x2\x1AD\x1AF\t\xE\x2\x2\x1AE\x1AD\x3\x2\x2\x2\x1AE\x1AF\x3\x2\x2"+
		"\x2\x1AF\x1B1\x3\x2\x2\x2\x1B0\x1B2\x5*\x16\x2\x1B1\x1B0\x3\x2\x2\x2\x1B1"+
		"\x1B2\x3\x2\x2\x2\x1B2\x1B4\x3\x2\x2\x2\x1B3\x1B5\x5^\x30\x2\x1B4\x1B3"+
		"\x3\x2\x2\x2\x1B4\x1B5\x3\x2\x2\x2\x1B5M\x3\x2\x2\x2\x1B6\x1B7\a(\x2\x2"+
		"\x1B7\x1B9\a\x35\x2\x2\x1B8\x1BA\x5^\x30\x2\x1B9\x1B8\x3\x2\x2\x2\x1B9"+
		"\x1BA\x3\x2\x2\x2\x1BAO\x3\x2\x2\x2\x1BB\x1BC\a(\x2\x2\x1BC\x1BE\a\x36"+
		"\x2\x2\x1BD\x1BF\x5^\x30\x2\x1BE\x1BD\x3\x2\x2\x2\x1BE\x1BF\x3\x2\x2\x2"+
		"\x1BF\x1C2\x3\x2\x2\x2\x1C0\x1C1\a\a\x2\x2\x1C1\x1C3\x5\x18\r\x2\x1C2"+
		"\x1C0\x3\x2\x2\x2\x1C2\x1C3\x3\x2\x2\x2\x1C3Q\x3\x2\x2\x2\x1C4\x1C5\a"+
		"(\x2\x2\x1C5\x1C7\a\x37\x2\x2\x1C6\x1C8\x5^\x30\x2\x1C7\x1C6\x3\x2\x2"+
		"\x2\x1C7\x1C8\x3\x2\x2\x2\x1C8\x1CA\x3\x2\x2\x2\x1C9\x1CB\x5&\x14\x2\x1CA"+
		"\x1C9\x3\x2\x2\x2\x1CA\x1CB\x3\x2\x2\x2\x1CBS\x3\x2\x2\x2\x1CC\x1CD\a"+
		"(\x2\x2\x1CD\x1CF\a\x39\x2\x2\x1CE\x1D0\x5^\x30\x2\x1CF\x1CE\x3\x2\x2"+
		"\x2\x1CF\x1D0\x3\x2\x2\x2\x1D0U\x3\x2\x2\x2\x1D1\x1D2\a(\x2\x2\x1D2\x1D4"+
		"\a:\x2\x2\x1D3\x1D5\x5^\x30\x2\x1D4\x1D3\x3\x2\x2\x2\x1D4\x1D5\x3\x2\x2"+
		"\x2\x1D5\x1D7\x3\x2\x2\x2\x1D6\x1D8\x5&\x14\x2\x1D7\x1D6\x3\x2\x2\x2\x1D7"+
		"\x1D8\x3\x2\x2\x2\x1D8W\x3\x2\x2\x2\x1D9\x1DA\a(\x2\x2\x1DA\x1DC\a;\x2"+
		"\x2\x1DB\x1DD\x5^\x30\x2\x1DC\x1DB\x3\x2\x2\x2\x1DC\x1DD\x3\x2\x2\x2\x1DD"+
		"\x1E0\x3\x2\x2\x2\x1DE\x1DF\a\a\x2\x2\x1DF\x1E1\x5\x18\r\x2\x1E0\x1DE"+
		"\x3\x2\x2\x2\x1E0\x1E1\x3\x2\x2\x2\x1E1Y\x3\x2\x2\x2\x1E2\x1E3\a(\x2\x2"+
		"\x1E3\x1E5\a<\x2\x2\x1E4\x1E6\a=\x2\x2\x1E5\x1E4\x3\x2\x2\x2\x1E5\x1E6"+
		"\x3\x2\x2\x2\x1E6\x1E8\x3\x2\x2\x2\x1E7\x1E9\x5^\x30\x2\x1E8\x1E7\x3\x2"+
		"\x2\x2\x1E8\x1E9\x3\x2\x2\x2\x1E9\x1EB\x3\x2\x2\x2\x1EA\x1EC\x5&\x14\x2"+
		"\x1EB\x1EA\x3\x2\x2\x2\x1EB\x1EC\x3\x2\x2\x2\x1EC[\x3\x2\x2\x2\x1ED\x1EE"+
		"\a(\x2\x2\x1EE\x1F0\a>\x2\x2\x1EF\x1F1\x5^\x30\x2\x1F0\x1EF\x3\x2\x2\x2"+
		"\x1F0\x1F1\x3\x2\x2\x2\x1F1]\x3\x2\x2\x2\x1F2\x1F7\x5`\x31\x2\x1F3\x1F4"+
		"\aR\x2\x2\x1F4\x1F6\x5`\x31\x2\x1F5\x1F3\x3\x2\x2\x2\x1F6\x1F9\x3\x2\x2"+
		"\x2\x1F7\x1F5\x3\x2\x2\x2\x1F7\x1F8\x3\x2\x2\x2\x1F8_\x3\x2\x2\x2\x1F9"+
		"\x1F7\x3\x2\x2\x2\x1FA\x1FB\t\xF\x2\x2\x1FB\x61\x3\x2\x2\x2Pgx\x82\x84"+
		"\x8B\x91\x95\xA3\xA5\xAD\xB0\xB5\xC1\xC7\xCA\xCC\xD2\xD7\xDB\xE8\xF0\xF2"+
		"\xF6\xF9\xFC\xFF\x102\x105\x10F\x117\x119\x11D\x120\x123\x126\x12E\x135"+
		"\x13A\x13F\x145\x14A\x15A\x15E\x161\x164\x169\x16E\x172\x177\x17A\x17F"+
		"\x184\x187\x18C\x190\x195\x198\x19B\x1A0\x1AA\x1AE\x1B1\x1B4\x1B9\x1BE"+
		"\x1C2\x1C7\x1CA\x1CF\x1D4\x1D7\x1DC\x1E0\x1E5\x1E8\x1EB\x1F0\x1F7";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace AccountingServer.Console
