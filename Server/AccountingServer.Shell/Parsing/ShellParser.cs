//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.4.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\b1f6c1c4\Documents\GitHub\ProfessionalAccounting\Server\AccountingServer.QueryGeneration\Shell.g4 by ANTLR 4.4.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace AccountingServer.Shell.Parsing {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.4.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class ShellParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, ChartArea=34, Series=35, Ignore=36, Launch=37, Connect=38, 
		Shutdown=39, Backup=40, Help=41, Titles=42, Exit=43, Check=44, EditNamedQueries=45, 
		AOAll=46, AOList=47, AOQuery=48, AORegister=49, AOUnregister=50, AORecalc=51, 
		AOResetSoft=52, AOResetHard=53, AOResetMixed=54, AOApply=55, AOCollapse=56, 
		AOCheck=57, SubtotalFields=58, Guid=59, RangeNull=60, RangeAllNotNull=61, 
		RangeAYear=62, RangeAMonth=63, RangeDeltaMonth=64, RangeADay=65, RangeDeltaDay=66, 
		RangeDeltaWeek=67, VoucherType=68, CaretQuotedString=69, PercentQuotedString=70, 
		DollarQuotedString=71, DoubleQuotedString=72, SingleQuotedString=73, DetailTitle=74, 
		DetailTitleSubTitle=75, Float=76, Percent=77, Intersect=78, Union=79, 
		Substract=80, WS=81;
	public const int
		RULE_commandEOF = 0, RULE_command = 1, RULE_autoCommand = 2, RULE_otherCommand = 3, 
		RULE_chart = 4, RULE_chartLevels = 5, RULE_chartLevel = 6, RULE_report = 7, 
		RULE_namedQuery = 8, RULE_namedQueries = 9, RULE_namedQ = 10, RULE_namedQueryTemplateR = 11, 
		RULE_name = 12, RULE_coef = 13, RULE_groupedQuery = 14, RULE_subtotal = 15, 
		RULE_subtotalAggr = 16, RULE_voucherDetailQuery = 17, RULE_emit = 18, 
		RULE_vouchers = 19, RULE_vouchersB = 20, RULE_voucherQuery = 21, RULE_details = 22, 
		RULE_detailQuery = 23, RULE_range = 24, RULE_rangeCore = 25, RULE_rangePoint = 26, 
		RULE_rangeCertainPoint = 27, RULE_rangeYear = 28, RULE_rangeMonth = 29, 
		RULE_rangeWeek = 30, RULE_rangeDay = 31, RULE_asset = 32, RULE_assetList = 33, 
		RULE_assetQuery = 34, RULE_assetRegister = 35, RULE_assetUnregister = 36, 
		RULE_assetRedep = 37, RULE_assetResetSoft = 38, RULE_assetResetMixed = 39, 
		RULE_assetResetHard = 40, RULE_assetApply = 41, RULE_assetCheck = 42, 
		RULE_amort = 43, RULE_amortList = 44, RULE_amortQuery = 45, RULE_amortRegister = 46, 
		RULE_amortUnregister = 47, RULE_amortReamo = 48, RULE_amortResetSoft = 49, 
		RULE_amortResetMixed = 50, RULE_amortApply = 51, RULE_amortCheck = 52, 
		RULE_distributedQ = 53, RULE_distributedQAtom = 54, RULE_carry = 55, RULE_carryMonthResetHard = 56, 
		RULE_carryMonth = 57, RULE_carryYearResetHard = 58, RULE_carryYear = 59;
	public static readonly string[] ruleNames = {
		"commandEOF", "command", "autoCommand", "otherCommand", "chart", "chartLevels", 
		"chartLevel", "report", "namedQuery", "namedQueries", "namedQ", "namedQueryTemplateR", 
		"name", "coef", "groupedQuery", "subtotal", "subtotalAggr", "voucherDetailQuery", 
		"emit", "vouchers", "vouchersB", "voucherQuery", "details", "detailQuery", 
		"range", "rangeCore", "rangePoint", "rangeCertainPoint", "rangeYear", 
		"rangeMonth", "rangeWeek", "rangeDay", "asset", "assetList", "assetQuery", 
		"assetRegister", "assetUnregister", "assetRedep", "assetResetSoft", "assetResetMixed", 
		"assetResetHard", "assetApply", "assetCheck", "amort", "amortList", "amortQuery", 
		"amortRegister", "amortUnregister", "amortReamo", "amortResetSoft", "amortResetMixed", 
		"amortApply", "amortCheck", "distributedQ", "distributedQAtom", "carry", 
		"carryMonthResetHard", "carryMonth", "carryYearResetHard", "carryYear"
	};

	private static readonly string[] _LiteralNames = {
		null, "'ch'", "';'", "':'", "'='", "'rp'", "'Rp'", "'s'", "'/'", "'//'", 
		"'::'", "'|'", "'`'", "'``'", "'!'", "'D'", "'[]'", "'['", "']'", "'A'", 
		"'{'", "'}'", "'E'", "'('", "')'", "'>'", "'<'", "'~'", "'a'", "'o'", 
		"'[['", "']]'", "'ca'", "'caa'", "'chartArea'", "'series'", "'ignore'", 
		null, null, null, "'backup'", null, null, "'exit'", null, "'nq'", "'-all'", 
		null, null, null, null, null, "'-reset-soft'", "'-reset-hard'", "'-reset-mixed'", 
		null, null, "'-chk'", null, null, "'null'", "'~null'", null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "'*'", "'+'", "'-'", "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "ChartArea", 
		"Series", "Ignore", "Launch", "Connect", "Shutdown", "Backup", "Help", 
		"Titles", "Exit", "Check", "EditNamedQueries", "AOAll", "AOList", "AOQuery", 
		"AORegister", "AOUnregister", "AORecalc", "AOResetSoft", "AOResetHard", 
		"AOResetMixed", "AOApply", "AOCollapse", "AOCheck", "SubtotalFields", 
		"Guid", "RangeNull", "RangeAllNotNull", "RangeAYear", "RangeAMonth", "RangeDeltaMonth", 
		"RangeADay", "RangeDeltaDay", "RangeDeltaWeek", "VoucherType", "CaretQuotedString", 
		"PercentQuotedString", "DollarQuotedString", "DoubleQuotedString", "SingleQuotedString", 
		"DetailTitle", "DetailTitleSubTitle", "Float", "Percent", "Intersect", 
		"Union", "Substract", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Shell.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public ShellParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CommandEOFContext : ParserRuleContext {
		public CommandContext command() {
			return GetRuleContext<CommandContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(ShellParser.Eof, 0); }
		public CommandEOFContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandEOF; } }
	}

	[RuleVersion(0)]
	public CommandEOFContext commandEOF() {
		CommandEOFContext _localctx = new CommandEOFContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_commandEOF);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120; command();
			State = 121; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		public AssetContext asset() {
			return GetRuleContext<AssetContext>(0);
		}
		public GroupedQueryContext groupedQuery() {
			return GetRuleContext<GroupedQueryContext>(0);
		}
		public ChartContext chart() {
			return GetRuleContext<ChartContext>(0);
		}
		public AmortContext amort() {
			return GetRuleContext<AmortContext>(0);
		}
		public AutoCommandContext autoCommand() {
			return GetRuleContext<AutoCommandContext>(0);
		}
		public OtherCommandContext otherCommand() {
			return GetRuleContext<OtherCommandContext>(0);
		}
		public CarryContext carry() {
			return GetRuleContext<CarryContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public ReportContext report() {
			return GetRuleContext<ReportContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_command);
		try {
			State = 132;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 123; autoCommand();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 124; vouchers();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 125; groupedQuery();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 126; chart();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 127; report();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 128; asset();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 129; amort();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 130; carry();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 131; otherCommand();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AutoCommandContext : ParserRuleContext {
		public ITerminalNode DollarQuotedString() { return GetToken(ShellParser.DollarQuotedString, 0); }
		public ITerminalNode SingleQuotedString(int i) {
			return GetToken(ShellParser.SingleQuotedString, i);
		}
		public IReadOnlyList<ITerminalNode> SingleQuotedString() { return GetTokens(ShellParser.SingleQuotedString); }
		public AutoCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_autoCommand; } }
	}

	[RuleVersion(0)]
	public AutoCommandContext autoCommand() {
		AutoCommandContext _localctx = new AutoCommandContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_autoCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134; Match(DollarQuotedString);
			State = 138;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==SingleQuotedString) {
				{
				{
				State = 135; Match(SingleQuotedString);
				}
				}
				State = 140;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherCommandContext : ParserRuleContext {
		public ITerminalNode DollarQuotedString() { return GetToken(ShellParser.DollarQuotedString, 0); }
		public ITerminalNode Connect() { return GetToken(ShellParser.Connect, 0); }
		public ITerminalNode Backup() { return GetToken(ShellParser.Backup, 0); }
		public ITerminalNode EditNamedQueries() { return GetToken(ShellParser.EditNamedQueries, 0); }
		public ITerminalNode Shutdown() { return GetToken(ShellParser.Shutdown, 0); }
		public ITerminalNode Help() { return GetToken(ShellParser.Help, 0); }
		public ITerminalNode Check() { return GetToken(ShellParser.Check, 0); }
		public ITerminalNode Launch() { return GetToken(ShellParser.Launch, 0); }
		public ITerminalNode Exit() { return GetToken(ShellParser.Exit, 0); }
		public ITerminalNode Titles() { return GetToken(ShellParser.Titles, 0); }
		public OtherCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherCommand; } }
	}

	[RuleVersion(0)]
	public OtherCommandContext otherCommand() {
		OtherCommandContext _localctx = new OtherCommandContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_otherCommand);
		int _la;
		try {
			State = 153;
			switch (_input.La(1)) {
			case EditNamedQueries:
				EnterOuterAlt(_localctx, 1);
				{
				State = 141; Match(EditNamedQueries);
				}
				break;
			case Check:
				EnterOuterAlt(_localctx, 2);
				{
				State = 142; Match(Check);
				}
				break;
			case Titles:
				EnterOuterAlt(_localctx, 3);
				{
				State = 143; Match(Titles);
				}
				break;
			case Launch:
				EnterOuterAlt(_localctx, 4);
				{
				State = 144; Match(Launch);
				}
				break;
			case Connect:
				EnterOuterAlt(_localctx, 5);
				{
				State = 145; Match(Connect);
				}
				break;
			case Shutdown:
				EnterOuterAlt(_localctx, 6);
				{
				State = 146; Match(Shutdown);
				}
				break;
			case Backup:
				EnterOuterAlt(_localctx, 7);
				{
				State = 147; Match(Backup);
				}
				break;
			case Help:
				EnterOuterAlt(_localctx, 8);
				{
				State = 148; Match(Help);
				State = 150;
				_la = _input.La(1);
				if (_la==DollarQuotedString) {
					{
					State = 149; Match(DollarQuotedString);
					}
				}

				}
				break;
			case Exit:
				EnterOuterAlt(_localctx, 9);
				{
				State = 152; Match(Exit);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChartContext : ParserRuleContext {
		public NamedQueryContext namedQuery() {
			return GetRuleContext<NamedQueryContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ChartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chart; } }
	}

	[RuleVersion(0)]
	public ChartContext chart() {
		ChartContext _localctx = new ChartContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_chart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; Match(T__0);
			State = 156; namedQuery();
			State = 158;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__15 - 4)) | (1L << (T__16 - 4)) | (1L << (T__26 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 157; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChartLevelsContext : ParserRuleContext {
		public ChartLevelContext chartLevel(int i) {
			return GetRuleContext<ChartLevelContext>(i);
		}
		public IReadOnlyList<ChartLevelContext> chartLevel() {
			return GetRuleContexts<ChartLevelContext>();
		}
		public ChartLevelsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chartLevels; } }
	}

	[RuleVersion(0)]
	public ChartLevelsContext chartLevels() {
		ChartLevelsContext _localctx = new ChartLevelsContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_chartLevels);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; chartLevel();
			State = 165;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__1) {
				{
				{
				State = 161; Match(T__1);
				State = 162; chartLevel();
				}
				}
				State = 167;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChartLevelContext : ParserRuleContext {
		public ITerminalNode Series() { return GetToken(ShellParser.Series, 0); }
		public ITerminalNode SingleQuotedString(int i) {
			return GetToken(ShellParser.SingleQuotedString, i);
		}
		public ITerminalNode Ignore() { return GetToken(ShellParser.Ignore, 0); }
		public IReadOnlyList<ITerminalNode> SingleQuotedString() { return GetTokens(ShellParser.SingleQuotedString); }
		public ITerminalNode ChartArea() { return GetToken(ShellParser.ChartArea, 0); }
		public ChartLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chartLevel; } }
	}

	[RuleVersion(0)]
	public ChartLevelContext chartLevel() {
		ChartLevelContext _localctx = new ChartLevelContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_chartLevel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ChartArea) | (1L << Series) | (1L << Ignore))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 178;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 169; Match(T__2);
				State = 175;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==SingleQuotedString) {
					{
					{
					State = 170; Match(SingleQuotedString);
					State = 171; Match(T__3);
					State = 172; Match(SingleQuotedString);
					}
					}
					State = 177;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReportContext : ParserRuleContext {
		public IToken Op;
		public IToken Sheer;
		public NamedQueryContext namedQuery() {
			return GetRuleContext<NamedQueryContext>(0);
		}
		public GroupedQueryContext groupedQuery() {
			return GetRuleContext<GroupedQueryContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ReportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_report; } }
	}

	[RuleVersion(0)]
	public ReportContext report() {
		ReportContext _localctx = new ReportContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_report);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			_localctx.Op = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==T__4 || _la==T__5) ) {
				_localctx.Op = _errHandler.RecoverInline(this);
			}
			Consume();
			State = 182;
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				State = 181; _localctx.Sheer = Match(T__6);
				}
				break;
			}
			State = 189;
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				State = 184; namedQuery();
				State = 186;
				_la = _input.La(1);
				if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__15 - 4)) | (1L << (T__16 - 4)) | (1L << (T__26 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
					{
					State = 185; range();
					}
				}

				}
				break;

			case 2:
				{
				State = 188; groupedQuery();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedQueryContext : ParserRuleContext {
		public NamedQContext namedQ() {
			return GetRuleContext<NamedQContext>(0);
		}
		public NamedQueryTemplateRContext namedQueryTemplateR() {
			return GetRuleContext<NamedQueryTemplateRContext>(0);
		}
		public NamedQueriesContext namedQueries() {
			return GetRuleContext<NamedQueriesContext>(0);
		}
		public NamedQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedQuery; } }
	}

	[RuleVersion(0)]
	public NamedQueryContext namedQuery() {
		NamedQueryContext _localctx = new NamedQueryContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_namedQuery);
		try {
			State = 194;
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 191; namedQueries();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 192; namedQ();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 193; namedQueryTemplateR();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedQueriesContext : ParserRuleContext {
		public IToken Inh;
		public CoefContext coef() {
			return GetRuleContext<CoefContext>(0);
		}
		public IReadOnlyList<NamedQueryContext> namedQuery() {
			return GetRuleContexts<NamedQueryContext>();
		}
		public ITerminalNode DoubleQuotedString() { return GetToken(ShellParser.DoubleQuotedString, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NamedQueryContext namedQuery(int i) {
			return GetRuleContext<NamedQueryContext>(i);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public NamedQueriesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedQueries; } }
	}

	[RuleVersion(0)]
	public NamedQueriesContext namedQueries() {
		NamedQueriesContext _localctx = new NamedQueriesContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_namedQueries);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; name();
			State = 198;
			_la = _input.La(1);
			if (_la==Intersect) {
				{
				State = 197; coef();
				}
			}

			State = 201;
			_la = _input.La(1);
			if (_la==DoubleQuotedString) {
				{
				State = 200; Match(DoubleQuotedString);
				}
			}

			State = 209;
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				{
				State = 205;
				switch (_input.La(1)) {
				case T__7:
					{
					State = 203; _localctx.Inh = Match(T__7);
					}
					break;
				case T__8:
					{
					State = 204; _localctx.Inh = Match(T__8);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 207; vouchers();
				}
				break;

			case 2:
				{
				State = 208; _localctx.Inh = Match(T__8);
				}
				break;
			}
			State = 211; Match(T__9);
			State = 212; namedQuery();
			State = 217;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__10) {
				{
				{
				State = 213; Match(T__10);
				State = 214; namedQuery();
				}
				}
				State = 219;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 220; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedQContext : ParserRuleContext {
		public IToken Inh;
		public CoefContext coef() {
			return GetRuleContext<CoefContext>(0);
		}
		public GroupedQueryContext groupedQuery() {
			return GetRuleContext<GroupedQueryContext>(0);
		}
		public ITerminalNode DoubleQuotedString() { return GetToken(ShellParser.DoubleQuotedString, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NamedQContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedQ; } }
	}

	[RuleVersion(0)]
	public NamedQContext namedQ() {
		NamedQContext _localctx = new NamedQContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_namedQ);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; name();
			State = 224;
			_la = _input.La(1);
			if (_la==Intersect) {
				{
				State = 223; coef();
				}
			}

			State = 227;
			_la = _input.La(1);
			if (_la==DoubleQuotedString) {
				{
				State = 226; Match(DoubleQuotedString);
				}
			}

			State = 230;
			_la = _input.La(1);
			if (_la==T__8) {
				{
				State = 229; _localctx.Inh = Match(T__8);
				}
			}

			State = 232; Match(T__2);
			State = 233; groupedQuery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedQueryTemplateRContext : ParserRuleContext {
		public IToken Inh;
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NamedQueryTemplateRContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedQueryTemplateR; } }
	}

	[RuleVersion(0)]
	public NamedQueryTemplateRContext namedQueryTemplateR() {
		NamedQueryTemplateRContext _localctx = new NamedQueryTemplateRContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_namedQueryTemplateR);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235; name();
			State = 237;
			_la = _input.La(1);
			if (_la==T__8) {
				{
				State = 236; _localctx.Inh = Match(T__8);
				}
			}

			State = 239; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public ITerminalNode DollarQuotedString() { return GetToken(ShellParser.DollarQuotedString, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241; Match(DollarQuotedString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CoefContext : ParserRuleContext {
		public ITerminalNode Percent() { return GetToken(ShellParser.Percent, 0); }
		public ITerminalNode Float() { return GetToken(ShellParser.Float, 0); }
		public CoefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coef; } }
	}

	[RuleVersion(0)]
	public CoefContext coef() {
		CoefContext _localctx = new CoefContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_coef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243; Match(Intersect);
			State = 244;
			_la = _input.La(1);
			if ( !(_la==Float || _la==Percent) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupedQueryContext : ParserRuleContext {
		public SubtotalContext subtotal() {
			return GetRuleContext<SubtotalContext>(0);
		}
		public VoucherDetailQueryContext voucherDetailQuery() {
			return GetRuleContext<VoucherDetailQueryContext>(0);
		}
		public GroupedQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupedQuery; } }
	}

	[RuleVersion(0)]
	public GroupedQueryContext groupedQuery() {
		GroupedQueryContext _localctx = new GroupedQueryContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_groupedQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246; voucherDetailQuery();
			State = 247; subtotal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtotalContext : ParserRuleContext {
		public IToken SubtotalMark;
		public ITerminalNode SubtotalFields() { return GetToken(ShellParser.SubtotalFields, 0); }
		public SubtotalAggrContext subtotalAggr() {
			return GetRuleContext<SubtotalAggrContext>(0);
		}
		public SubtotalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtotal; } }
	}

	[RuleVersion(0)]
	public SubtotalContext subtotal() {
		SubtotalContext _localctx = new SubtotalContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_subtotal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			_localctx.SubtotalMark = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__11) | (1L << T__12) | (1L << T__13))) != 0)) ) {
				_localctx.SubtotalMark = _errHandler.RecoverInline(this);
			}
			Consume();
			State = 251;
			_la = _input.La(1);
			if (_la==SubtotalFields) {
				{
				State = 250; Match(SubtotalFields);
				}
			}

			State = 254;
			_la = _input.La(1);
			if (_la==T__14) {
				{
				State = 253; subtotalAggr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtotalAggrContext : ParserRuleContext {
		public IToken IsAll;
		public RangeCoreContext rangeCore() {
			return GetRuleContext<RangeCoreContext>(0);
		}
		public SubtotalAggrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtotalAggr; } }
	}

	[RuleVersion(0)]
	public SubtotalAggrContext subtotalAggr() {
		SubtotalAggrContext _localctx = new SubtotalAggrContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_subtotalAggr);
		try {
			State = 265;
			switch ( Interpreter.AdaptivePredict(_input,24,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 256; Match(T__14);
				State = 258;
				switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
				case 1:
					{
					State = 257; _localctx.IsAll = Match(T__15);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 260; Match(T__14);
				State = 261; Match(T__16);
				State = 262; rangeCore();
				State = 263; Match(T__17);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoucherDetailQueryContext : ParserRuleContext {
		public VoucherQueryContext voucherQuery() {
			return GetRuleContext<VoucherQueryContext>(0);
		}
		public EmitContext emit() {
			return GetRuleContext<EmitContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public VoucherDetailQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voucherDetailQuery; } }
	}

	[RuleVersion(0)]
	public VoucherDetailQueryContext voucherDetailQuery() {
		VoucherDetailQueryContext _localctx = new VoucherDetailQueryContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_voucherDetailQuery);
		try {
			State = 271;
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 267; vouchers();
				State = 268; emit();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 270; voucherQuery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmitContext : ParserRuleContext {
		public IToken Op;
		public DetailsContext details() {
			return GetRuleContext<DetailsContext>(0);
		}
		public EmitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emit; } }
	}

	[RuleVersion(0)]
	public EmitContext emit() {
		EmitContext _localctx = new EmitContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_emit);
		try {
			State = 276;
			switch (_input.La(1)) {
			case T__18:
				EnterOuterAlt(_localctx, 1);
				{
				State = 273; _localctx.Op = Match(T__18);
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 274; Match(T__2);
				State = 275; details(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VouchersContext : ParserRuleContext {
		public VoucherQueryContext voucherQuery() {
			return GetRuleContext<VoucherQueryContext>(0);
		}
		public VouchersBContext vouchersB() {
			return GetRuleContext<VouchersBContext>(0);
		}
		public VouchersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vouchers; } }
	}

	[RuleVersion(0)]
	public VouchersContext vouchers() {
		VouchersContext _localctx = new VouchersContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_vouchers);
		try {
			State = 280;
			switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 278; vouchersB(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 279; voucherQuery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VouchersBContext : ParserRuleContext {
		public IToken Op;
		public VouchersBContext vouchersB(int i) {
			return GetRuleContext<VouchersBContext>(i);
		}
		public VoucherQueryContext voucherQuery() {
			return GetRuleContext<VoucherQueryContext>(0);
		}
		public IReadOnlyList<VouchersBContext> vouchersB() {
			return GetRuleContexts<VouchersBContext>();
		}
		public VouchersBContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vouchersB; } }
	}

	[RuleVersion(0)]
	public VouchersBContext vouchersB() {
		return vouchersB(0);
	}

	private VouchersBContext vouchersB(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		VouchersBContext _localctx = new VouchersBContext(_ctx, _parentState);
		VouchersBContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_vouchersB, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
			case 1:
				{
				State = 283;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==Union || _la==Substract) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 284; vouchersB(3);
				}
				break;

			case 2:
				{
				State = 285; Match(T__19);
				State = 286; voucherQuery();
				State = 287; Match(T__20);
				}
				break;

			case 3:
				{
				State = 289; Match(T__19);
				State = 290; vouchersB(0);
				State = 291; Match(T__20);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 303;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,30,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 301;
					switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
					case 1:
						{
						_localctx = new VouchersBContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_vouchersB);
						State = 295;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 296; _localctx.Op = Match(Intersect);
						State = 297; vouchersB(6);
						}
						break;

					case 2:
						{
						_localctx = new VouchersBContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_vouchersB);
						State = 298;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 299;
						_localctx.Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==Union || _la==Substract) ) {
							_localctx.Op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 300; vouchersB(5);
						}
						break;
					}
					} 
				}
				State = 305;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,30,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VoucherQueryContext : ParserRuleContext {
		public IToken Op;
		public ITerminalNode CaretQuotedString() { return GetToken(ShellParser.CaretQuotedString, 0); }
		public ITerminalNode PercentQuotedString() { return GetToken(ShellParser.PercentQuotedString, 0); }
		public DetailsContext details() {
			return GetRuleContext<DetailsContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode VoucherType() { return GetToken(ShellParser.VoucherType, 0); }
		public VoucherQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voucherQuery; } }
	}

	[RuleVersion(0)]
	public VoucherQueryContext voucherQuery() {
		VoucherQueryContext _localctx = new VoucherQueryContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_voucherQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
			case 1:
				{
				State = 306; details(0);
				}
				break;
			}
			State = 310;
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				State = 309;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__18 || _la==T__21) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 313;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__15 - 4)) | (1L << (T__16 - 4)) | (1L << (T__26 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 312; range();
				}
			}

			State = 316;
			_la = _input.La(1);
			if (_la==CaretQuotedString) {
				{
				State = 315; Match(CaretQuotedString);
				}
			}

			State = 319;
			_la = _input.La(1);
			if (_la==PercentQuotedString) {
				{
				State = 318; Match(PercentQuotedString);
				}
			}

			State = 322;
			_la = _input.La(1);
			if (_la==VoucherType) {
				{
				State = 321; Match(VoucherType);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DetailsContext : ParserRuleContext {
		public IToken Op;
		public DetailsContext details(int i) {
			return GetRuleContext<DetailsContext>(i);
		}
		public IReadOnlyList<DetailsContext> details() {
			return GetRuleContexts<DetailsContext>();
		}
		public DetailQueryContext detailQuery() {
			return GetRuleContext<DetailQueryContext>(0);
		}
		public DetailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_details; } }
	}

	[RuleVersion(0)]
	public DetailsContext details() {
		return details(0);
	}

	private DetailsContext details(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		DetailsContext _localctx = new DetailsContext(_ctx, _parentState);
		DetailsContext _prevctx = _localctx;
		int _startState = 44;
		EnterRecursionRule(_localctx, 44, RULE_details, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			switch ( Interpreter.AdaptivePredict(_input,37,_ctx) ) {
			case 1:
				{
				State = 325;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==Union || _la==Substract) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 326; details(3);
				}
				break;

			case 2:
				{
				State = 327; detailQuery();
				}
				break;

			case 3:
				{
				State = 328; Match(T__22);
				State = 329; details(0);
				State = 330; Match(T__23);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 342;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,39,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 340;
					switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
					case 1:
						{
						_localctx = new DetailsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_details);
						State = 334;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 335; _localctx.Op = Match(Intersect);
						State = 336; details(6);
						}
						break;

					case 2:
						{
						_localctx = new DetailsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_details);
						State = 337;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 338;
						_localctx.Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==Union || _la==Substract) ) {
							_localctx.Op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 339; details(5);
						}
						break;
					}
					} 
				}
				State = 344;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,39,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DetailQueryContext : ParserRuleContext {
		public IToken Direction;
		public ITerminalNode DetailTitleSubTitle() { return GetToken(ShellParser.DetailTitleSubTitle, 0); }
		public ITerminalNode DoubleQuotedString() { return GetToken(ShellParser.DoubleQuotedString, 0); }
		public ITerminalNode SingleQuotedString() { return GetToken(ShellParser.SingleQuotedString, 0); }
		public ITerminalNode DetailTitle() { return GetToken(ShellParser.DetailTitle, 0); }
		public DetailQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_detailQuery; } }
	}

	[RuleVersion(0)]
	public DetailQueryContext detailQuery() {
		DetailQueryContext _localctx = new DetailQueryContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_detailQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 346;
			switch ( Interpreter.AdaptivePredict(_input,40,_ctx) ) {
			case 1:
				{
				State = 345;
				_la = _input.La(1);
				if ( !(_la==DetailTitle || _la==DetailTitleSubTitle) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 349;
			switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
			case 1:
				{
				State = 348; Match(SingleQuotedString);
				}
				break;
			}
			State = 352;
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				{
				State = 351; Match(DoubleQuotedString);
				}
				break;
			}
			State = 355;
			switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
			case 1:
				{
				State = 354;
				_localctx.Direction = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__24 || _la==T__25) ) {
					_localctx.Direction = _errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public RangeCoreContext Core;
		public RangeCoreContext rangeCore() {
			return GetRuleContext<RangeCoreContext>(0);
		}
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_range);
		try {
			State = 363;
			switch (_input.La(1)) {
			case T__15:
				EnterOuterAlt(_localctx, 1);
				{
				State = 357; Match(T__15);
				}
				break;
			case T__3:
			case T__26:
			case RangeNull:
			case RangeAllNotNull:
			case RangeAYear:
			case RangeAMonth:
			case RangeDeltaMonth:
			case RangeADay:
			case RangeDeltaDay:
			case RangeDeltaWeek:
				EnterOuterAlt(_localctx, 2);
				{
				State = 358; _localctx.Core = rangeCore();
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 3);
				{
				State = 359; Match(T__16);
				State = 360; _localctx.Core = rangeCore();
				State = 361; Match(T__17);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeCoreContext : ParserRuleContext {
		public RangeCertainPointContext Begin;
		public IToken Op;
		public RangeCertainPointContext End;
		public RangeCertainPointContext Certain;
		public ITerminalNode RangeNull() { return GetToken(ShellParser.RangeNull, 0); }
		public RangeCertainPointContext rangeCertainPoint(int i) {
			return GetRuleContext<RangeCertainPointContext>(i);
		}
		public ITerminalNode RangeAllNotNull() { return GetToken(ShellParser.RangeAllNotNull, 0); }
		public IReadOnlyList<RangeCertainPointContext> rangeCertainPoint() {
			return GetRuleContexts<RangeCertainPointContext>();
		}
		public RangeCoreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeCore; } }
	}

	[RuleVersion(0)]
	public RangeCoreContext rangeCore() {
		RangeCoreContext _localctx = new RangeCoreContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_rangeCore);
		int _la;
		try {
			State = 375;
			switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 365; Match(RangeNull);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 366; Match(RangeAllNotNull);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 367; _localctx.Begin = rangeCertainPoint();
				State = 368;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__3 || _la==T__26) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 370;
				_la = _input.La(1);
				if (((((_la - 62)) & ~0x3f) == 0 && ((1L << (_la - 62)) & ((1L << (RangeAYear - 62)) | (1L << (RangeAMonth - 62)) | (1L << (RangeDeltaMonth - 62)) | (1L << (RangeADay - 62)) | (1L << (RangeDeltaDay - 62)) | (1L << (RangeDeltaWeek - 62)))) != 0)) {
					{
					State = 369; _localctx.End = rangeCertainPoint();
					}
				}

				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 372;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__3 || _la==T__26) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 373; _localctx.End = rangeCertainPoint();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 374; _localctx.Certain = rangeCertainPoint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangePointContext : ParserRuleContext {
		public IToken All;
		public ITerminalNode RangeNull() { return GetToken(ShellParser.RangeNull, 0); }
		public RangeCertainPointContext rangeCertainPoint() {
			return GetRuleContext<RangeCertainPointContext>(0);
		}
		public RangePointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangePoint; } }
	}

	[RuleVersion(0)]
	public RangePointContext rangePoint() {
		RangePointContext _localctx = new RangePointContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_rangePoint);
		try {
			State = 380;
			switch (_input.La(1)) {
			case RangeNull:
				EnterOuterAlt(_localctx, 1);
				{
				State = 377; Match(RangeNull);
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 2);
				{
				State = 378; _localctx.All = Match(T__15);
				}
				break;
			case RangeAYear:
			case RangeAMonth:
			case RangeDeltaMonth:
			case RangeADay:
			case RangeDeltaDay:
			case RangeDeltaWeek:
				EnterOuterAlt(_localctx, 3);
				{
				State = 379; rangeCertainPoint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeCertainPointContext : ParserRuleContext {
		public RangeWeekContext rangeWeek() {
			return GetRuleContext<RangeWeekContext>(0);
		}
		public RangeYearContext rangeYear() {
			return GetRuleContext<RangeYearContext>(0);
		}
		public RangeMonthContext rangeMonth() {
			return GetRuleContext<RangeMonthContext>(0);
		}
		public RangeDayContext rangeDay() {
			return GetRuleContext<RangeDayContext>(0);
		}
		public RangeCertainPointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeCertainPoint; } }
	}

	[RuleVersion(0)]
	public RangeCertainPointContext rangeCertainPoint() {
		RangeCertainPointContext _localctx = new RangeCertainPointContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_rangeCertainPoint);
		try {
			State = 386;
			switch (_input.La(1)) {
			case RangeAYear:
				EnterOuterAlt(_localctx, 1);
				{
				State = 382; rangeYear();
				}
				break;
			case RangeAMonth:
			case RangeDeltaMonth:
				EnterOuterAlt(_localctx, 2);
				{
				State = 383; rangeMonth();
				}
				break;
			case RangeDeltaWeek:
				EnterOuterAlt(_localctx, 3);
				{
				State = 384; rangeWeek();
				}
				break;
			case RangeADay:
			case RangeDeltaDay:
				EnterOuterAlt(_localctx, 4);
				{
				State = 385; rangeDay();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeYearContext : ParserRuleContext {
		public ITerminalNode RangeAYear() { return GetToken(ShellParser.RangeAYear, 0); }
		public RangeYearContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeYear; } }
	}

	[RuleVersion(0)]
	public RangeYearContext rangeYear() {
		RangeYearContext _localctx = new RangeYearContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_rangeYear);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388; Match(RangeAYear);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeMonthContext : ParserRuleContext {
		public ITerminalNode RangeDeltaMonth() { return GetToken(ShellParser.RangeDeltaMonth, 0); }
		public ITerminalNode RangeAMonth() { return GetToken(ShellParser.RangeAMonth, 0); }
		public RangeMonthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeMonth; } }
	}

	[RuleVersion(0)]
	public RangeMonthContext rangeMonth() {
		RangeMonthContext _localctx = new RangeMonthContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_rangeMonth);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390;
			_la = _input.La(1);
			if ( !(_la==RangeAMonth || _la==RangeDeltaMonth) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeWeekContext : ParserRuleContext {
		public ITerminalNode RangeDeltaWeek() { return GetToken(ShellParser.RangeDeltaWeek, 0); }
		public RangeWeekContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeWeek; } }
	}

	[RuleVersion(0)]
	public RangeWeekContext rangeWeek() {
		RangeWeekContext _localctx = new RangeWeekContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_rangeWeek);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392; Match(RangeDeltaWeek);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeDayContext : ParserRuleContext {
		public ITerminalNode RangeADay() { return GetToken(ShellParser.RangeADay, 0); }
		public ITerminalNode RangeDeltaDay() { return GetToken(ShellParser.RangeDeltaDay, 0); }
		public RangeDayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeDay; } }
	}

	[RuleVersion(0)]
	public RangeDayContext rangeDay() {
		RangeDayContext _localctx = new RangeDayContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_rangeDay);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394;
			_la = _input.La(1);
			if ( !(_la==RangeADay || _la==RangeDeltaDay) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetContext : ParserRuleContext {
		public AssetRegisterContext assetRegister() {
			return GetRuleContext<AssetRegisterContext>(0);
		}
		public AssetUnregisterContext assetUnregister() {
			return GetRuleContext<AssetUnregisterContext>(0);
		}
		public AssetResetMixedContext assetResetMixed() {
			return GetRuleContext<AssetResetMixedContext>(0);
		}
		public AssetResetHardContext assetResetHard() {
			return GetRuleContext<AssetResetHardContext>(0);
		}
		public AssetResetSoftContext assetResetSoft() {
			return GetRuleContext<AssetResetSoftContext>(0);
		}
		public AssetApplyContext assetApply() {
			return GetRuleContext<AssetApplyContext>(0);
		}
		public AssetListContext assetList() {
			return GetRuleContext<AssetListContext>(0);
		}
		public AssetQueryContext assetQuery() {
			return GetRuleContext<AssetQueryContext>(0);
		}
		public AssetCheckContext assetCheck() {
			return GetRuleContext<AssetCheckContext>(0);
		}
		public AssetRedepContext assetRedep() {
			return GetRuleContext<AssetRedepContext>(0);
		}
		public AssetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asset; } }
	}

	[RuleVersion(0)]
	public AssetContext asset() {
		AssetContext _localctx = new AssetContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_asset);
		try {
			State = 406;
			switch ( Interpreter.AdaptivePredict(_input,49,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 396; assetList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 397; assetQuery();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 398; assetRegister();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 399; assetUnregister();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 400; assetRedep();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 401; assetResetSoft();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 402; assetResetMixed();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 403; assetResetHard();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 404; assetApply();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 405; assetCheck();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetListContext : ParserRuleContext {
		public ITerminalNode AOList() { return GetToken(ShellParser.AOList, 0); }
		public ITerminalNode AOAll() { return GetToken(ShellParser.AOAll, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangePointContext rangePoint() {
			return GetRuleContext<RangePointContext>(0);
		}
		public AssetListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetList; } }
	}

	[RuleVersion(0)]
	public AssetListContext assetList() {
		AssetListContext _localctx = new AssetListContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_assetList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408; Match(T__27);
			State = 410;
			switch ( Interpreter.AdaptivePredict(_input,50,_ctx) ) {
			case 1:
				{
				State = 409;
				_la = _input.La(1);
				if ( !(_la==AOAll || _la==AOList) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 413;
			switch ( Interpreter.AdaptivePredict(_input,51,_ctx) ) {
			case 1:
				{
				State = 412; rangePoint();
				}
				break;
			}
			State = 416;
			switch ( Interpreter.AdaptivePredict(_input,52,_ctx) ) {
			case 1:
				{
				State = 415; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetQueryContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOQuery() { return GetToken(ShellParser.AOQuery, 0); }
		public AssetQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetQuery; } }
	}

	[RuleVersion(0)]
	public AssetQueryContext assetQuery() {
		AssetQueryContext _localctx = new AssetQueryContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_assetQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418; Match(T__27);
			State = 419; Match(AOQuery);
			State = 421;
			switch ( Interpreter.AdaptivePredict(_input,53,_ctx) ) {
			case 1:
				{
				State = 420; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetRegisterContext : ParserRuleContext {
		public ITerminalNode AORegister() { return GetToken(ShellParser.AORegister, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AssetRegisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetRegister; } }
	}

	[RuleVersion(0)]
	public AssetRegisterContext assetRegister() {
		AssetRegisterContext _localctx = new AssetRegisterContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_assetRegister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423; Match(T__27);
			State = 424; Match(AORegister);
			State = 426;
			switch ( Interpreter.AdaptivePredict(_input,54,_ctx) ) {
			case 1:
				{
				State = 425; distributedQ(0);
				}
				break;
			}
			State = 429;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__15 - 4)) | (1L << (T__16 - 4)) | (1L << (T__26 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 428; range();
				}
			}

			State = 433;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 431; Match(T__2);
				State = 432; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetUnregisterContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode AOUnregister() { return GetToken(ShellParser.AOUnregister, 0); }
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AssetUnregisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetUnregister; } }
	}

	[RuleVersion(0)]
	public AssetUnregisterContext assetUnregister() {
		AssetUnregisterContext _localctx = new AssetUnregisterContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_assetUnregister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435; Match(T__27);
			State = 436; Match(AOUnregister);
			State = 438;
			switch ( Interpreter.AdaptivePredict(_input,57,_ctx) ) {
			case 1:
				{
				State = 437; distributedQ(0);
				}
				break;
			}
			State = 441;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__15 - 4)) | (1L << (T__16 - 4)) | (1L << (T__26 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 440; range();
				}
			}

			State = 445;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 443; Match(T__2);
				State = 444; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetRedepContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AORecalc() { return GetToken(ShellParser.AORecalc, 0); }
		public AssetRedepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetRedep; } }
	}

	[RuleVersion(0)]
	public AssetRedepContext assetRedep() {
		AssetRedepContext _localctx = new AssetRedepContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_assetRedep);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447; Match(T__27);
			State = 448; Match(AORecalc);
			State = 450;
			switch ( Interpreter.AdaptivePredict(_input,60,_ctx) ) {
			case 1:
				{
				State = 449; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetResetSoftContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOResetSoft() { return GetToken(ShellParser.AOResetSoft, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AssetResetSoftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetResetSoft; } }
	}

	[RuleVersion(0)]
	public AssetResetSoftContext assetResetSoft() {
		AssetResetSoftContext _localctx = new AssetResetSoftContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_assetResetSoft);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 452; Match(T__27);
			State = 453; Match(AOResetSoft);
			State = 455;
			switch ( Interpreter.AdaptivePredict(_input,61,_ctx) ) {
			case 1:
				{
				State = 454; distributedQ(0);
				}
				break;
			}
			State = 458;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__15 - 4)) | (1L << (T__16 - 4)) | (1L << (T__26 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 457; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetResetMixedContext : ParserRuleContext {
		public ITerminalNode AOResetMixed() { return GetToken(ShellParser.AOResetMixed, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AssetResetMixedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetResetMixed; } }
	}

	[RuleVersion(0)]
	public AssetResetMixedContext assetResetMixed() {
		AssetResetMixedContext _localctx = new AssetResetMixedContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_assetResetMixed);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460; Match(T__27);
			State = 461; Match(AOResetMixed);
			State = 463;
			switch ( Interpreter.AdaptivePredict(_input,63,_ctx) ) {
			case 1:
				{
				State = 462; distributedQ(0);
				}
				break;
			}
			State = 466;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__15 - 4)) | (1L << (T__16 - 4)) | (1L << (T__26 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 465; range();
				}
			}

			State = 470;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 468; Match(T__2);
				State = 469; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetResetHardContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOResetHard() { return GetToken(ShellParser.AOResetHard, 0); }
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AssetResetHardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetResetHard; } }
	}

	[RuleVersion(0)]
	public AssetResetHardContext assetResetHard() {
		AssetResetHardContext _localctx = new AssetResetHardContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_assetResetHard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 472; Match(T__27);
			State = 473; Match(AOResetHard);
			State = 475;
			switch ( Interpreter.AdaptivePredict(_input,66,_ctx) ) {
			case 1:
				{
				State = 474; distributedQ(0);
				}
				break;
			}
			State = 479;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 477; Match(T__2);
				State = 478; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetApplyContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOCollapse() { return GetToken(ShellParser.AOCollapse, 0); }
		public ITerminalNode AOApply() { return GetToken(ShellParser.AOApply, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AssetApplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetApply; } }
	}

	[RuleVersion(0)]
	public AssetApplyContext assetApply() {
		AssetApplyContext _localctx = new AssetApplyContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_assetApply);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481; Match(T__27);
			State = 482; Match(AOApply);
			State = 484;
			switch ( Interpreter.AdaptivePredict(_input,68,_ctx) ) {
			case 1:
				{
				State = 483; Match(AOCollapse);
				}
				break;
			}
			State = 487;
			switch ( Interpreter.AdaptivePredict(_input,69,_ctx) ) {
			case 1:
				{
				State = 486; distributedQ(0);
				}
				break;
			}
			State = 490;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__15 - 4)) | (1L << (T__16 - 4)) | (1L << (T__26 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 489; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetCheckContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOCheck() { return GetToken(ShellParser.AOCheck, 0); }
		public AssetCheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetCheck; } }
	}

	[RuleVersion(0)]
	public AssetCheckContext assetCheck() {
		AssetCheckContext _localctx = new AssetCheckContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_assetCheck);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 492; Match(T__27);
			State = 493; Match(AOCheck);
			State = 495;
			switch ( Interpreter.AdaptivePredict(_input,71,_ctx) ) {
			case 1:
				{
				State = 494; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortContext : ParserRuleContext {
		public AmortReamoContext amortReamo() {
			return GetRuleContext<AmortReamoContext>(0);
		}
		public AmortQueryContext amortQuery() {
			return GetRuleContext<AmortQueryContext>(0);
		}
		public AmortCheckContext amortCheck() {
			return GetRuleContext<AmortCheckContext>(0);
		}
		public AmortResetMixedContext amortResetMixed() {
			return GetRuleContext<AmortResetMixedContext>(0);
		}
		public AmortResetSoftContext amortResetSoft() {
			return GetRuleContext<AmortResetSoftContext>(0);
		}
		public AmortRegisterContext amortRegister() {
			return GetRuleContext<AmortRegisterContext>(0);
		}
		public AmortUnregisterContext amortUnregister() {
			return GetRuleContext<AmortUnregisterContext>(0);
		}
		public AmortApplyContext amortApply() {
			return GetRuleContext<AmortApplyContext>(0);
		}
		public AmortListContext amortList() {
			return GetRuleContext<AmortListContext>(0);
		}
		public AmortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amort; } }
	}

	[RuleVersion(0)]
	public AmortContext amort() {
		AmortContext _localctx = new AmortContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_amort);
		try {
			State = 506;
			switch ( Interpreter.AdaptivePredict(_input,72,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 497; amortList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 498; amortQuery();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 499; amortRegister();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 500; amortUnregister();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 501; amortReamo();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 502; amortResetSoft();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 503; amortResetMixed();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 504; amortApply();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 505; amortCheck();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortListContext : ParserRuleContext {
		public ITerminalNode AOList() { return GetToken(ShellParser.AOList, 0); }
		public ITerminalNode AOAll() { return GetToken(ShellParser.AOAll, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangePointContext rangePoint() {
			return GetRuleContext<RangePointContext>(0);
		}
		public AmortListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortList; } }
	}

	[RuleVersion(0)]
	public AmortListContext amortList() {
		AmortListContext _localctx = new AmortListContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_amortList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 508; Match(T__28);
			State = 510;
			switch ( Interpreter.AdaptivePredict(_input,73,_ctx) ) {
			case 1:
				{
				State = 509;
				_la = _input.La(1);
				if ( !(_la==AOAll || _la==AOList) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 513;
			switch ( Interpreter.AdaptivePredict(_input,74,_ctx) ) {
			case 1:
				{
				State = 512; rangePoint();
				}
				break;
			}
			State = 516;
			switch ( Interpreter.AdaptivePredict(_input,75,_ctx) ) {
			case 1:
				{
				State = 515; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortQueryContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOQuery() { return GetToken(ShellParser.AOQuery, 0); }
		public AmortQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortQuery; } }
	}

	[RuleVersion(0)]
	public AmortQueryContext amortQuery() {
		AmortQueryContext _localctx = new AmortQueryContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_amortQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 518; Match(T__28);
			State = 519; Match(AOQuery);
			State = 521;
			switch ( Interpreter.AdaptivePredict(_input,76,_ctx) ) {
			case 1:
				{
				State = 520; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortRegisterContext : ParserRuleContext {
		public ITerminalNode AORegister() { return GetToken(ShellParser.AORegister, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AmortRegisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortRegister; } }
	}

	[RuleVersion(0)]
	public AmortRegisterContext amortRegister() {
		AmortRegisterContext _localctx = new AmortRegisterContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_amortRegister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 523; Match(T__28);
			State = 524; Match(AORegister);
			State = 526;
			switch ( Interpreter.AdaptivePredict(_input,77,_ctx) ) {
			case 1:
				{
				State = 525; distributedQ(0);
				}
				break;
			}
			State = 529;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__15 - 4)) | (1L << (T__16 - 4)) | (1L << (T__26 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 528; range();
				}
			}

			State = 533;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 531; Match(T__2);
				State = 532; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortUnregisterContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode AOUnregister() { return GetToken(ShellParser.AOUnregister, 0); }
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AmortUnregisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortUnregister; } }
	}

	[RuleVersion(0)]
	public AmortUnregisterContext amortUnregister() {
		AmortUnregisterContext _localctx = new AmortUnregisterContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_amortUnregister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535; Match(T__28);
			State = 536; Match(AOUnregister);
			State = 538;
			switch ( Interpreter.AdaptivePredict(_input,80,_ctx) ) {
			case 1:
				{
				State = 537; distributedQ(0);
				}
				break;
			}
			State = 541;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__15 - 4)) | (1L << (T__16 - 4)) | (1L << (T__26 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 540; range();
				}
			}

			State = 545;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 543; Match(T__2);
				State = 544; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortReamoContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AORecalc() { return GetToken(ShellParser.AORecalc, 0); }
		public AmortReamoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortReamo; } }
	}

	[RuleVersion(0)]
	public AmortReamoContext amortReamo() {
		AmortReamoContext _localctx = new AmortReamoContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_amortReamo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 547; Match(T__28);
			State = 548; Match(AORecalc);
			State = 550;
			switch ( Interpreter.AdaptivePredict(_input,83,_ctx) ) {
			case 1:
				{
				State = 549; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortResetSoftContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOResetSoft() { return GetToken(ShellParser.AOResetSoft, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AmortResetSoftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortResetSoft; } }
	}

	[RuleVersion(0)]
	public AmortResetSoftContext amortResetSoft() {
		AmortResetSoftContext _localctx = new AmortResetSoftContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_amortResetSoft);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 552; Match(T__28);
			State = 553; Match(AOResetSoft);
			State = 555;
			switch ( Interpreter.AdaptivePredict(_input,84,_ctx) ) {
			case 1:
				{
				State = 554; distributedQ(0);
				}
				break;
			}
			State = 558;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__15 - 4)) | (1L << (T__16 - 4)) | (1L << (T__26 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 557; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortResetMixedContext : ParserRuleContext {
		public ITerminalNode AOResetMixed() { return GetToken(ShellParser.AOResetMixed, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AmortResetMixedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortResetMixed; } }
	}

	[RuleVersion(0)]
	public AmortResetMixedContext amortResetMixed() {
		AmortResetMixedContext _localctx = new AmortResetMixedContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_amortResetMixed);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 560; Match(T__28);
			State = 561; Match(AOResetMixed);
			State = 563;
			switch ( Interpreter.AdaptivePredict(_input,86,_ctx) ) {
			case 1:
				{
				State = 562; distributedQ(0);
				}
				break;
			}
			State = 566;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__15 - 4)) | (1L << (T__16 - 4)) | (1L << (T__26 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 565; range();
				}
			}

			State = 570;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 568; Match(T__2);
				State = 569; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortApplyContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOCollapse() { return GetToken(ShellParser.AOCollapse, 0); }
		public ITerminalNode AOApply() { return GetToken(ShellParser.AOApply, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AmortApplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortApply; } }
	}

	[RuleVersion(0)]
	public AmortApplyContext amortApply() {
		AmortApplyContext _localctx = new AmortApplyContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_amortApply);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 572; Match(T__28);
			State = 573; Match(AOApply);
			State = 575;
			switch ( Interpreter.AdaptivePredict(_input,89,_ctx) ) {
			case 1:
				{
				State = 574; Match(AOCollapse);
				}
				break;
			}
			State = 578;
			switch ( Interpreter.AdaptivePredict(_input,90,_ctx) ) {
			case 1:
				{
				State = 577; distributedQ(0);
				}
				break;
			}
			State = 581;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__15 - 4)) | (1L << (T__16 - 4)) | (1L << (T__26 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 580; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortCheckContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOCheck() { return GetToken(ShellParser.AOCheck, 0); }
		public AmortCheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortCheck; } }
	}

	[RuleVersion(0)]
	public AmortCheckContext amortCheck() {
		AmortCheckContext _localctx = new AmortCheckContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_amortCheck);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 583; Match(T__28);
			State = 584; Match(AOCheck);
			State = 586;
			switch ( Interpreter.AdaptivePredict(_input,92,_ctx) ) {
			case 1:
				{
				State = 585; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DistributedQContext : ParserRuleContext {
		public IToken Op;
		public DistributedQAtomContext distributedQAtom() {
			return GetRuleContext<DistributedQAtomContext>(0);
		}
		public DistributedQContext distributedQ(int i) {
			return GetRuleContext<DistributedQContext>(i);
		}
		public IReadOnlyList<DistributedQContext> distributedQ() {
			return GetRuleContexts<DistributedQContext>();
		}
		public DistributedQContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distributedQ; } }
	}

	[RuleVersion(0)]
	public DistributedQContext distributedQ() {
		return distributedQ(0);
	}

	private DistributedQContext distributedQ(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		DistributedQContext _localctx = new DistributedQContext(_ctx, _parentState);
		DistributedQContext _prevctx = _localctx;
		int _startState = 106;
		EnterRecursionRule(_localctx, 106, RULE_distributedQ, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 596;
			switch ( Interpreter.AdaptivePredict(_input,93,_ctx) ) {
			case 1:
				{
				State = 589;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==Union || _la==Substract) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 590; distributedQ(3);
				}
				break;

			case 2:
				{
				State = 591; distributedQAtom();
				}
				break;

			case 3:
				{
				State = 592; Match(T__22);
				State = 593; distributedQ(0);
				State = 594; Match(T__23);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 606;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,95,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 604;
					switch ( Interpreter.AdaptivePredict(_input,94,_ctx) ) {
					case 1:
						{
						_localctx = new DistributedQContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_distributedQ);
						State = 598;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 599; _localctx.Op = Match(Intersect);
						State = 600; distributedQ(6);
						}
						break;

					case 2:
						{
						_localctx = new DistributedQContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_distributedQ);
						State = 601;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 602;
						_localctx.Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==Union || _la==Substract) ) {
							_localctx.Op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 603; distributedQ(5);
						}
						break;
					}
					} 
				}
				State = 608;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,95,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DistributedQAtomContext : ParserRuleContext {
		public ITerminalNode DollarQuotedString() { return GetToken(ShellParser.DollarQuotedString, 0); }
		public ITerminalNode PercentQuotedString() { return GetToken(ShellParser.PercentQuotedString, 0); }
		public ITerminalNode Guid() { return GetToken(ShellParser.Guid, 0); }
		public RangeCoreContext rangeCore() {
			return GetRuleContext<RangeCoreContext>(0);
		}
		public DistributedQAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distributedQAtom; } }
	}

	[RuleVersion(0)]
	public DistributedQAtomContext distributedQAtom() {
		DistributedQAtomContext _localctx = new DistributedQAtomContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_distributedQAtom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 610;
			switch ( Interpreter.AdaptivePredict(_input,96,_ctx) ) {
			case 1:
				{
				State = 609; Match(Guid);
				}
				break;
			}
			State = 613;
			switch ( Interpreter.AdaptivePredict(_input,97,_ctx) ) {
			case 1:
				{
				State = 612; Match(DollarQuotedString);
				}
				break;
			}
			State = 616;
			switch ( Interpreter.AdaptivePredict(_input,98,_ctx) ) {
			case 1:
				{
				State = 615; Match(PercentQuotedString);
				}
				break;
			}
			State = 622;
			switch ( Interpreter.AdaptivePredict(_input,99,_ctx) ) {
			case 1:
				{
				State = 618; Match(T__29);
				State = 619; rangeCore();
				State = 620; Match(T__30);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CarryContext : ParserRuleContext {
		public CarryMonthResetHardContext carryMonthResetHard() {
			return GetRuleContext<CarryMonthResetHardContext>(0);
		}
		public CarryYearContext carryYear() {
			return GetRuleContext<CarryYearContext>(0);
		}
		public CarryYearResetHardContext carryYearResetHard() {
			return GetRuleContext<CarryYearResetHardContext>(0);
		}
		public CarryMonthContext carryMonth() {
			return GetRuleContext<CarryMonthContext>(0);
		}
		public CarryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_carry; } }
	}

	[RuleVersion(0)]
	public CarryContext carry() {
		CarryContext _localctx = new CarryContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_carry);
		try {
			State = 628;
			switch ( Interpreter.AdaptivePredict(_input,100,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 624; carryMonthResetHard();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 625; carryMonth();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 626; carryYearResetHard();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 627; carryYear();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CarryMonthResetHardContext : ParserRuleContext {
		public ITerminalNode AOResetHard() { return GetToken(ShellParser.AOResetHard, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public CarryMonthResetHardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_carryMonthResetHard; } }
	}

	[RuleVersion(0)]
	public CarryMonthResetHardContext carryMonthResetHard() {
		CarryMonthResetHardContext _localctx = new CarryMonthResetHardContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_carryMonthResetHard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 630; Match(T__31);
			State = 631; Match(AOResetHard);
			State = 633;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__15 - 4)) | (1L << (T__16 - 4)) | (1L << (T__26 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 632; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CarryMonthContext : ParserRuleContext {
		public ITerminalNode AOApply() { return GetToken(ShellParser.AOApply, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public CarryMonthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_carryMonth; } }
	}

	[RuleVersion(0)]
	public CarryMonthContext carryMonth() {
		CarryMonthContext _localctx = new CarryMonthContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_carryMonth);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 635; Match(T__31);
			State = 636; Match(AOApply);
			State = 638;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__15 - 4)) | (1L << (T__16 - 4)) | (1L << (T__26 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 637; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CarryYearResetHardContext : ParserRuleContext {
		public ITerminalNode AOResetHard() { return GetToken(ShellParser.AOResetHard, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public CarryYearResetHardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_carryYearResetHard; } }
	}

	[RuleVersion(0)]
	public CarryYearResetHardContext carryYearResetHard() {
		CarryYearResetHardContext _localctx = new CarryYearResetHardContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_carryYearResetHard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 640; Match(T__32);
			State = 641; Match(AOResetHard);
			State = 643;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__15 - 4)) | (1L << (T__16 - 4)) | (1L << (T__26 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 642; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CarryYearContext : ParserRuleContext {
		public ITerminalNode AOApply() { return GetToken(ShellParser.AOApply, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public CarryYearContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_carryYear; } }
	}

	[RuleVersion(0)]
	public CarryYearContext carryYear() {
		CarryYearContext _localctx = new CarryYearContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_carryYear);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 645; Match(T__32);
			State = 646; Match(AOApply);
			State = 648;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__15 - 4)) | (1L << (T__16 - 4)) | (1L << (T__26 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 647; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 20: return vouchersB_sempred((VouchersBContext)_localctx, predIndex);

		case 22: return details_sempred((DetailsContext)_localctx, predIndex);

		case 53: return distributedQ_sempred((DistributedQContext)_localctx, predIndex);
		}
		return true;
	}
	private bool vouchersB_sempred(VouchersBContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 5);

		case 1: return Precpred(_ctx, 4);
		}
		return true;
	}
	private bool distributedQ_sempred(DistributedQContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(_ctx, 5);

		case 5: return Precpred(_ctx, 4);
		}
		return true;
	}
	private bool details_sempred(DetailsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 5);

		case 3: return Precpred(_ctx, 4);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3S\x28D\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x3\x2\x3\x2\x3"+
		"\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x87\n"+
		"\x3\x3\x4\x3\x4\a\x4\x8B\n\x4\f\x4\xE\x4\x8E\v\x4\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\x99\n\x5\x3\x5\x5\x5\x9C\n\x5"+
		"\x3\x6\x3\x6\x3\x6\x5\x6\xA1\n\x6\x3\a\x3\a\x3\a\a\a\xA6\n\a\f\a\xE\a"+
		"\xA9\v\a\x3\b\x3\b\x3\b\x3\b\x3\b\a\b\xB0\n\b\f\b\xE\b\xB3\v\b\x5\b\xB5"+
		"\n\b\x3\t\x3\t\x5\t\xB9\n\t\x3\t\x3\t\x5\t\xBD\n\t\x3\t\x5\t\xC0\n\t\x3"+
		"\n\x3\n\x3\n\x5\n\xC5\n\n\x3\v\x3\v\x5\v\xC9\n\v\x3\v\x5\v\xCC\n\v\x3"+
		"\v\x3\v\x5\v\xD0\n\v\x3\v\x3\v\x5\v\xD4\n\v\x3\v\x3\v\x3\v\x3\v\a\v\xDA"+
		"\n\v\f\v\xE\v\xDD\v\v\x3\v\x3\v\x3\f\x3\f\x5\f\xE3\n\f\x3\f\x5\f\xE6\n"+
		"\f\x3\f\x5\f\xE9\n\f\x3\f\x3\f\x3\f\x3\r\x3\r\x5\r\xF0\n\r\x3\r\x3\r\x3"+
		"\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x5\x11"+
		"\xFE\n\x11\x3\x11\x5\x11\x101\n\x11\x3\x12\x3\x12\x5\x12\x105\n\x12\x3"+
		"\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\x10C\n\x12\x3\x13\x3\x13\x3\x13"+
		"\x3\x13\x5\x13\x112\n\x13\x3\x14\x3\x14\x3\x14\x5\x14\x117\n\x14\x3\x15"+
		"\x3\x15\x5\x15\x11B\n\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x128\n\x16\x3\x16\x3\x16\x3\x16"+
		"\x3\x16\x3\x16\x3\x16\a\x16\x130\n\x16\f\x16\xE\x16\x133\v\x16\x3\x17"+
		"\x5\x17\x136\n\x17\x3\x17\x5\x17\x139\n\x17\x3\x17\x5\x17\x13C\n\x17\x3"+
		"\x17\x5\x17\x13F\n\x17\x3\x17\x5\x17\x142\n\x17\x3\x17\x5\x17\x145\n\x17"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\x14F\n"+
		"\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\a\x18\x157\n\x18\f\x18"+
		"\xE\x18\x15A\v\x18\x3\x19\x5\x19\x15D\n\x19\x3\x19\x5\x19\x160\n\x19\x3"+
		"\x19\x5\x19\x163\n\x19\x3\x19\x5\x19\x166\n\x19\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x5\x1A\x16E\n\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x5\x1B\x175\n\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x17A\n\x1B\x3\x1C\x3\x1C"+
		"\x3\x1C\x5\x1C\x17F\n\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x185\n\x1D"+
		"\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3\"\x3\"\x3\"\x3\"\x3\""+
		"\x3\"\x3\"\x3\"\x3\"\x3\"\x5\"\x199\n\"\x3#\x3#\x5#\x19D\n#\x3#\x5#\x1A0"+
		"\n#\x3#\x5#\x1A3\n#\x3$\x3$\x3$\x5$\x1A8\n$\x3%\x3%\x3%\x5%\x1AD\n%\x3"+
		"%\x5%\x1B0\n%\x3%\x3%\x5%\x1B4\n%\x3&\x3&\x3&\x5&\x1B9\n&\x3&\x5&\x1BC"+
		"\n&\x3&\x3&\x5&\x1C0\n&\x3\'\x3\'\x3\'\x5\'\x1C5\n\'\x3(\x3(\x3(\x5(\x1CA"+
		"\n(\x3(\x5(\x1CD\n(\x3)\x3)\x3)\x5)\x1D2\n)\x3)\x5)\x1D5\n)\x3)\x3)\x5"+
		")\x1D9\n)\x3*\x3*\x3*\x5*\x1DE\n*\x3*\x3*\x5*\x1E2\n*\x3+\x3+\x3+\x5+"+
		"\x1E7\n+\x3+\x5+\x1EA\n+\x3+\x5+\x1ED\n+\x3,\x3,\x3,\x5,\x1F2\n,\x3-\x3"+
		"-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x5-\x1FD\n-\x3.\x3.\x5.\x201\n.\x3.\x5."+
		"\x204\n.\x3.\x5.\x207\n.\x3/\x3/\x3/\x5/\x20C\n/\x3\x30\x3\x30\x3\x30"+
		"\x5\x30\x211\n\x30\x3\x30\x5\x30\x214\n\x30\x3\x30\x3\x30\x5\x30\x218"+
		"\n\x30\x3\x31\x3\x31\x3\x31\x5\x31\x21D\n\x31\x3\x31\x5\x31\x220\n\x31"+
		"\x3\x31\x3\x31\x5\x31\x224\n\x31\x3\x32\x3\x32\x3\x32\x5\x32\x229\n\x32"+
		"\x3\x33\x3\x33\x3\x33\x5\x33\x22E\n\x33\x3\x33\x5\x33\x231\n\x33\x3\x34"+
		"\x3\x34\x3\x34\x5\x34\x236\n\x34\x3\x34\x5\x34\x239\n\x34\x3\x34\x3\x34"+
		"\x5\x34\x23D\n\x34\x3\x35\x3\x35\x3\x35\x5\x35\x242\n\x35\x3\x35\x5\x35"+
		"\x245\n\x35\x3\x35\x5\x35\x248\n\x35\x3\x36\x3\x36\x3\x36\x5\x36\x24D"+
		"\n\x36\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x5\x37"+
		"\x257\n\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\a\x37\x25F\n\x37"+
		"\f\x37\xE\x37\x262\v\x37\x3\x38\x5\x38\x265\n\x38\x3\x38\x5\x38\x268\n"+
		"\x38\x3\x38\x5\x38\x26B\n\x38\x3\x38\x3\x38\x3\x38\x3\x38\x5\x38\x271"+
		"\n\x38\x3\x39\x3\x39\x3\x39\x3\x39\x5\x39\x277\n\x39\x3:\x3:\x3:\x5:\x27C"+
		"\n:\x3;\x3;\x3;\x5;\x281\n;\x3<\x3<\x3<\x5<\x286\n<\x3=\x3=\x3=\x5=\x28B"+
		"\n=\x3=\x2\x2\x5*.l>\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12"+
		"\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2"+
		",\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44"+
		"\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2"+
		"\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2v\x2x\x2\x2\xE\x3\x2$&\x3\x2"+
		"\a\b\x3\x2NO\x3\x2\xE\x10\x3\x2QR\x4\x2\x15\x15\x18\x18\x3\x2LM\x3\x2"+
		"\x1B\x1C\x4\x2\x6\x6\x1D\x1D\x3\x2\x41\x42\x3\x2\x43\x44\x3\x2\x30\x31"+
		"\x2E4\x2z\x3\x2\x2\x2\x4\x86\x3\x2\x2\x2\x6\x88\x3\x2\x2\x2\b\x9B\x3\x2"+
		"\x2\x2\n\x9D\x3\x2\x2\x2\f\xA2\x3\x2\x2\x2\xE\xAA\x3\x2\x2\x2\x10\xB6"+
		"\x3\x2\x2\x2\x12\xC4\x3\x2\x2\x2\x14\xC6\x3\x2\x2\x2\x16\xE0\x3\x2\x2"+
		"\x2\x18\xED\x3\x2\x2\x2\x1A\xF3\x3\x2\x2\x2\x1C\xF5\x3\x2\x2\x2\x1E\xF8"+
		"\x3\x2\x2\x2 \xFB\x3\x2\x2\x2\"\x10B\x3\x2\x2\x2$\x111\x3\x2\x2\x2&\x116"+
		"\x3\x2\x2\x2(\x11A\x3\x2\x2\x2*\x127\x3\x2\x2\x2,\x135\x3\x2\x2\x2.\x14E"+
		"\x3\x2\x2\x2\x30\x15C\x3\x2\x2\x2\x32\x16D\x3\x2\x2\x2\x34\x179\x3\x2"+
		"\x2\x2\x36\x17E\x3\x2\x2\x2\x38\x184\x3\x2\x2\x2:\x186\x3\x2\x2\x2<\x188"+
		"\x3\x2\x2\x2>\x18A\x3\x2\x2\x2@\x18C\x3\x2\x2\x2\x42\x198\x3\x2\x2\x2"+
		"\x44\x19A\x3\x2\x2\x2\x46\x1A4\x3\x2\x2\x2H\x1A9\x3\x2\x2\x2J\x1B5\x3"+
		"\x2\x2\x2L\x1C1\x3\x2\x2\x2N\x1C6\x3\x2\x2\x2P\x1CE\x3\x2\x2\x2R\x1DA"+
		"\x3\x2\x2\x2T\x1E3\x3\x2\x2\x2V\x1EE\x3\x2\x2\x2X\x1FC\x3\x2\x2\x2Z\x1FE"+
		"\x3\x2\x2\x2\\\x208\x3\x2\x2\x2^\x20D\x3\x2\x2\x2`\x219\x3\x2\x2\x2\x62"+
		"\x225\x3\x2\x2\x2\x64\x22A\x3\x2\x2\x2\x66\x232\x3\x2\x2\x2h\x23E\x3\x2"+
		"\x2\x2j\x249\x3\x2\x2\x2l\x256\x3\x2\x2\x2n\x264\x3\x2\x2\x2p\x276\x3"+
		"\x2\x2\x2r\x278\x3\x2\x2\x2t\x27D\x3\x2\x2\x2v\x282\x3\x2\x2\x2x\x287"+
		"\x3\x2\x2\x2z{\x5\x4\x3\x2{|\a\x2\x2\x3|\x3\x3\x2\x2\x2}\x87\x5\x6\x4"+
		"\x2~\x87\x5(\x15\x2\x7F\x87\x5\x1E\x10\x2\x80\x87\x5\n\x6\x2\x81\x87\x5"+
		"\x10\t\x2\x82\x87\x5\x42\"\x2\x83\x87\x5X-\x2\x84\x87\x5p\x39\x2\x85\x87"+
		"\x5\b\x5\x2\x86}\x3\x2\x2\x2\x86~\x3\x2\x2\x2\x86\x7F\x3\x2\x2\x2\x86"+
		"\x80\x3\x2\x2\x2\x86\x81\x3\x2\x2\x2\x86\x82\x3\x2\x2\x2\x86\x83\x3\x2"+
		"\x2\x2\x86\x84\x3\x2\x2\x2\x86\x85\x3\x2\x2\x2\x87\x5\x3\x2\x2\x2\x88"+
		"\x8C\aI\x2\x2\x89\x8B\aK\x2\x2\x8A\x89\x3\x2\x2\x2\x8B\x8E\x3\x2\x2\x2"+
		"\x8C\x8A\x3\x2\x2\x2\x8C\x8D\x3\x2\x2\x2\x8D\a\x3\x2\x2\x2\x8E\x8C\x3"+
		"\x2\x2\x2\x8F\x9C\a/\x2\x2\x90\x9C\a.\x2\x2\x91\x9C\a,\x2\x2\x92\x9C\a"+
		"\'\x2\x2\x93\x9C\a(\x2\x2\x94\x9C\a)\x2\x2\x95\x9C\a*\x2\x2\x96\x98\a"+
		"+\x2\x2\x97\x99\aI\x2\x2\x98\x97\x3\x2\x2\x2\x98\x99\x3\x2\x2\x2\x99\x9C"+
		"\x3\x2\x2\x2\x9A\x9C\a-\x2\x2\x9B\x8F\x3\x2\x2\x2\x9B\x90\x3\x2\x2\x2"+
		"\x9B\x91\x3\x2\x2\x2\x9B\x92\x3\x2\x2\x2\x9B\x93\x3\x2\x2\x2\x9B\x94\x3"+
		"\x2\x2\x2\x9B\x95\x3\x2\x2\x2\x9B\x96\x3\x2\x2\x2\x9B\x9A\x3\x2\x2\x2"+
		"\x9C\t\x3\x2\x2\x2\x9D\x9E\a\x3\x2\x2\x9E\xA0\x5\x12\n\x2\x9F\xA1\x5\x32"+
		"\x1A\x2\xA0\x9F\x3\x2\x2\x2\xA0\xA1\x3\x2\x2\x2\xA1\v\x3\x2\x2\x2\xA2"+
		"\xA7\x5\xE\b\x2\xA3\xA4\a\x4\x2\x2\xA4\xA6\x5\xE\b\x2\xA5\xA3\x3\x2\x2"+
		"\x2\xA6\xA9\x3\x2\x2\x2\xA7\xA5\x3\x2\x2\x2\xA7\xA8\x3\x2\x2\x2\xA8\r"+
		"\x3\x2\x2\x2\xA9\xA7\x3\x2\x2\x2\xAA\xB4\t\x2\x2\x2\xAB\xB1\a\x5\x2\x2"+
		"\xAC\xAD\aK\x2\x2\xAD\xAE\a\x6\x2\x2\xAE\xB0\aK\x2\x2\xAF\xAC\x3\x2\x2"+
		"\x2\xB0\xB3\x3\x2\x2\x2\xB1\xAF\x3\x2\x2\x2\xB1\xB2\x3\x2\x2\x2\xB2\xB5"+
		"\x3\x2\x2\x2\xB3\xB1\x3\x2\x2\x2\xB4\xAB\x3\x2\x2\x2\xB4\xB5\x3\x2\x2"+
		"\x2\xB5\xF\x3\x2\x2\x2\xB6\xB8\t\x3\x2\x2\xB7\xB9\a\t\x2\x2\xB8\xB7\x3"+
		"\x2\x2\x2\xB8\xB9\x3\x2\x2\x2\xB9\xBF\x3\x2\x2\x2\xBA\xBC\x5\x12\n\x2"+
		"\xBB\xBD\x5\x32\x1A\x2\xBC\xBB\x3\x2\x2\x2\xBC\xBD\x3\x2\x2\x2\xBD\xC0"+
		"\x3\x2\x2\x2\xBE\xC0\x5\x1E\x10\x2\xBF\xBA\x3\x2\x2\x2\xBF\xBE\x3\x2\x2"+
		"\x2\xC0\x11\x3\x2\x2\x2\xC1\xC5\x5\x14\v\x2\xC2\xC5\x5\x16\f\x2\xC3\xC5"+
		"\x5\x18\r\x2\xC4\xC1\x3\x2\x2\x2\xC4\xC2\x3\x2\x2\x2\xC4\xC3\x3\x2\x2"+
		"\x2\xC5\x13\x3\x2\x2\x2\xC6\xC8\x5\x1A\xE\x2\xC7\xC9\x5\x1C\xF\x2\xC8"+
		"\xC7\x3\x2\x2\x2\xC8\xC9\x3\x2\x2\x2\xC9\xCB\x3\x2\x2\x2\xCA\xCC\aJ\x2"+
		"\x2\xCB\xCA\x3\x2\x2\x2\xCB\xCC\x3\x2\x2\x2\xCC\xD3\x3\x2\x2\x2\xCD\xD0"+
		"\a\n\x2\x2\xCE\xD0\a\v\x2\x2\xCF\xCD\x3\x2\x2\x2\xCF\xCE\x3\x2\x2\x2\xD0"+
		"\xD1\x3\x2\x2\x2\xD1\xD4\x5(\x15\x2\xD2\xD4\a\v\x2\x2\xD3\xCF\x3\x2\x2"+
		"\x2\xD3\xD2\x3\x2\x2\x2\xD3\xD4\x3\x2\x2\x2\xD4\xD5\x3\x2\x2\x2\xD5\xD6"+
		"\a\f\x2\x2\xD6\xDB\x5\x12\n\x2\xD7\xD8\a\r\x2\x2\xD8\xDA\x5\x12\n\x2\xD9"+
		"\xD7\x3\x2\x2\x2\xDA\xDD\x3\x2\x2\x2\xDB\xD9\x3\x2\x2\x2\xDB\xDC\x3\x2"+
		"\x2\x2\xDC\xDE\x3\x2\x2\x2\xDD\xDB\x3\x2\x2\x2\xDE\xDF\a\x4\x2\x2\xDF"+
		"\x15\x3\x2\x2\x2\xE0\xE2\x5\x1A\xE\x2\xE1\xE3\x5\x1C\xF\x2\xE2\xE1\x3"+
		"\x2\x2\x2\xE2\xE3\x3\x2\x2\x2\xE3\xE5\x3\x2\x2\x2\xE4\xE6\aJ\x2\x2\xE5"+
		"\xE4\x3\x2\x2\x2\xE5\xE6\x3\x2\x2\x2\xE6\xE8\x3\x2\x2\x2\xE7\xE9\a\v\x2"+
		"\x2\xE8\xE7\x3\x2\x2\x2\xE8\xE9\x3\x2\x2\x2\xE9\xEA\x3\x2\x2\x2\xEA\xEB"+
		"\a\x5\x2\x2\xEB\xEC\x5\x1E\x10\x2\xEC\x17\x3\x2\x2\x2\xED\xEF\x5\x1A\xE"+
		"\x2\xEE\xF0\a\v\x2\x2\xEF\xEE\x3\x2\x2\x2\xEF\xF0\x3\x2\x2\x2\xF0\xF1"+
		"\x3\x2\x2\x2\xF1\xF2\a\x4\x2\x2\xF2\x19\x3\x2\x2\x2\xF3\xF4\aI\x2\x2\xF4"+
		"\x1B\x3\x2\x2\x2\xF5\xF6\aP\x2\x2\xF6\xF7\t\x4\x2\x2\xF7\x1D\x3\x2\x2"+
		"\x2\xF8\xF9\x5$\x13\x2\xF9\xFA\x5 \x11\x2\xFA\x1F\x3\x2\x2\x2\xFB\xFD"+
		"\t\x5\x2\x2\xFC\xFE\a<\x2\x2\xFD\xFC\x3\x2\x2\x2\xFD\xFE\x3\x2\x2\x2\xFE"+
		"\x100\x3\x2\x2\x2\xFF\x101\x5\"\x12\x2\x100\xFF\x3\x2\x2\x2\x100\x101"+
		"\x3\x2\x2\x2\x101!\x3\x2\x2\x2\x102\x104\a\x11\x2\x2\x103\x105\a\x12\x2"+
		"\x2\x104\x103\x3\x2\x2\x2\x104\x105\x3\x2\x2\x2\x105\x10C\x3\x2\x2\x2"+
		"\x106\x107\a\x11\x2\x2\x107\x108\a\x13\x2\x2\x108\x109\x5\x34\x1B\x2\x109"+
		"\x10A\a\x14\x2\x2\x10A\x10C\x3\x2\x2\x2\x10B\x102\x3\x2\x2\x2\x10B\x106"+
		"\x3\x2\x2\x2\x10C#\x3\x2\x2\x2\x10D\x10E\x5(\x15\x2\x10E\x10F\x5&\x14"+
		"\x2\x10F\x112\x3\x2\x2\x2\x110\x112\x5,\x17\x2\x111\x10D\x3\x2\x2\x2\x111"+
		"\x110\x3\x2\x2\x2\x112%\x3\x2\x2\x2\x113\x117\a\x15\x2\x2\x114\x115\a"+
		"\x5\x2\x2\x115\x117\x5.\x18\x2\x116\x113\x3\x2\x2\x2\x116\x114\x3\x2\x2"+
		"\x2\x117\'\x3\x2\x2\x2\x118\x11B\x5*\x16\x2\x119\x11B\x5,\x17\x2\x11A"+
		"\x118\x3\x2\x2\x2\x11A\x119\x3\x2\x2\x2\x11B)\x3\x2\x2\x2\x11C\x11D\b"+
		"\x16\x1\x2\x11D\x11E\t\x6\x2\x2\x11E\x128\x5*\x16\x5\x11F\x120\a\x16\x2"+
		"\x2\x120\x121\x5,\x17\x2\x121\x122\a\x17\x2\x2\x122\x128\x3\x2\x2\x2\x123"+
		"\x124\a\x16\x2\x2\x124\x125\x5*\x16\x2\x125\x126\a\x17\x2\x2\x126\x128"+
		"\x3\x2\x2\x2\x127\x11C\x3\x2\x2\x2\x127\x11F\x3\x2\x2\x2\x127\x123\x3"+
		"\x2\x2\x2\x128\x131\x3\x2\x2\x2\x129\x12A\f\a\x2\x2\x12A\x12B\aP\x2\x2"+
		"\x12B\x130\x5*\x16\b\x12C\x12D\f\x6\x2\x2\x12D\x12E\t\x6\x2\x2\x12E\x130"+
		"\x5*\x16\a\x12F\x129\x3\x2\x2\x2\x12F\x12C\x3\x2\x2\x2\x130\x133\x3\x2"+
		"\x2\x2\x131\x12F\x3\x2\x2\x2\x131\x132\x3\x2\x2\x2\x132+\x3\x2\x2\x2\x133"+
		"\x131\x3\x2\x2\x2\x134\x136\x5.\x18\x2\x135\x134\x3\x2\x2\x2\x135\x136"+
		"\x3\x2\x2\x2\x136\x138\x3\x2\x2\x2\x137\x139\t\a\x2\x2\x138\x137\x3\x2"+
		"\x2\x2\x138\x139\x3\x2\x2\x2\x139\x13B\x3\x2\x2\x2\x13A\x13C\x5\x32\x1A"+
		"\x2\x13B\x13A\x3\x2\x2\x2\x13B\x13C\x3\x2\x2\x2\x13C\x13E\x3\x2\x2\x2"+
		"\x13D\x13F\aG\x2\x2\x13E\x13D\x3\x2\x2\x2\x13E\x13F\x3\x2\x2\x2\x13F\x141"+
		"\x3\x2\x2\x2\x140\x142\aH\x2\x2\x141\x140\x3\x2\x2\x2\x141\x142\x3\x2"+
		"\x2\x2\x142\x144\x3\x2\x2\x2\x143\x145\a\x46\x2\x2\x144\x143\x3\x2\x2"+
		"\x2\x144\x145\x3\x2\x2\x2\x145-\x3\x2\x2\x2\x146\x147\b\x18\x1\x2\x147"+
		"\x148\t\x6\x2\x2\x148\x14F\x5.\x18\x5\x149\x14F\x5\x30\x19\x2\x14A\x14B"+
		"\a\x19\x2\x2\x14B\x14C\x5.\x18\x2\x14C\x14D\a\x1A\x2\x2\x14D\x14F\x3\x2"+
		"\x2\x2\x14E\x146\x3\x2\x2\x2\x14E\x149\x3\x2\x2\x2\x14E\x14A\x3\x2\x2"+
		"\x2\x14F\x158\x3\x2\x2\x2\x150\x151\f\a\x2\x2\x151\x152\aP\x2\x2\x152"+
		"\x157\x5.\x18\b\x153\x154\f\x6\x2\x2\x154\x155\t\x6\x2\x2\x155\x157\x5"+
		".\x18\a\x156\x150\x3\x2\x2\x2\x156\x153\x3\x2\x2\x2\x157\x15A\x3\x2\x2"+
		"\x2\x158\x156\x3\x2\x2\x2\x158\x159\x3\x2\x2\x2\x159/\x3\x2\x2\x2\x15A"+
		"\x158\x3\x2\x2\x2\x15B\x15D\t\b\x2\x2\x15C\x15B\x3\x2\x2\x2\x15C\x15D"+
		"\x3\x2\x2\x2\x15D\x15F\x3\x2\x2\x2\x15E\x160\aK\x2\x2\x15F\x15E\x3\x2"+
		"\x2\x2\x15F\x160\x3\x2\x2\x2\x160\x162\x3\x2\x2\x2\x161\x163\aJ\x2\x2"+
		"\x162\x161\x3\x2\x2\x2\x162\x163\x3\x2\x2\x2\x163\x165\x3\x2\x2\x2\x164"+
		"\x166\t\t\x2\x2\x165\x164\x3\x2\x2\x2\x165\x166\x3\x2\x2\x2\x166\x31\x3"+
		"\x2\x2\x2\x167\x16E\a\x12\x2\x2\x168\x16E\x5\x34\x1B\x2\x169\x16A\a\x13"+
		"\x2\x2\x16A\x16B\x5\x34\x1B\x2\x16B\x16C\a\x14\x2\x2\x16C\x16E\x3\x2\x2"+
		"\x2\x16D\x167\x3\x2\x2\x2\x16D\x168\x3\x2\x2\x2\x16D\x169\x3\x2\x2\x2"+
		"\x16E\x33\x3\x2\x2\x2\x16F\x17A\a>\x2\x2\x170\x17A\a?\x2\x2\x171\x172"+
		"\x5\x38\x1D\x2\x172\x174\t\n\x2\x2\x173\x175\x5\x38\x1D\x2\x174\x173\x3"+
		"\x2\x2\x2\x174\x175\x3\x2\x2\x2\x175\x17A\x3\x2\x2\x2\x176\x177\t\n\x2"+
		"\x2\x177\x17A\x5\x38\x1D\x2\x178\x17A\x5\x38\x1D\x2\x179\x16F\x3\x2\x2"+
		"\x2\x179\x170\x3\x2\x2\x2\x179\x171\x3\x2\x2\x2\x179\x176\x3\x2\x2\x2"+
		"\x179\x178\x3\x2\x2\x2\x17A\x35\x3\x2\x2\x2\x17B\x17F\a>\x2\x2\x17C\x17F"+
		"\a\x12\x2\x2\x17D\x17F\x5\x38\x1D\x2\x17E\x17B\x3\x2\x2\x2\x17E\x17C\x3"+
		"\x2\x2\x2\x17E\x17D\x3\x2\x2\x2\x17F\x37\x3\x2\x2\x2\x180\x185\x5:\x1E"+
		"\x2\x181\x185\x5<\x1F\x2\x182\x185\x5> \x2\x183\x185\x5@!\x2\x184\x180"+
		"\x3\x2\x2\x2\x184\x181\x3\x2\x2\x2\x184\x182\x3\x2\x2\x2\x184\x183\x3"+
		"\x2\x2\x2\x185\x39\x3\x2\x2\x2\x186\x187\a@\x2\x2\x187;\x3\x2\x2\x2\x188"+
		"\x189\t\v\x2\x2\x189=\x3\x2\x2\x2\x18A\x18B\a\x45\x2\x2\x18B?\x3\x2\x2"+
		"\x2\x18C\x18D\t\f\x2\x2\x18D\x41\x3\x2\x2\x2\x18E\x199\x5\x44#\x2\x18F"+
		"\x199\x5\x46$\x2\x190\x199\x5H%\x2\x191\x199\x5J&\x2\x192\x199\x5L\'\x2"+
		"\x193\x199\x5N(\x2\x194\x199\x5P)\x2\x195\x199\x5R*\x2\x196\x199\x5T+"+
		"\x2\x197\x199\x5V,\x2\x198\x18E\x3\x2\x2\x2\x198\x18F\x3\x2\x2\x2\x198"+
		"\x190\x3\x2\x2\x2\x198\x191\x3\x2\x2\x2\x198\x192\x3\x2\x2\x2\x198\x193"+
		"\x3\x2\x2\x2\x198\x194\x3\x2\x2\x2\x198\x195\x3\x2\x2\x2\x198\x196\x3"+
		"\x2\x2\x2\x198\x197\x3\x2\x2\x2\x199\x43\x3\x2\x2\x2\x19A\x19C\a\x1E\x2"+
		"\x2\x19B\x19D\t\r\x2\x2\x19C\x19B\x3\x2\x2\x2\x19C\x19D\x3\x2\x2\x2\x19D"+
		"\x19F\x3\x2\x2\x2\x19E\x1A0\x5\x36\x1C\x2\x19F\x19E\x3\x2\x2\x2\x19F\x1A0"+
		"\x3\x2\x2\x2\x1A0\x1A2\x3\x2\x2\x2\x1A1\x1A3\x5l\x37\x2\x1A2\x1A1\x3\x2"+
		"\x2\x2\x1A2\x1A3\x3\x2\x2\x2\x1A3\x45\x3\x2\x2\x2\x1A4\x1A5\a\x1E\x2\x2"+
		"\x1A5\x1A7\a\x32\x2\x2\x1A6\x1A8\x5l\x37\x2\x1A7\x1A6\x3\x2\x2\x2\x1A7"+
		"\x1A8\x3\x2\x2\x2\x1A8G\x3\x2\x2\x2\x1A9\x1AA\a\x1E\x2\x2\x1AA\x1AC\a"+
		"\x33\x2\x2\x1AB\x1AD\x5l\x37\x2\x1AC\x1AB\x3\x2\x2\x2\x1AC\x1AD\x3\x2"+
		"\x2\x2\x1AD\x1AF\x3\x2\x2\x2\x1AE\x1B0\x5\x32\x1A\x2\x1AF\x1AE\x3\x2\x2"+
		"\x2\x1AF\x1B0\x3\x2\x2\x2\x1B0\x1B3\x3\x2\x2\x2\x1B1\x1B2\a\x5\x2\x2\x1B2"+
		"\x1B4\x5(\x15\x2\x1B3\x1B1\x3\x2\x2\x2\x1B3\x1B4\x3\x2\x2\x2\x1B4I\x3"+
		"\x2\x2\x2\x1B5\x1B6\a\x1E\x2\x2\x1B6\x1B8\a\x34\x2\x2\x1B7\x1B9\x5l\x37"+
		"\x2\x1B8\x1B7\x3\x2\x2\x2\x1B8\x1B9\x3\x2\x2\x2\x1B9\x1BB\x3\x2\x2\x2"+
		"\x1BA\x1BC\x5\x32\x1A\x2\x1BB\x1BA\x3\x2\x2\x2\x1BB\x1BC\x3\x2\x2\x2\x1BC"+
		"\x1BF\x3\x2\x2\x2\x1BD\x1BE\a\x5\x2\x2\x1BE\x1C0\x5(\x15\x2\x1BF\x1BD"+
		"\x3\x2\x2\x2\x1BF\x1C0\x3\x2\x2\x2\x1C0K\x3\x2\x2\x2\x1C1\x1C2\a\x1E\x2"+
		"\x2\x1C2\x1C4\a\x35\x2\x2\x1C3\x1C5\x5l\x37\x2\x1C4\x1C3\x3\x2\x2\x2\x1C4"+
		"\x1C5\x3\x2\x2\x2\x1C5M\x3\x2\x2\x2\x1C6\x1C7\a\x1E\x2\x2\x1C7\x1C9\a"+
		"\x36\x2\x2\x1C8\x1CA\x5l\x37\x2\x1C9\x1C8\x3\x2\x2\x2\x1C9\x1CA\x3\x2"+
		"\x2\x2\x1CA\x1CC\x3\x2\x2\x2\x1CB\x1CD\x5\x32\x1A\x2\x1CC\x1CB\x3\x2\x2"+
		"\x2\x1CC\x1CD\x3\x2\x2\x2\x1CDO\x3\x2\x2\x2\x1CE\x1CF\a\x1E\x2\x2\x1CF"+
		"\x1D1\a\x38\x2\x2\x1D0\x1D2\x5l\x37\x2\x1D1\x1D0\x3\x2\x2\x2\x1D1\x1D2"+
		"\x3\x2\x2\x2\x1D2\x1D4\x3\x2\x2\x2\x1D3\x1D5\x5\x32\x1A\x2\x1D4\x1D3\x3"+
		"\x2\x2\x2\x1D4\x1D5\x3\x2\x2\x2\x1D5\x1D8\x3\x2\x2\x2\x1D6\x1D7\a\x5\x2"+
		"\x2\x1D7\x1D9\x5(\x15\x2\x1D8\x1D6\x3\x2\x2\x2\x1D8\x1D9\x3\x2\x2\x2\x1D9"+
		"Q\x3\x2\x2\x2\x1DA\x1DB\a\x1E\x2\x2\x1DB\x1DD\a\x37\x2\x2\x1DC\x1DE\x5"+
		"l\x37\x2\x1DD\x1DC\x3\x2\x2\x2\x1DD\x1DE\x3\x2\x2\x2\x1DE\x1E1\x3\x2\x2"+
		"\x2\x1DF\x1E0\a\x5\x2\x2\x1E0\x1E2\x5(\x15\x2\x1E1\x1DF\x3\x2\x2\x2\x1E1"+
		"\x1E2\x3\x2\x2\x2\x1E2S\x3\x2\x2\x2\x1E3\x1E4\a\x1E\x2\x2\x1E4\x1E6\a"+
		"\x39\x2\x2\x1E5\x1E7\a:\x2\x2\x1E6\x1E5\x3\x2\x2\x2\x1E6\x1E7\x3\x2\x2"+
		"\x2\x1E7\x1E9\x3\x2\x2\x2\x1E8\x1EA\x5l\x37\x2\x1E9\x1E8\x3\x2\x2\x2\x1E9"+
		"\x1EA\x3\x2\x2\x2\x1EA\x1EC\x3\x2\x2\x2\x1EB\x1ED\x5\x32\x1A\x2\x1EC\x1EB"+
		"\x3\x2\x2\x2\x1EC\x1ED\x3\x2\x2\x2\x1EDU\x3\x2\x2\x2\x1EE\x1EF\a\x1E\x2"+
		"\x2\x1EF\x1F1\a;\x2\x2\x1F0\x1F2\x5l\x37\x2\x1F1\x1F0\x3\x2\x2\x2\x1F1"+
		"\x1F2\x3\x2\x2\x2\x1F2W\x3\x2\x2\x2\x1F3\x1FD\x5Z.\x2\x1F4\x1FD\x5\\/"+
		"\x2\x1F5\x1FD\x5^\x30\x2\x1F6\x1FD\x5`\x31\x2\x1F7\x1FD\x5\x62\x32\x2"+
		"\x1F8\x1FD\x5\x64\x33\x2\x1F9\x1FD\x5\x66\x34\x2\x1FA\x1FD\x5h\x35\x2"+
		"\x1FB\x1FD\x5j\x36\x2\x1FC\x1F3\x3\x2\x2\x2\x1FC\x1F4\x3\x2\x2\x2\x1FC"+
		"\x1F5\x3\x2\x2\x2\x1FC\x1F6\x3\x2\x2\x2\x1FC\x1F7\x3\x2\x2\x2\x1FC\x1F8"+
		"\x3\x2\x2\x2\x1FC\x1F9\x3\x2\x2\x2\x1FC\x1FA\x3\x2\x2\x2\x1FC\x1FB\x3"+
		"\x2\x2\x2\x1FDY\x3\x2\x2\x2\x1FE\x200\a\x1F\x2\x2\x1FF\x201\t\r\x2\x2"+
		"\x200\x1FF\x3\x2\x2\x2\x200\x201\x3\x2\x2\x2\x201\x203\x3\x2\x2\x2\x202"+
		"\x204\x5\x36\x1C\x2\x203\x202\x3\x2\x2\x2\x203\x204\x3\x2\x2\x2\x204\x206"+
		"\x3\x2\x2\x2\x205\x207\x5l\x37\x2\x206\x205\x3\x2\x2\x2\x206\x207\x3\x2"+
		"\x2\x2\x207[\x3\x2\x2\x2\x208\x209\a\x1F\x2\x2\x209\x20B\a\x32\x2\x2\x20A"+
		"\x20C\x5l\x37\x2\x20B\x20A\x3\x2\x2\x2\x20B\x20C\x3\x2\x2\x2\x20C]\x3"+
		"\x2\x2\x2\x20D\x20E\a\x1F\x2\x2\x20E\x210\a\x33\x2\x2\x20F\x211\x5l\x37"+
		"\x2\x210\x20F\x3\x2\x2\x2\x210\x211\x3\x2\x2\x2\x211\x213\x3\x2\x2\x2"+
		"\x212\x214\x5\x32\x1A\x2\x213\x212\x3\x2\x2\x2\x213\x214\x3\x2\x2\x2\x214"+
		"\x217\x3\x2\x2\x2\x215\x216\a\x5\x2\x2\x216\x218\x5(\x15\x2\x217\x215"+
		"\x3\x2\x2\x2\x217\x218\x3\x2\x2\x2\x218_\x3\x2\x2\x2\x219\x21A\a\x1F\x2"+
		"\x2\x21A\x21C\a\x34\x2\x2\x21B\x21D\x5l\x37\x2\x21C\x21B\x3\x2\x2\x2\x21C"+
		"\x21D\x3\x2\x2\x2\x21D\x21F\x3\x2\x2\x2\x21E\x220\x5\x32\x1A\x2\x21F\x21E"+
		"\x3\x2\x2\x2\x21F\x220\x3\x2\x2\x2\x220\x223\x3\x2\x2\x2\x221\x222\a\x5"+
		"\x2\x2\x222\x224\x5(\x15\x2\x223\x221\x3\x2\x2\x2\x223\x224\x3\x2\x2\x2"+
		"\x224\x61\x3\x2\x2\x2\x225\x226\a\x1F\x2\x2\x226\x228\a\x35\x2\x2\x227"+
		"\x229\x5l\x37\x2\x228\x227\x3\x2\x2\x2\x228\x229\x3\x2\x2\x2\x229\x63"+
		"\x3\x2\x2\x2\x22A\x22B\a\x1F\x2\x2\x22B\x22D\a\x36\x2\x2\x22C\x22E\x5"+
		"l\x37\x2\x22D\x22C\x3\x2\x2\x2\x22D\x22E\x3\x2\x2\x2\x22E\x230\x3\x2\x2"+
		"\x2\x22F\x231\x5\x32\x1A\x2\x230\x22F\x3\x2\x2\x2\x230\x231\x3\x2\x2\x2"+
		"\x231\x65\x3\x2\x2\x2\x232\x233\a\x1F\x2\x2\x233\x235\a\x38\x2\x2\x234"+
		"\x236\x5l\x37\x2\x235\x234\x3\x2\x2\x2\x235\x236\x3\x2\x2\x2\x236\x238"+
		"\x3\x2\x2\x2\x237\x239\x5\x32\x1A\x2\x238\x237\x3\x2\x2\x2\x238\x239\x3"+
		"\x2\x2\x2\x239\x23C\x3\x2\x2\x2\x23A\x23B\a\x5\x2\x2\x23B\x23D\x5(\x15"+
		"\x2\x23C\x23A\x3\x2\x2\x2\x23C\x23D\x3\x2\x2\x2\x23Dg\x3\x2\x2\x2\x23E"+
		"\x23F\a\x1F\x2\x2\x23F\x241\a\x39\x2\x2\x240\x242\a:\x2\x2\x241\x240\x3"+
		"\x2\x2\x2\x241\x242\x3\x2\x2\x2\x242\x244\x3\x2\x2\x2\x243\x245\x5l\x37"+
		"\x2\x244\x243\x3\x2\x2\x2\x244\x245\x3\x2\x2\x2\x245\x247\x3\x2\x2\x2"+
		"\x246\x248\x5\x32\x1A\x2\x247\x246\x3\x2\x2\x2\x247\x248\x3\x2\x2\x2\x248"+
		"i\x3\x2\x2\x2\x249\x24A\a\x1F\x2\x2\x24A\x24C\a;\x2\x2\x24B\x24D\x5l\x37"+
		"\x2\x24C\x24B\x3\x2\x2\x2\x24C\x24D\x3\x2\x2\x2\x24Dk\x3\x2\x2\x2\x24E"+
		"\x24F\b\x37\x1\x2\x24F\x250\t\x6\x2\x2\x250\x257\x5l\x37\x5\x251\x257"+
		"\x5n\x38\x2\x252\x253\a\x19\x2\x2\x253\x254\x5l\x37\x2\x254\x255\a\x1A"+
		"\x2\x2\x255\x257\x3\x2\x2\x2\x256\x24E\x3\x2\x2\x2\x256\x251\x3\x2\x2"+
		"\x2\x256\x252\x3\x2\x2\x2\x257\x260\x3\x2\x2\x2\x258\x259\f\a\x2\x2\x259"+
		"\x25A\aP\x2\x2\x25A\x25F\x5l\x37\b\x25B\x25C\f\x6\x2\x2\x25C\x25D\t\x6"+
		"\x2\x2\x25D\x25F\x5l\x37\a\x25E\x258\x3\x2\x2\x2\x25E\x25B\x3\x2\x2\x2"+
		"\x25F\x262\x3\x2\x2\x2\x260\x25E\x3\x2\x2\x2\x260\x261\x3\x2\x2\x2\x261"+
		"m\x3\x2\x2\x2\x262\x260\x3\x2\x2\x2\x263\x265\a=\x2\x2\x264\x263\x3\x2"+
		"\x2\x2\x264\x265\x3\x2\x2\x2\x265\x267\x3\x2\x2\x2\x266\x268\aI\x2\x2"+
		"\x267\x266\x3\x2\x2\x2\x267\x268\x3\x2\x2\x2\x268\x26A\x3\x2\x2\x2\x269"+
		"\x26B\aH\x2\x2\x26A\x269\x3\x2\x2\x2\x26A\x26B\x3\x2\x2\x2\x26B\x270\x3"+
		"\x2\x2\x2\x26C\x26D\a \x2\x2\x26D\x26E\x5\x34\x1B\x2\x26E\x26F\a!\x2\x2"+
		"\x26F\x271\x3\x2\x2\x2\x270\x26C\x3\x2\x2\x2\x270\x271\x3\x2\x2\x2\x271"+
		"o\x3\x2\x2\x2\x272\x277\x5r:\x2\x273\x277\x5t;\x2\x274\x277\x5v<\x2\x275"+
		"\x277\x5x=\x2\x276\x272\x3\x2\x2\x2\x276\x273\x3\x2\x2\x2\x276\x274\x3"+
		"\x2\x2\x2\x276\x275\x3\x2\x2\x2\x277q\x3\x2\x2\x2\x278\x279\a\"\x2\x2"+
		"\x279\x27B\a\x37\x2\x2\x27A\x27C\x5\x32\x1A\x2\x27B\x27A\x3\x2\x2\x2\x27B"+
		"\x27C\x3\x2\x2\x2\x27Cs\x3\x2\x2\x2\x27D\x27E\a\"\x2\x2\x27E\x280\a\x39"+
		"\x2\x2\x27F\x281\x5\x32\x1A\x2\x280\x27F\x3\x2\x2\x2\x280\x281\x3\x2\x2"+
		"\x2\x281u\x3\x2\x2\x2\x282\x283\a#\x2\x2\x283\x285\a\x37\x2\x2\x284\x286"+
		"\x5\x32\x1A\x2\x285\x284\x3\x2\x2\x2\x285\x286\x3\x2\x2\x2\x286w\x3\x2"+
		"\x2\x2\x287\x288\a#\x2\x2\x288\x28A\a\x39\x2\x2\x289\x28B\x5\x32\x1A\x2"+
		"\x28A\x289\x3\x2\x2\x2\x28A\x28B\x3\x2\x2\x2\x28By\x3\x2\x2\x2k\x86\x8C"+
		"\x98\x9B\xA0\xA7\xB1\xB4\xB8\xBC\xBF\xC4\xC8\xCB\xCF\xD3\xDB\xE2\xE5\xE8"+
		"\xEF\xFD\x100\x104\x10B\x111\x116\x11A\x127\x12F\x131\x135\x138\x13B\x13E"+
		"\x141\x144\x14E\x156\x158\x15C\x15F\x162\x165\x16D\x174\x179\x17E\x184"+
		"\x198\x19C\x19F\x1A2\x1A7\x1AC\x1AF\x1B3\x1B8\x1BB\x1BF\x1C4\x1C9\x1CC"+
		"\x1D1\x1D4\x1D8\x1DD\x1E1\x1E6\x1E9\x1EC\x1F1\x1FC\x200\x203\x206\x20B"+
		"\x210\x213\x217\x21C\x21F\x223\x228\x22D\x230\x235\x238\x23C\x241\x244"+
		"\x247\x24C\x256\x25E\x260\x264\x267\x26A\x270\x276\x27B\x280\x285\x28A";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace AccountingServer.Shell.Parsing
