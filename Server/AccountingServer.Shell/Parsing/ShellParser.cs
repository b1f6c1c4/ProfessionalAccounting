//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.4.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\b1f6c1c4\Documents\GitHub\ProfessionalAccounting\Server\AccountingServer.QueryGeneration\Shell.g4 by ANTLR 4.4.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace AccountingServer.Shell.Parsing {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.4.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class ShellParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		ChartArea=32, Series=33, Ignore=34, Launch=35, Connect=36, Shutdown=37, 
		Backup=38, Help=39, Titles=40, Exit=41, Check=42, EditNamedQueries=43, 
		AOAll=44, AOList=45, AOQuery=46, AORegister=47, AOUnregister=48, AORecalc=49, 
		AOResetSoft=50, AOResetHard=51, AOResetMixed=52, AOApply=53, AOCollapse=54, 
		AOCheck=55, SubtotalFields=56, Guid=57, RangeNull=58, RangeAllNotNull=59, 
		RangeAYear=60, RangeAMonth=61, RangeDeltaMonth=62, RangeADay=63, RangeDeltaDay=64, 
		RangeDeltaWeek=65, VoucherType=66, CaretQuotedString=67, PercentQuotedString=68, 
		DollarQuotedString=69, DoubleQuotedString=70, SingleQuotedString=71, DetailTitle=72, 
		DetailTitleSubTitle=73, Float=74, Percent=75, Intersect=76, Union=77, 
		Substract=78, WS=79;
	public const int
		RULE_command = 0, RULE_autoCommand = 1, RULE_otherCommand = 2, RULE_chart = 3, 
		RULE_chartLevels = 4, RULE_chartLevel = 5, RULE_report = 6, RULE_namedQuery = 7, 
		RULE_namedQueries = 8, RULE_namedQ = 9, RULE_namedQueryReference = 10, 
		RULE_name = 11, RULE_coef = 12, RULE_groupedQuery = 13, RULE_subtotal = 14, 
		RULE_subtotalAggr = 15, RULE_voucherDetailQuery = 16, RULE_emit = 17, 
		RULE_vouchers = 18, RULE_vouchersB = 19, RULE_voucherQuery = 20, RULE_details = 21, 
		RULE_detailQuery = 22, RULE_range = 23, RULE_rangeCore = 24, RULE_rangePoint = 25, 
		RULE_rangeCertainPoint = 26, RULE_rangeYear = 27, RULE_rangeMonth = 28, 
		RULE_rangeWeek = 29, RULE_rangeDay = 30, RULE_asset = 31, RULE_assetList = 32, 
		RULE_assetQuery = 33, RULE_assetRegister = 34, RULE_assetUnregister = 35, 
		RULE_assetRedep = 36, RULE_assetResetSoft = 37, RULE_assetResetMixed = 38, 
		RULE_assetResetHard = 39, RULE_assetApply = 40, RULE_assetCheck = 41, 
		RULE_amort = 42, RULE_amortList = 43, RULE_amortQuery = 44, RULE_amortRegister = 45, 
		RULE_amortUnregister = 46, RULE_amortReamo = 47, RULE_amortResetSoft = 48, 
		RULE_amortResetMixed = 49, RULE_amortApply = 50, RULE_amortCheck = 51, 
		RULE_distributedQ = 52, RULE_distributedQAtom = 53, RULE_carry = 54, RULE_carryMonthResetHard = 55, 
		RULE_carryMonth = 56, RULE_carryYearResetHard = 57, RULE_carryYear = 58;
	public static readonly string[] ruleNames = {
		"command", "autoCommand", "otherCommand", "chart", "chartLevels", "chartLevel", 
		"report", "namedQuery", "namedQueries", "namedQ", "namedQueryReference", 
		"name", "coef", "groupedQuery", "subtotal", "subtotalAggr", "voucherDetailQuery", 
		"emit", "vouchers", "vouchersB", "voucherQuery", "details", "detailQuery", 
		"range", "rangeCore", "rangePoint", "rangeCertainPoint", "rangeYear", 
		"rangeMonth", "rangeWeek", "rangeDay", "asset", "assetList", "assetQuery", 
		"assetRegister", "assetUnregister", "assetRedep", "assetResetSoft", "assetResetMixed", 
		"assetResetHard", "assetApply", "assetCheck", "amort", "amortList", "amortQuery", 
		"amortRegister", "amortUnregister", "amortReamo", "amortResetSoft", "amortResetMixed", 
		"amortApply", "amortCheck", "distributedQ", "distributedQAtom", "carry", 
		"carryMonthResetHard", "carryMonth", "carryYearResetHard", "carryYear"
	};

	private static readonly string[] _LiteralNames = {
		null, "'ch'", "';'", "':'", "'='", "'rp'", "'::'", "'|'", "'`'", "'``'", 
		"'!'", "'D'", "'[]'", "'['", "']'", "'A'", "'{'", "'}'", "'E'", "'('", 
		"')'", "'>'", "'<'", "'~'", "'@'", "'#'", "'a'", "'o'", "'[['", "']]'", 
		"'ca'", "'caa'", "'chartArea'", "'series'", "'ignore'", null, null, null, 
		"'backup'", null, null, "'exit'", null, "'nq'", "'-all'", null, null, 
		null, null, null, "'-reset-soft'", "'-reset-hard'", "'-reset-mixed'", 
		null, null, "'-chk'", null, null, "'null'", "'~null'", null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "'*'", "'+'", "'-'", "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "ChartArea", "Series", 
		"Ignore", "Launch", "Connect", "Shutdown", "Backup", "Help", "Titles", 
		"Exit", "Check", "EditNamedQueries", "AOAll", "AOList", "AOQuery", "AORegister", 
		"AOUnregister", "AORecalc", "AOResetSoft", "AOResetHard", "AOResetMixed", 
		"AOApply", "AOCollapse", "AOCheck", "SubtotalFields", "Guid", "RangeNull", 
		"RangeAllNotNull", "RangeAYear", "RangeAMonth", "RangeDeltaMonth", "RangeADay", 
		"RangeDeltaDay", "RangeDeltaWeek", "VoucherType", "CaretQuotedString", 
		"PercentQuotedString", "DollarQuotedString", "DoubleQuotedString", "SingleQuotedString", 
		"DetailTitle", "DetailTitleSubTitle", "Float", "Percent", "Intersect", 
		"Union", "Substract", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Shell.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public ShellParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CommandContext : ParserRuleContext {
		public AssetContext asset() {
			return GetRuleContext<AssetContext>(0);
		}
		public GroupedQueryContext groupedQuery() {
			return GetRuleContext<GroupedQueryContext>(0);
		}
		public ChartContext chart() {
			return GetRuleContext<ChartContext>(0);
		}
		public AmortContext amort() {
			return GetRuleContext<AmortContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(ShellParser.Eof, 0); }
		public AutoCommandContext autoCommand() {
			return GetRuleContext<AutoCommandContext>(0);
		}
		public OtherCommandContext otherCommand() {
			return GetRuleContext<OtherCommandContext>(0);
		}
		public CarryContext carry() {
			return GetRuleContext<CarryContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public ReportContext report() {
			return GetRuleContext<ReportContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_command);
		try {
			State = 145;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 118; autoCommand();
				State = 119; Match(Eof);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 121; vouchers();
				State = 122; Match(Eof);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 124; groupedQuery();
				State = 125; Match(Eof);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 127; chart();
				State = 128; Match(Eof);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 130; report();
				State = 131; Match(Eof);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 133; asset();
				State = 134; Match(Eof);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 136; amort();
				State = 137; Match(Eof);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 139; carry();
				State = 140; Match(Eof);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 142; otherCommand();
				State = 143; Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AutoCommandContext : ParserRuleContext {
		public ITerminalNode DollarQuotedString() { return GetToken(ShellParser.DollarQuotedString, 0); }
		public ITerminalNode SingleQuotedString(int i) {
			return GetToken(ShellParser.SingleQuotedString, i);
		}
		public IReadOnlyList<ITerminalNode> SingleQuotedString() { return GetTokens(ShellParser.SingleQuotedString); }
		public AutoCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_autoCommand; } }
	}

	[RuleVersion(0)]
	public AutoCommandContext autoCommand() {
		AutoCommandContext _localctx = new AutoCommandContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_autoCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147; Match(DollarQuotedString);
			State = 151;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==SingleQuotedString) {
				{
				{
				State = 148; Match(SingleQuotedString);
				}
				}
				State = 153;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherCommandContext : ParserRuleContext {
		public ITerminalNode Connect() { return GetToken(ShellParser.Connect, 0); }
		public ITerminalNode Backup() { return GetToken(ShellParser.Backup, 0); }
		public ITerminalNode EditNamedQueries() { return GetToken(ShellParser.EditNamedQueries, 0); }
		public ITerminalNode Shutdown() { return GetToken(ShellParser.Shutdown, 0); }
		public ITerminalNode Help() { return GetToken(ShellParser.Help, 0); }
		public ITerminalNode Check() { return GetToken(ShellParser.Check, 0); }
		public ITerminalNode Launch() { return GetToken(ShellParser.Launch, 0); }
		public ITerminalNode Exit() { return GetToken(ShellParser.Exit, 0); }
		public ITerminalNode Titles() { return GetToken(ShellParser.Titles, 0); }
		public OtherCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherCommand; } }
	}

	[RuleVersion(0)]
	public OtherCommandContext otherCommand() {
		OtherCommandContext _localctx = new OtherCommandContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_otherCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Launch) | (1L << Connect) | (1L << Shutdown) | (1L << Backup) | (1L << Help) | (1L << Titles) | (1L << Exit) | (1L << Check) | (1L << EditNamedQueries))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChartContext : ParserRuleContext {
		public NamedQueryContext namedQuery() {
			return GetRuleContext<NamedQueryContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ChartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chart; } }
	}

	[RuleVersion(0)]
	public ChartContext chart() {
		ChartContext _localctx = new ChartContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_chart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156; Match(T__0);
			State = 157; namedQuery();
			State = 159;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 158; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChartLevelsContext : ParserRuleContext {
		public ChartLevelContext chartLevel(int i) {
			return GetRuleContext<ChartLevelContext>(i);
		}
		public IReadOnlyList<ChartLevelContext> chartLevel() {
			return GetRuleContexts<ChartLevelContext>();
		}
		public ChartLevelsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chartLevels; } }
	}

	[RuleVersion(0)]
	public ChartLevelsContext chartLevels() {
		ChartLevelsContext _localctx = new ChartLevelsContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_chartLevels);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161; chartLevel();
			State = 166;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__1) {
				{
				{
				State = 162; Match(T__1);
				State = 163; chartLevel();
				}
				}
				State = 168;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChartLevelContext : ParserRuleContext {
		public ITerminalNode Series() { return GetToken(ShellParser.Series, 0); }
		public ITerminalNode SingleQuotedString(int i) {
			return GetToken(ShellParser.SingleQuotedString, i);
		}
		public ITerminalNode Ignore() { return GetToken(ShellParser.Ignore, 0); }
		public IReadOnlyList<ITerminalNode> SingleQuotedString() { return GetTokens(ShellParser.SingleQuotedString); }
		public ITerminalNode ChartArea() { return GetToken(ShellParser.ChartArea, 0); }
		public ChartLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chartLevel; } }
	}

	[RuleVersion(0)]
	public ChartLevelContext chartLevel() {
		ChartLevelContext _localctx = new ChartLevelContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_chartLevel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ChartArea) | (1L << Series) | (1L << Ignore))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 179;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 170; Match(T__2);
				State = 176;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==SingleQuotedString) {
					{
					{
					State = 171; Match(SingleQuotedString);
					State = 172; Match(T__3);
					State = 173; Match(SingleQuotedString);
					}
					}
					State = 178;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReportContext : ParserRuleContext {
		public NamedQueryContext namedQuery() {
			return GetRuleContext<NamedQueryContext>(0);
		}
		public GroupedQueryContext groupedQuery() {
			return GetRuleContext<GroupedQueryContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ReportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_report; } }
	}

	[RuleVersion(0)]
	public ReportContext report() {
		ReportContext _localctx = new ReportContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_report);
		int _la;
		try {
			State = 188;
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 181; Match(T__4);
				State = 182; namedQuery();
				State = 184;
				_la = _input.La(1);
				if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
					{
					State = 183; range();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 186; Match(T__4);
				State = 187; groupedQuery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedQueryContext : ParserRuleContext {
		public NamedQContext namedQ() {
			return GetRuleContext<NamedQContext>(0);
		}
		public NamedQueryReferenceContext namedQueryReference() {
			return GetRuleContext<NamedQueryReferenceContext>(0);
		}
		public NamedQueriesContext namedQueries() {
			return GetRuleContext<NamedQueriesContext>(0);
		}
		public NamedQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedQuery; } }
	}

	[RuleVersion(0)]
	public NamedQueryContext namedQuery() {
		NamedQueryContext _localctx = new NamedQueryContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_namedQuery);
		try {
			State = 193;
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 190; namedQueries();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 191; namedQ();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 192; namedQueryReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedQueriesContext : ParserRuleContext {
		public CoefContext coef() {
			return GetRuleContext<CoefContext>(0);
		}
		public IReadOnlyList<NamedQueryContext> namedQuery() {
			return GetRuleContexts<NamedQueryContext>();
		}
		public ITerminalNode DoubleQuotedString() { return GetToken(ShellParser.DoubleQuotedString, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NamedQueryContext namedQuery(int i) {
			return GetRuleContext<NamedQueryContext>(i);
		}
		public NamedQueriesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedQueries; } }
	}

	[RuleVersion(0)]
	public NamedQueriesContext namedQueries() {
		NamedQueriesContext _localctx = new NamedQueriesContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_namedQueries);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195; name();
			State = 197;
			_la = _input.La(1);
			if (_la==Intersect) {
				{
				State = 196; coef();
				}
			}

			State = 200;
			_la = _input.La(1);
			if (_la==DoubleQuotedString) {
				{
				State = 199; Match(DoubleQuotedString);
				}
			}

			State = 202; Match(T__5);
			State = 203; namedQuery();
			State = 208;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__6) {
				{
				{
				State = 204; Match(T__6);
				State = 205; namedQuery();
				}
				}
				State = 210;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 211; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedQContext : ParserRuleContext {
		public CoefContext coef() {
			return GetRuleContext<CoefContext>(0);
		}
		public GroupedQueryContext groupedQuery() {
			return GetRuleContext<GroupedQueryContext>(0);
		}
		public ITerminalNode DoubleQuotedString() { return GetToken(ShellParser.DoubleQuotedString, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NamedQContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedQ; } }
	}

	[RuleVersion(0)]
	public NamedQContext namedQ() {
		NamedQContext _localctx = new NamedQContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_namedQ);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213; name();
			State = 215;
			_la = _input.La(1);
			if (_la==Intersect) {
				{
				State = 214; coef();
				}
			}

			State = 218;
			_la = _input.La(1);
			if (_la==DoubleQuotedString) {
				{
				State = 217; Match(DoubleQuotedString);
				}
			}

			State = 220; Match(T__2);
			State = 221; groupedQuery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedQueryReferenceContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NamedQueryReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedQueryReference; } }
	}

	[RuleVersion(0)]
	public NamedQueryReferenceContext namedQueryReference() {
		NamedQueryReferenceContext _localctx = new NamedQueryReferenceContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_namedQueryReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223; name();
			State = 224; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public ITerminalNode DollarQuotedString() { return GetToken(ShellParser.DollarQuotedString, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226; Match(DollarQuotedString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CoefContext : ParserRuleContext {
		public ITerminalNode Percent() { return GetToken(ShellParser.Percent, 0); }
		public ITerminalNode Float() { return GetToken(ShellParser.Float, 0); }
		public CoefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coef; } }
	}

	[RuleVersion(0)]
	public CoefContext coef() {
		CoefContext _localctx = new CoefContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_coef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228; Match(Intersect);
			State = 229;
			_la = _input.La(1);
			if ( !(_la==Float || _la==Percent) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupedQueryContext : ParserRuleContext {
		public SubtotalContext subtotal() {
			return GetRuleContext<SubtotalContext>(0);
		}
		public VoucherDetailQueryContext voucherDetailQuery() {
			return GetRuleContext<VoucherDetailQueryContext>(0);
		}
		public GroupedQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupedQuery; } }
	}

	[RuleVersion(0)]
	public GroupedQueryContext groupedQuery() {
		GroupedQueryContext _localctx = new GroupedQueryContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_groupedQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231; voucherDetailQuery();
			State = 232; subtotal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtotalContext : ParserRuleContext {
		public IToken SubtotalMark;
		public ITerminalNode SubtotalFields() { return GetToken(ShellParser.SubtotalFields, 0); }
		public SubtotalAggrContext subtotalAggr() {
			return GetRuleContext<SubtotalAggrContext>(0);
		}
		public SubtotalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtotal; } }
	}

	[RuleVersion(0)]
	public SubtotalContext subtotal() {
		SubtotalContext _localctx = new SubtotalContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_subtotal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			_localctx.SubtotalMark = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__8) | (1L << T__9))) != 0)) ) {
				_localctx.SubtotalMark = _errHandler.RecoverInline(this);
			}
			Consume();
			State = 236;
			_la = _input.La(1);
			if (_la==SubtotalFields) {
				{
				State = 235; Match(SubtotalFields);
				}
			}

			State = 239;
			_la = _input.La(1);
			if (_la==T__10) {
				{
				State = 238; subtotalAggr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtotalAggrContext : ParserRuleContext {
		public IToken IsAll;
		public RangeCoreContext rangeCore() {
			return GetRuleContext<RangeCoreContext>(0);
		}
		public SubtotalAggrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtotalAggr; } }
	}

	[RuleVersion(0)]
	public SubtotalAggrContext subtotalAggr() {
		SubtotalAggrContext _localctx = new SubtotalAggrContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_subtotalAggr);
		try {
			State = 250;
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 241; Match(T__10);
				State = 243;
				switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
				case 1:
					{
					State = 242; _localctx.IsAll = Match(T__11);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 245; Match(T__10);
				State = 246; Match(T__12);
				State = 247; rangeCore();
				State = 248; Match(T__13);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoucherDetailQueryContext : ParserRuleContext {
		public VoucherQueryContext voucherQuery() {
			return GetRuleContext<VoucherQueryContext>(0);
		}
		public EmitContext emit() {
			return GetRuleContext<EmitContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public VoucherDetailQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voucherDetailQuery; } }
	}

	[RuleVersion(0)]
	public VoucherDetailQueryContext voucherDetailQuery() {
		VoucherDetailQueryContext _localctx = new VoucherDetailQueryContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_voucherDetailQuery);
		try {
			State = 256;
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 252; vouchers();
				State = 253; emit();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 255; voucherQuery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmitContext : ParserRuleContext {
		public IToken Op;
		public DetailsContext details() {
			return GetRuleContext<DetailsContext>(0);
		}
		public EmitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emit; } }
	}

	[RuleVersion(0)]
	public EmitContext emit() {
		EmitContext _localctx = new EmitContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_emit);
		try {
			State = 261;
			switch (_input.La(1)) {
			case T__14:
				EnterOuterAlt(_localctx, 1);
				{
				State = 258; _localctx.Op = Match(T__14);
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 259; Match(T__2);
				State = 260; details(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VouchersContext : ParserRuleContext {
		public VoucherQueryContext voucherQuery() {
			return GetRuleContext<VoucherQueryContext>(0);
		}
		public VouchersBContext vouchersB() {
			return GetRuleContext<VouchersBContext>(0);
		}
		public VouchersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vouchers; } }
	}

	[RuleVersion(0)]
	public VouchersContext vouchers() {
		VouchersContext _localctx = new VouchersContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_vouchers);
		try {
			State = 265;
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 263; vouchersB(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 264; voucherQuery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VouchersBContext : ParserRuleContext {
		public IToken Op;
		public VouchersBContext vouchersB(int i) {
			return GetRuleContext<VouchersBContext>(i);
		}
		public VoucherQueryContext voucherQuery() {
			return GetRuleContext<VoucherQueryContext>(0);
		}
		public IReadOnlyList<VouchersBContext> vouchersB() {
			return GetRuleContexts<VouchersBContext>();
		}
		public VouchersBContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vouchersB; } }
	}

	[RuleVersion(0)]
	public VouchersBContext vouchersB() {
		return vouchersB(0);
	}

	private VouchersBContext vouchersB(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		VouchersBContext _localctx = new VouchersBContext(_ctx, _parentState);
		VouchersBContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_vouchersB, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				{
				State = 268;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==Union || _la==Substract) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 269; vouchersB(3);
				}
				break;

			case 2:
				{
				State = 270; Match(T__15);
				State = 271; voucherQuery();
				State = 272; Match(T__16);
				}
				break;

			case 3:
				{
				State = 274; Match(T__15);
				State = 275; vouchersB(0);
				State = 276; Match(T__16);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 288;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,23,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 286;
					switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
					case 1:
						{
						_localctx = new VouchersBContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_vouchersB);
						State = 280;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 281; _localctx.Op = Match(Intersect);
						State = 282; vouchersB(6);
						}
						break;

					case 2:
						{
						_localctx = new VouchersBContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_vouchersB);
						State = 283;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 284;
						_localctx.Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==Union || _la==Substract) ) {
							_localctx.Op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 285; vouchersB(5);
						}
						break;
					}
					} 
				}
				State = 290;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,23,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VoucherQueryContext : ParserRuleContext {
		public IToken Op;
		public ITerminalNode CaretQuotedString() { return GetToken(ShellParser.CaretQuotedString, 0); }
		public ITerminalNode PercentQuotedString() { return GetToken(ShellParser.PercentQuotedString, 0); }
		public DetailsContext details() {
			return GetRuleContext<DetailsContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode VoucherType() { return GetToken(ShellParser.VoucherType, 0); }
		public VoucherQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voucherQuery; } }
	}

	[RuleVersion(0)]
	public VoucherQueryContext voucherQuery() {
		VoucherQueryContext _localctx = new VoucherQueryContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_voucherQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			switch ( Interpreter.AdaptivePredict(_input,24,_ctx) ) {
			case 1:
				{
				State = 291; details(0);
				}
				break;
			}
			State = 295;
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				{
				State = 294;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__14 || _la==T__17) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 298;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 297; range();
				}
			}

			State = 301;
			_la = _input.La(1);
			if (_la==CaretQuotedString) {
				{
				State = 300; Match(CaretQuotedString);
				}
			}

			State = 304;
			_la = _input.La(1);
			if (_la==PercentQuotedString) {
				{
				State = 303; Match(PercentQuotedString);
				}
			}

			State = 307;
			_la = _input.La(1);
			if (_la==VoucherType) {
				{
				State = 306; Match(VoucherType);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DetailsContext : ParserRuleContext {
		public IToken Op;
		public DetailsContext details(int i) {
			return GetRuleContext<DetailsContext>(i);
		}
		public IReadOnlyList<DetailsContext> details() {
			return GetRuleContexts<DetailsContext>();
		}
		public DetailQueryContext detailQuery() {
			return GetRuleContext<DetailQueryContext>(0);
		}
		public DetailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_details; } }
	}

	[RuleVersion(0)]
	public DetailsContext details() {
		return details(0);
	}

	private DetailsContext details(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		DetailsContext _localctx = new DetailsContext(_ctx, _parentState);
		DetailsContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_details, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				State = 310;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==Union || _la==Substract) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 311; details(3);
				}
				break;

			case 2:
				{
				State = 312; detailQuery();
				}
				break;

			case 3:
				{
				State = 313; Match(T__18);
				State = 314; details(0);
				State = 315; Match(T__19);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 327;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,32,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 325;
					switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
					case 1:
						{
						_localctx = new DetailsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_details);
						State = 319;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 320; _localctx.Op = Match(Intersect);
						State = 321; details(6);
						}
						break;

					case 2:
						{
						_localctx = new DetailsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_details);
						State = 322;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 323;
						_localctx.Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==Union || _la==Substract) ) {
							_localctx.Op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 324; details(5);
						}
						break;
					}
					} 
				}
				State = 329;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,32,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DetailQueryContext : ParserRuleContext {
		public IToken Direction;
		public ITerminalNode DetailTitleSubTitle() { return GetToken(ShellParser.DetailTitleSubTitle, 0); }
		public ITerminalNode DoubleQuotedString() { return GetToken(ShellParser.DoubleQuotedString, 0); }
		public ITerminalNode SingleQuotedString() { return GetToken(ShellParser.SingleQuotedString, 0); }
		public ITerminalNode DetailTitle() { return GetToken(ShellParser.DetailTitle, 0); }
		public DetailQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_detailQuery; } }
	}

	[RuleVersion(0)]
	public DetailQueryContext detailQuery() {
		DetailQueryContext _localctx = new DetailQueryContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_detailQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				{
				State = 330;
				_la = _input.La(1);
				if ( !(_la==DetailTitle || _la==DetailTitleSubTitle) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 334;
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				{
				State = 333; Match(SingleQuotedString);
				}
				break;
			}
			State = 337;
			switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
			case 1:
				{
				State = 336; Match(DoubleQuotedString);
				}
				break;
			}
			State = 340;
			switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
			case 1:
				{
				State = 339;
				_localctx.Direction = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__20 || _la==T__21) ) {
					_localctx.Direction = _errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public RangeCoreContext Core;
		public RangeCoreContext rangeCore() {
			return GetRuleContext<RangeCoreContext>(0);
		}
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_range);
		try {
			State = 348;
			switch (_input.La(1)) {
			case T__11:
				EnterOuterAlt(_localctx, 1);
				{
				State = 342; Match(T__11);
				}
				break;
			case T__3:
			case T__22:
			case T__23:
			case T__24:
			case RangeNull:
			case RangeAllNotNull:
			case RangeAYear:
			case RangeAMonth:
			case RangeDeltaMonth:
			case RangeADay:
			case RangeDeltaDay:
			case RangeDeltaWeek:
				EnterOuterAlt(_localctx, 2);
				{
				State = 343; _localctx.Core = rangeCore();
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 3);
				{
				State = 344; Match(T__12);
				State = 345; _localctx.Core = rangeCore();
				State = 346; Match(T__13);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeCoreContext : ParserRuleContext {
		public RangeCertainPointContext Begin;
		public IToken Op;
		public RangeCertainPointContext End;
		public RangeCertainPointContext Certain;
		public ITerminalNode RangeNull() { return GetToken(ShellParser.RangeNull, 0); }
		public RangeCertainPointContext rangeCertainPoint(int i) {
			return GetRuleContext<RangeCertainPointContext>(i);
		}
		public ITerminalNode RangeAllNotNull() { return GetToken(ShellParser.RangeAllNotNull, 0); }
		public IReadOnlyList<RangeCertainPointContext> rangeCertainPoint() {
			return GetRuleContexts<RangeCertainPointContext>();
		}
		public RangeCoreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeCore; } }
	}

	[RuleVersion(0)]
	public RangeCoreContext rangeCore() {
		RangeCoreContext _localctx = new RangeCoreContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_rangeCore);
		int _la;
		try {
			State = 360;
			switch ( Interpreter.AdaptivePredict(_input,39,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 350; Match(RangeNull);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 351; Match(RangeAllNotNull);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 352; _localctx.Begin = rangeCertainPoint();
				State = 353;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__3 || _la==T__22) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 355;
				_la = _input.La(1);
				if (((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & ((1L << (T__23 - 24)) | (1L << (T__24 - 24)) | (1L << (RangeAYear - 24)) | (1L << (RangeAMonth - 24)) | (1L << (RangeDeltaMonth - 24)) | (1L << (RangeADay - 24)) | (1L << (RangeDeltaDay - 24)) | (1L << (RangeDeltaWeek - 24)))) != 0)) {
					{
					State = 354; _localctx.End = rangeCertainPoint();
					}
				}

				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 357;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__3 || _la==T__22) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 358; _localctx.End = rangeCertainPoint();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 359; _localctx.Certain = rangeCertainPoint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangePointContext : ParserRuleContext {
		public IToken All;
		public ITerminalNode RangeNull() { return GetToken(ShellParser.RangeNull, 0); }
		public RangeCertainPointContext rangeCertainPoint() {
			return GetRuleContext<RangeCertainPointContext>(0);
		}
		public RangePointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangePoint; } }
	}

	[RuleVersion(0)]
	public RangePointContext rangePoint() {
		RangePointContext _localctx = new RangePointContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_rangePoint);
		try {
			State = 365;
			switch (_input.La(1)) {
			case RangeNull:
				EnterOuterAlt(_localctx, 1);
				{
				State = 362; Match(RangeNull);
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 363; _localctx.All = Match(T__11);
				}
				break;
			case T__23:
			case T__24:
			case RangeAYear:
			case RangeAMonth:
			case RangeDeltaMonth:
			case RangeADay:
			case RangeDeltaDay:
			case RangeDeltaWeek:
				EnterOuterAlt(_localctx, 3);
				{
				State = 364; rangeCertainPoint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeCertainPointContext : ParserRuleContext {
		public RangeWeekContext rangeWeek() {
			return GetRuleContext<RangeWeekContext>(0);
		}
		public RangeYearContext rangeYear() {
			return GetRuleContext<RangeYearContext>(0);
		}
		public RangeMonthContext rangeMonth() {
			return GetRuleContext<RangeMonthContext>(0);
		}
		public RangeDayContext rangeDay() {
			return GetRuleContext<RangeDayContext>(0);
		}
		public RangeCertainPointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeCertainPoint; } }
	}

	[RuleVersion(0)]
	public RangeCertainPointContext rangeCertainPoint() {
		RangeCertainPointContext _localctx = new RangeCertainPointContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_rangeCertainPoint);
		try {
			State = 371;
			switch (_input.La(1)) {
			case RangeAYear:
				EnterOuterAlt(_localctx, 1);
				{
				State = 367; rangeYear();
				}
				break;
			case T__23:
			case T__24:
			case RangeAMonth:
			case RangeDeltaMonth:
				EnterOuterAlt(_localctx, 2);
				{
				State = 368; rangeMonth();
				}
				break;
			case RangeDeltaWeek:
				EnterOuterAlt(_localctx, 3);
				{
				State = 369; rangeWeek();
				}
				break;
			case RangeADay:
			case RangeDeltaDay:
				EnterOuterAlt(_localctx, 4);
				{
				State = 370; rangeDay();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeYearContext : ParserRuleContext {
		public ITerminalNode RangeAYear() { return GetToken(ShellParser.RangeAYear, 0); }
		public RangeYearContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeYear; } }
	}

	[RuleVersion(0)]
	public RangeYearContext rangeYear() {
		RangeYearContext _localctx = new RangeYearContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_rangeYear);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373; Match(RangeAYear);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeMonthContext : ParserRuleContext {
		public IToken Modifier;
		public ITerminalNode RangeDeltaMonth() { return GetToken(ShellParser.RangeDeltaMonth, 0); }
		public ITerminalNode RangeAMonth() { return GetToken(ShellParser.RangeAMonth, 0); }
		public RangeMonthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeMonth; } }
	}

	[RuleVersion(0)]
	public RangeMonthContext rangeMonth() {
		RangeMonthContext _localctx = new RangeMonthContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_rangeMonth);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			_la = _input.La(1);
			if (_la==T__23 || _la==T__24) {
				{
				State = 375;
				_localctx.Modifier = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==T__23 || _la==T__24) ) {
					_localctx.Modifier = _errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			State = 378;
			_la = _input.La(1);
			if ( !(_la==RangeAMonth || _la==RangeDeltaMonth) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeWeekContext : ParserRuleContext {
		public ITerminalNode RangeDeltaWeek() { return GetToken(ShellParser.RangeDeltaWeek, 0); }
		public RangeWeekContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeWeek; } }
	}

	[RuleVersion(0)]
	public RangeWeekContext rangeWeek() {
		RangeWeekContext _localctx = new RangeWeekContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_rangeWeek);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380; Match(RangeDeltaWeek);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeDayContext : ParserRuleContext {
		public ITerminalNode RangeADay() { return GetToken(ShellParser.RangeADay, 0); }
		public ITerminalNode RangeDeltaDay() { return GetToken(ShellParser.RangeDeltaDay, 0); }
		public RangeDayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeDay; } }
	}

	[RuleVersion(0)]
	public RangeDayContext rangeDay() {
		RangeDayContext _localctx = new RangeDayContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_rangeDay);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			_la = _input.La(1);
			if ( !(_la==RangeADay || _la==RangeDeltaDay) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetContext : ParserRuleContext {
		public AssetRegisterContext assetRegister() {
			return GetRuleContext<AssetRegisterContext>(0);
		}
		public AssetUnregisterContext assetUnregister() {
			return GetRuleContext<AssetUnregisterContext>(0);
		}
		public AssetResetMixedContext assetResetMixed() {
			return GetRuleContext<AssetResetMixedContext>(0);
		}
		public AssetResetHardContext assetResetHard() {
			return GetRuleContext<AssetResetHardContext>(0);
		}
		public AssetResetSoftContext assetResetSoft() {
			return GetRuleContext<AssetResetSoftContext>(0);
		}
		public AssetApplyContext assetApply() {
			return GetRuleContext<AssetApplyContext>(0);
		}
		public AssetListContext assetList() {
			return GetRuleContext<AssetListContext>(0);
		}
		public AssetQueryContext assetQuery() {
			return GetRuleContext<AssetQueryContext>(0);
		}
		public AssetCheckContext assetCheck() {
			return GetRuleContext<AssetCheckContext>(0);
		}
		public AssetRedepContext assetRedep() {
			return GetRuleContext<AssetRedepContext>(0);
		}
		public AssetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asset; } }
	}

	[RuleVersion(0)]
	public AssetContext asset() {
		AssetContext _localctx = new AssetContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_asset);
		try {
			State = 394;
			switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 384; assetList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 385; assetQuery();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 386; assetRegister();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 387; assetUnregister();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 388; assetRedep();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 389; assetResetSoft();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 390; assetResetMixed();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 391; assetResetHard();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 392; assetApply();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 393; assetCheck();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetListContext : ParserRuleContext {
		public ITerminalNode AOList() { return GetToken(ShellParser.AOList, 0); }
		public ITerminalNode AOAll() { return GetToken(ShellParser.AOAll, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangePointContext rangePoint() {
			return GetRuleContext<RangePointContext>(0);
		}
		public AssetListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetList; } }
	}

	[RuleVersion(0)]
	public AssetListContext assetList() {
		AssetListContext _localctx = new AssetListContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_assetList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396; Match(T__25);
			State = 398;
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				{
				State = 397;
				_la = _input.La(1);
				if ( !(_la==AOAll || _la==AOList) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 401;
			switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
			case 1:
				{
				State = 400; rangePoint();
				}
				break;
			}
			State = 404;
			switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
			case 1:
				{
				State = 403; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetQueryContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOQuery() { return GetToken(ShellParser.AOQuery, 0); }
		public AssetQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetQuery; } }
	}

	[RuleVersion(0)]
	public AssetQueryContext assetQuery() {
		AssetQueryContext _localctx = new AssetQueryContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_assetQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406; Match(T__25);
			State = 407; Match(AOQuery);
			State = 409;
			switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
			case 1:
				{
				State = 408; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetRegisterContext : ParserRuleContext {
		public ITerminalNode AORegister() { return GetToken(ShellParser.AORegister, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AssetRegisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetRegister; } }
	}

	[RuleVersion(0)]
	public AssetRegisterContext assetRegister() {
		AssetRegisterContext _localctx = new AssetRegisterContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_assetRegister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411; Match(T__25);
			State = 412; Match(AORegister);
			State = 414;
			switch ( Interpreter.AdaptivePredict(_input,48,_ctx) ) {
			case 1:
				{
				State = 413; distributedQ(0);
				}
				break;
			}
			State = 417;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 416; range();
				}
			}

			State = 421;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 419; Match(T__2);
				State = 420; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetUnregisterContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode AOUnregister() { return GetToken(ShellParser.AOUnregister, 0); }
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AssetUnregisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetUnregister; } }
	}

	[RuleVersion(0)]
	public AssetUnregisterContext assetUnregister() {
		AssetUnregisterContext _localctx = new AssetUnregisterContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_assetUnregister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423; Match(T__25);
			State = 424; Match(AOUnregister);
			State = 426;
			switch ( Interpreter.AdaptivePredict(_input,51,_ctx) ) {
			case 1:
				{
				State = 425; distributedQ(0);
				}
				break;
			}
			State = 429;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 428; range();
				}
			}

			State = 433;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 431; Match(T__2);
				State = 432; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetRedepContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AORecalc() { return GetToken(ShellParser.AORecalc, 0); }
		public AssetRedepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetRedep; } }
	}

	[RuleVersion(0)]
	public AssetRedepContext assetRedep() {
		AssetRedepContext _localctx = new AssetRedepContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_assetRedep);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435; Match(T__25);
			State = 436; Match(AORecalc);
			State = 438;
			switch ( Interpreter.AdaptivePredict(_input,54,_ctx) ) {
			case 1:
				{
				State = 437; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetResetSoftContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOResetSoft() { return GetToken(ShellParser.AOResetSoft, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AssetResetSoftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetResetSoft; } }
	}

	[RuleVersion(0)]
	public AssetResetSoftContext assetResetSoft() {
		AssetResetSoftContext _localctx = new AssetResetSoftContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_assetResetSoft);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440; Match(T__25);
			State = 441; Match(AOResetSoft);
			State = 443;
			switch ( Interpreter.AdaptivePredict(_input,55,_ctx) ) {
			case 1:
				{
				State = 442; distributedQ(0);
				}
				break;
			}
			State = 446;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 445; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetResetMixedContext : ParserRuleContext {
		public ITerminalNode AOResetMixed() { return GetToken(ShellParser.AOResetMixed, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AssetResetMixedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetResetMixed; } }
	}

	[RuleVersion(0)]
	public AssetResetMixedContext assetResetMixed() {
		AssetResetMixedContext _localctx = new AssetResetMixedContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_assetResetMixed);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448; Match(T__25);
			State = 449; Match(AOResetMixed);
			State = 451;
			switch ( Interpreter.AdaptivePredict(_input,57,_ctx) ) {
			case 1:
				{
				State = 450; distributedQ(0);
				}
				break;
			}
			State = 454;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 453; range();
				}
			}

			State = 458;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 456; Match(T__2);
				State = 457; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetResetHardContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOResetHard() { return GetToken(ShellParser.AOResetHard, 0); }
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AssetResetHardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetResetHard; } }
	}

	[RuleVersion(0)]
	public AssetResetHardContext assetResetHard() {
		AssetResetHardContext _localctx = new AssetResetHardContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_assetResetHard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460; Match(T__25);
			State = 461; Match(AOResetHard);
			State = 463;
			switch ( Interpreter.AdaptivePredict(_input,60,_ctx) ) {
			case 1:
				{
				State = 462; distributedQ(0);
				}
				break;
			}
			State = 467;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 465; Match(T__2);
				State = 466; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetApplyContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOCollapse() { return GetToken(ShellParser.AOCollapse, 0); }
		public ITerminalNode AOApply() { return GetToken(ShellParser.AOApply, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AssetApplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetApply; } }
	}

	[RuleVersion(0)]
	public AssetApplyContext assetApply() {
		AssetApplyContext _localctx = new AssetApplyContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_assetApply);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 469; Match(T__25);
			State = 470; Match(AOApply);
			State = 472;
			switch ( Interpreter.AdaptivePredict(_input,62,_ctx) ) {
			case 1:
				{
				State = 471; Match(AOCollapse);
				}
				break;
			}
			State = 475;
			switch ( Interpreter.AdaptivePredict(_input,63,_ctx) ) {
			case 1:
				{
				State = 474; distributedQ(0);
				}
				break;
			}
			State = 478;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 477; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetCheckContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOCheck() { return GetToken(ShellParser.AOCheck, 0); }
		public AssetCheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetCheck; } }
	}

	[RuleVersion(0)]
	public AssetCheckContext assetCheck() {
		AssetCheckContext _localctx = new AssetCheckContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_assetCheck);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 480; Match(T__25);
			State = 481; Match(AOCheck);
			State = 483;
			switch ( Interpreter.AdaptivePredict(_input,65,_ctx) ) {
			case 1:
				{
				State = 482; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortContext : ParserRuleContext {
		public AmortReamoContext amortReamo() {
			return GetRuleContext<AmortReamoContext>(0);
		}
		public AmortQueryContext amortQuery() {
			return GetRuleContext<AmortQueryContext>(0);
		}
		public AmortCheckContext amortCheck() {
			return GetRuleContext<AmortCheckContext>(0);
		}
		public AmortResetMixedContext amortResetMixed() {
			return GetRuleContext<AmortResetMixedContext>(0);
		}
		public AmortResetSoftContext amortResetSoft() {
			return GetRuleContext<AmortResetSoftContext>(0);
		}
		public AmortRegisterContext amortRegister() {
			return GetRuleContext<AmortRegisterContext>(0);
		}
		public AmortUnregisterContext amortUnregister() {
			return GetRuleContext<AmortUnregisterContext>(0);
		}
		public AmortApplyContext amortApply() {
			return GetRuleContext<AmortApplyContext>(0);
		}
		public AmortListContext amortList() {
			return GetRuleContext<AmortListContext>(0);
		}
		public AmortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amort; } }
	}

	[RuleVersion(0)]
	public AmortContext amort() {
		AmortContext _localctx = new AmortContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_amort);
		try {
			State = 494;
			switch ( Interpreter.AdaptivePredict(_input,66,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 485; amortList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 486; amortQuery();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 487; amortRegister();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 488; amortUnregister();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 489; amortReamo();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 490; amortResetSoft();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 491; amortResetMixed();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 492; amortApply();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 493; amortCheck();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortListContext : ParserRuleContext {
		public ITerminalNode AOList() { return GetToken(ShellParser.AOList, 0); }
		public ITerminalNode AOAll() { return GetToken(ShellParser.AOAll, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangePointContext rangePoint() {
			return GetRuleContext<RangePointContext>(0);
		}
		public AmortListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortList; } }
	}

	[RuleVersion(0)]
	public AmortListContext amortList() {
		AmortListContext _localctx = new AmortListContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_amortList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 496; Match(T__26);
			State = 498;
			switch ( Interpreter.AdaptivePredict(_input,67,_ctx) ) {
			case 1:
				{
				State = 497;
				_la = _input.La(1);
				if ( !(_la==AOAll || _la==AOList) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 501;
			switch ( Interpreter.AdaptivePredict(_input,68,_ctx) ) {
			case 1:
				{
				State = 500; rangePoint();
				}
				break;
			}
			State = 504;
			switch ( Interpreter.AdaptivePredict(_input,69,_ctx) ) {
			case 1:
				{
				State = 503; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortQueryContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOQuery() { return GetToken(ShellParser.AOQuery, 0); }
		public AmortQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortQuery; } }
	}

	[RuleVersion(0)]
	public AmortQueryContext amortQuery() {
		AmortQueryContext _localctx = new AmortQueryContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_amortQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 506; Match(T__26);
			State = 507; Match(AOQuery);
			State = 509;
			switch ( Interpreter.AdaptivePredict(_input,70,_ctx) ) {
			case 1:
				{
				State = 508; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortRegisterContext : ParserRuleContext {
		public ITerminalNode AORegister() { return GetToken(ShellParser.AORegister, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AmortRegisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortRegister; } }
	}

	[RuleVersion(0)]
	public AmortRegisterContext amortRegister() {
		AmortRegisterContext _localctx = new AmortRegisterContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_amortRegister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511; Match(T__26);
			State = 512; Match(AORegister);
			State = 514;
			switch ( Interpreter.AdaptivePredict(_input,71,_ctx) ) {
			case 1:
				{
				State = 513; distributedQ(0);
				}
				break;
			}
			State = 517;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 516; range();
				}
			}

			State = 521;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 519; Match(T__2);
				State = 520; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortUnregisterContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode AOUnregister() { return GetToken(ShellParser.AOUnregister, 0); }
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AmortUnregisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortUnregister; } }
	}

	[RuleVersion(0)]
	public AmortUnregisterContext amortUnregister() {
		AmortUnregisterContext _localctx = new AmortUnregisterContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_amortUnregister);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 523; Match(T__26);
			State = 524; Match(AOUnregister);
			State = 526;
			switch ( Interpreter.AdaptivePredict(_input,74,_ctx) ) {
			case 1:
				{
				State = 525; distributedQ(0);
				}
				break;
			}
			State = 529;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 528; range();
				}
			}

			State = 533;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 531; Match(T__2);
				State = 532; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortReamoContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AORecalc() { return GetToken(ShellParser.AORecalc, 0); }
		public AmortReamoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortReamo; } }
	}

	[RuleVersion(0)]
	public AmortReamoContext amortReamo() {
		AmortReamoContext _localctx = new AmortReamoContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_amortReamo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535; Match(T__26);
			State = 536; Match(AORecalc);
			State = 538;
			switch ( Interpreter.AdaptivePredict(_input,77,_ctx) ) {
			case 1:
				{
				State = 537; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortResetSoftContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOResetSoft() { return GetToken(ShellParser.AOResetSoft, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AmortResetSoftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortResetSoft; } }
	}

	[RuleVersion(0)]
	public AmortResetSoftContext amortResetSoft() {
		AmortResetSoftContext _localctx = new AmortResetSoftContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_amortResetSoft);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 540; Match(T__26);
			State = 541; Match(AOResetSoft);
			State = 543;
			switch ( Interpreter.AdaptivePredict(_input,78,_ctx) ) {
			case 1:
				{
				State = 542; distributedQ(0);
				}
				break;
			}
			State = 546;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 545; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortResetMixedContext : ParserRuleContext {
		public ITerminalNode AOResetMixed() { return GetToken(ShellParser.AOResetMixed, 0); }
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public VouchersContext vouchers() {
			return GetRuleContext<VouchersContext>(0);
		}
		public AmortResetMixedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortResetMixed; } }
	}

	[RuleVersion(0)]
	public AmortResetMixedContext amortResetMixed() {
		AmortResetMixedContext _localctx = new AmortResetMixedContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_amortResetMixed);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 548; Match(T__26);
			State = 549; Match(AOResetMixed);
			State = 551;
			switch ( Interpreter.AdaptivePredict(_input,80,_ctx) ) {
			case 1:
				{
				State = 550; distributedQ(0);
				}
				break;
			}
			State = 554;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 553; range();
				}
			}

			State = 558;
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 556; Match(T__2);
				State = 557; vouchers();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortApplyContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOCollapse() { return GetToken(ShellParser.AOCollapse, 0); }
		public ITerminalNode AOApply() { return GetToken(ShellParser.AOApply, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public AmortApplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortApply; } }
	}

	[RuleVersion(0)]
	public AmortApplyContext amortApply() {
		AmortApplyContext _localctx = new AmortApplyContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_amortApply);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 560; Match(T__26);
			State = 561; Match(AOApply);
			State = 563;
			switch ( Interpreter.AdaptivePredict(_input,83,_ctx) ) {
			case 1:
				{
				State = 562; Match(AOCollapse);
				}
				break;
			}
			State = 566;
			switch ( Interpreter.AdaptivePredict(_input,84,_ctx) ) {
			case 1:
				{
				State = 565; distributedQ(0);
				}
				break;
			}
			State = 569;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 568; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmortCheckContext : ParserRuleContext {
		public DistributedQContext distributedQ() {
			return GetRuleContext<DistributedQContext>(0);
		}
		public ITerminalNode AOCheck() { return GetToken(ShellParser.AOCheck, 0); }
		public AmortCheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amortCheck; } }
	}

	[RuleVersion(0)]
	public AmortCheckContext amortCheck() {
		AmortCheckContext _localctx = new AmortCheckContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_amortCheck);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 571; Match(T__26);
			State = 572; Match(AOCheck);
			State = 574;
			switch ( Interpreter.AdaptivePredict(_input,86,_ctx) ) {
			case 1:
				{
				State = 573; distributedQ(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DistributedQContext : ParserRuleContext {
		public IToken Op;
		public DistributedQAtomContext distributedQAtom() {
			return GetRuleContext<DistributedQAtomContext>(0);
		}
		public DistributedQContext distributedQ(int i) {
			return GetRuleContext<DistributedQContext>(i);
		}
		public IReadOnlyList<DistributedQContext> distributedQ() {
			return GetRuleContexts<DistributedQContext>();
		}
		public DistributedQContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distributedQ; } }
	}

	[RuleVersion(0)]
	public DistributedQContext distributedQ() {
		return distributedQ(0);
	}

	private DistributedQContext distributedQ(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		DistributedQContext _localctx = new DistributedQContext(_ctx, _parentState);
		DistributedQContext _prevctx = _localctx;
		int _startState = 104;
		EnterRecursionRule(_localctx, 104, RULE_distributedQ, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 584;
			switch ( Interpreter.AdaptivePredict(_input,87,_ctx) ) {
			case 1:
				{
				State = 577;
				_localctx.Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==Union || _la==Substract) ) {
					_localctx.Op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 578; distributedQ(3);
				}
				break;

			case 2:
				{
				State = 579; distributedQAtom();
				}
				break;

			case 3:
				{
				State = 580; Match(T__18);
				State = 581; distributedQ(0);
				State = 582; Match(T__19);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 594;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,89,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 592;
					switch ( Interpreter.AdaptivePredict(_input,88,_ctx) ) {
					case 1:
						{
						_localctx = new DistributedQContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_distributedQ);
						State = 586;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 587; _localctx.Op = Match(Intersect);
						State = 588; distributedQ(6);
						}
						break;

					case 2:
						{
						_localctx = new DistributedQContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_distributedQ);
						State = 589;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 590;
						_localctx.Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==Union || _la==Substract) ) {
							_localctx.Op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 591; distributedQ(5);
						}
						break;
					}
					} 
				}
				State = 596;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,89,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DistributedQAtomContext : ParserRuleContext {
		public ITerminalNode DollarQuotedString() { return GetToken(ShellParser.DollarQuotedString, 0); }
		public ITerminalNode PercentQuotedString() { return GetToken(ShellParser.PercentQuotedString, 0); }
		public ITerminalNode Guid() { return GetToken(ShellParser.Guid, 0); }
		public RangeCoreContext rangeCore() {
			return GetRuleContext<RangeCoreContext>(0);
		}
		public DistributedQAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distributedQAtom; } }
	}

	[RuleVersion(0)]
	public DistributedQAtomContext distributedQAtom() {
		DistributedQAtomContext _localctx = new DistributedQAtomContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_distributedQAtom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 598;
			switch ( Interpreter.AdaptivePredict(_input,90,_ctx) ) {
			case 1:
				{
				State = 597; Match(Guid);
				}
				break;
			}
			State = 601;
			switch ( Interpreter.AdaptivePredict(_input,91,_ctx) ) {
			case 1:
				{
				State = 600; Match(DollarQuotedString);
				}
				break;
			}
			State = 604;
			switch ( Interpreter.AdaptivePredict(_input,92,_ctx) ) {
			case 1:
				{
				State = 603; Match(PercentQuotedString);
				}
				break;
			}
			State = 610;
			switch ( Interpreter.AdaptivePredict(_input,93,_ctx) ) {
			case 1:
				{
				State = 606; Match(T__27);
				State = 607; rangeCore();
				State = 608; Match(T__28);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CarryContext : ParserRuleContext {
		public CarryMonthResetHardContext carryMonthResetHard() {
			return GetRuleContext<CarryMonthResetHardContext>(0);
		}
		public CarryYearContext carryYear() {
			return GetRuleContext<CarryYearContext>(0);
		}
		public CarryYearResetHardContext carryYearResetHard() {
			return GetRuleContext<CarryYearResetHardContext>(0);
		}
		public CarryMonthContext carryMonth() {
			return GetRuleContext<CarryMonthContext>(0);
		}
		public CarryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_carry; } }
	}

	[RuleVersion(0)]
	public CarryContext carry() {
		CarryContext _localctx = new CarryContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_carry);
		try {
			State = 616;
			switch ( Interpreter.AdaptivePredict(_input,94,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 612; carryMonthResetHard();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 613; carryMonth();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 614; carryYearResetHard();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 615; carryYear();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CarryMonthResetHardContext : ParserRuleContext {
		public ITerminalNode AOResetHard() { return GetToken(ShellParser.AOResetHard, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public CarryMonthResetHardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_carryMonthResetHard; } }
	}

	[RuleVersion(0)]
	public CarryMonthResetHardContext carryMonthResetHard() {
		CarryMonthResetHardContext _localctx = new CarryMonthResetHardContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_carryMonthResetHard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 618; Match(T__29);
			State = 619; Match(AOResetHard);
			State = 621;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 620; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CarryMonthContext : ParserRuleContext {
		public ITerminalNode AOApply() { return GetToken(ShellParser.AOApply, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public CarryMonthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_carryMonth; } }
	}

	[RuleVersion(0)]
	public CarryMonthContext carryMonth() {
		CarryMonthContext _localctx = new CarryMonthContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_carryMonth);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 623; Match(T__29);
			State = 624; Match(AOApply);
			State = 626;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 625; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CarryYearResetHardContext : ParserRuleContext {
		public ITerminalNode AOResetHard() { return GetToken(ShellParser.AOResetHard, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public CarryYearResetHardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_carryYearResetHard; } }
	}

	[RuleVersion(0)]
	public CarryYearResetHardContext carryYearResetHard() {
		CarryYearResetHardContext _localctx = new CarryYearResetHardContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_carryYearResetHard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 628; Match(T__30);
			State = 629; Match(AOResetHard);
			State = 631;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 630; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CarryYearContext : ParserRuleContext {
		public ITerminalNode AOApply() { return GetToken(ShellParser.AOApply, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public CarryYearContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_carryYear; } }
	}

	[RuleVersion(0)]
	public CarryYearContext carryYear() {
		CarryYearContext _localctx = new CarryYearContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_carryYear);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 633; Match(T__30);
			State = 634; Match(AOApply);
			State = 636;
			_la = _input.La(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__11 - 4)) | (1L << (T__12 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (RangeNull - 4)) | (1L << (RangeAllNotNull - 4)) | (1L << (RangeAYear - 4)) | (1L << (RangeAMonth - 4)) | (1L << (RangeDeltaMonth - 4)) | (1L << (RangeADay - 4)) | (1L << (RangeDeltaDay - 4)) | (1L << (RangeDeltaWeek - 4)))) != 0)) {
				{
				State = 635; range();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 19: return vouchersB_sempred((VouchersBContext)_localctx, predIndex);

		case 21: return details_sempred((DetailsContext)_localctx, predIndex);

		case 52: return distributedQ_sempred((DistributedQContext)_localctx, predIndex);
		}
		return true;
	}
	private bool vouchersB_sempred(VouchersBContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 5);

		case 1: return Precpred(_ctx, 4);
		}
		return true;
	}
	private bool distributedQ_sempred(DistributedQContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(_ctx, 5);

		case 5: return Precpred(_ctx, 4);
		}
		return true;
	}
	private bool details_sempred(DetailsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 5);

		case 3: return Precpred(_ctx, 4);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3Q\x281\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x3\x2\x3\x2\x3\x2\x3\x2"+
		"\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3"+
		"\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2"+
		"\x5\x2\x94\n\x2\x3\x3\x3\x3\a\x3\x98\n\x3\f\x3\xE\x3\x9B\v\x3\x3\x4\x3"+
		"\x4\x3\x5\x3\x5\x3\x5\x5\x5\xA2\n\x5\x3\x6\x3\x6\x3\x6\a\x6\xA7\n\x6\f"+
		"\x6\xE\x6\xAA\v\x6\x3\a\x3\a\x3\a\x3\a\x3\a\a\a\xB1\n\a\f\a\xE\a\xB4\v"+
		"\a\x5\a\xB6\n\a\x3\b\x3\b\x3\b\x5\b\xBB\n\b\x3\b\x3\b\x5\b\xBF\n\b\x3"+
		"\t\x3\t\x3\t\x5\t\xC4\n\t\x3\n\x3\n\x5\n\xC8\n\n\x3\n\x5\n\xCB\n\n\x3"+
		"\n\x3\n\x3\n\x3\n\a\n\xD1\n\n\f\n\xE\n\xD4\v\n\x3\n\x3\n\x3\v\x3\v\x5"+
		"\v\xDA\n\v\x3\v\x5\v\xDD\n\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\r\x3\r\x3"+
		"\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x5\x10\xEF\n\x10\x3\x10"+
		"\x5\x10\xF2\n\x10\x3\x11\x3\x11\x5\x11\xF6\n\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x5\x11\xFD\n\x11\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\x103"+
		"\n\x12\x3\x13\x3\x13\x3\x13\x5\x13\x108\n\x13\x3\x14\x3\x14\x5\x14\x10C"+
		"\n\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15"+
		"\x3\x15\x3\x15\x5\x15\x119\n\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3"+
		"\x15\a\x15\x121\n\x15\f\x15\xE\x15\x124\v\x15\x3\x16\x5\x16\x127\n\x16"+
		"\x3\x16\x5\x16\x12A\n\x16\x3\x16\x5\x16\x12D\n\x16\x3\x16\x5\x16\x130"+
		"\n\x16\x3\x16\x5\x16\x133\n\x16\x3\x16\x5\x16\x136\n\x16\x3\x17\x3\x17"+
		"\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17\x140\n\x17\x3\x17\x3"+
		"\x17\x3\x17\x3\x17\x3\x17\x3\x17\a\x17\x148\n\x17\f\x17\xE\x17\x14B\v"+
		"\x17\x3\x18\x5\x18\x14E\n\x18\x3\x18\x5\x18\x151\n\x18\x3\x18\x5\x18\x154"+
		"\n\x18\x3\x18\x5\x18\x157\n\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3"+
		"\x19\x5\x19\x15F\n\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x166"+
		"\n\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x16B\n\x1A\x3\x1B\x3\x1B\x3\x1B\x5"+
		"\x1B\x170\n\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x176\n\x1C\x3\x1D\x3"+
		"\x1D\x3\x1E\x5\x1E\x17B\n\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x3!"+
		"\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x5!\x18D\n!\x3\"\x3\"\x5\"\x191\n"+
		"\"\x3\"\x5\"\x194\n\"\x3\"\x5\"\x197\n\"\x3#\x3#\x3#\x5#\x19C\n#\x3$\x3"+
		"$\x3$\x5$\x1A1\n$\x3$\x5$\x1A4\n$\x3$\x3$\x5$\x1A8\n$\x3%\x3%\x3%\x5%"+
		"\x1AD\n%\x3%\x5%\x1B0\n%\x3%\x3%\x5%\x1B4\n%\x3&\x3&\x3&\x5&\x1B9\n&\x3"+
		"\'\x3\'\x3\'\x5\'\x1BE\n\'\x3\'\x5\'\x1C1\n\'\x3(\x3(\x3(\x5(\x1C6\n("+
		"\x3(\x5(\x1C9\n(\x3(\x3(\x5(\x1CD\n(\x3)\x3)\x3)\x5)\x1D2\n)\x3)\x3)\x5"+
		")\x1D6\n)\x3*\x3*\x3*\x5*\x1DB\n*\x3*\x5*\x1DE\n*\x3*\x5*\x1E1\n*\x3+"+
		"\x3+\x3+\x5+\x1E6\n+\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x5,\x1F1\n,\x3"+
		"-\x3-\x5-\x1F5\n-\x3-\x5-\x1F8\n-\x3-\x5-\x1FB\n-\x3.\x3.\x3.\x5.\x200"+
		"\n.\x3/\x3/\x3/\x5/\x205\n/\x3/\x5/\x208\n/\x3/\x3/\x5/\x20C\n/\x3\x30"+
		"\x3\x30\x3\x30\x5\x30\x211\n\x30\x3\x30\x5\x30\x214\n\x30\x3\x30\x3\x30"+
		"\x5\x30\x218\n\x30\x3\x31\x3\x31\x3\x31\x5\x31\x21D\n\x31\x3\x32\x3\x32"+
		"\x3\x32\x5\x32\x222\n\x32\x3\x32\x5\x32\x225\n\x32\x3\x33\x3\x33\x3\x33"+
		"\x5\x33\x22A\n\x33\x3\x33\x5\x33\x22D\n\x33\x3\x33\x3\x33\x5\x33\x231"+
		"\n\x33\x3\x34\x3\x34\x3\x34\x5\x34\x236\n\x34\x3\x34\x5\x34\x239\n\x34"+
		"\x3\x34\x5\x34\x23C\n\x34\x3\x35\x3\x35\x3\x35\x5\x35\x241\n\x35\x3\x36"+
		"\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x5\x36\x24B\n\x36\x3"+
		"\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\a\x36\x253\n\x36\f\x36\xE\x36"+
		"\x256\v\x36\x3\x37\x5\x37\x259\n\x37\x3\x37\x5\x37\x25C\n\x37\x3\x37\x5"+
		"\x37\x25F\n\x37\x3\x37\x3\x37\x3\x37\x3\x37\x5\x37\x265\n\x37\x3\x38\x3"+
		"\x38\x3\x38\x3\x38\x5\x38\x26B\n\x38\x3\x39\x3\x39\x3\x39\x5\x39\x270"+
		"\n\x39\x3:\x3:\x3:\x5:\x275\n:\x3;\x3;\x3;\x5;\x27A\n;\x3<\x3<\x3<\x5"+
		"<\x27F\n<\x3<\x2\x2\x5(,j=\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10"+
		"\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2"+
		"(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42"+
		"\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2"+
		"\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2v\x2\x2\xF\x3\x2%-\x3"+
		"\x2\"$\x3\x2LM\x3\x2\n\f\x3\x2OP\x4\x2\x11\x11\x14\x14\x3\x2JK\x3\x2\x17"+
		"\x18\x4\x2\x6\x6\x19\x19\x3\x2\x1A\x1B\x3\x2?@\x3\x2\x41\x42\x3\x2./\x2CB"+
		"\x2\x93\x3\x2\x2\x2\x4\x95\x3\x2\x2\x2\x6\x9C\x3\x2\x2\x2\b\x9E\x3\x2"+
		"\x2\x2\n\xA3\x3\x2\x2\x2\f\xAB\x3\x2\x2\x2\xE\xBE\x3\x2\x2\x2\x10\xC3"+
		"\x3\x2\x2\x2\x12\xC5\x3\x2\x2\x2\x14\xD7\x3\x2\x2\x2\x16\xE1\x3\x2\x2"+
		"\x2\x18\xE4\x3\x2\x2\x2\x1A\xE6\x3\x2\x2\x2\x1C\xE9\x3\x2\x2\x2\x1E\xEC"+
		"\x3\x2\x2\x2 \xFC\x3\x2\x2\x2\"\x102\x3\x2\x2\x2$\x107\x3\x2\x2\x2&\x10B"+
		"\x3\x2\x2\x2(\x118\x3\x2\x2\x2*\x126\x3\x2\x2\x2,\x13F\x3\x2\x2\x2.\x14D"+
		"\x3\x2\x2\x2\x30\x15E\x3\x2\x2\x2\x32\x16A\x3\x2\x2\x2\x34\x16F\x3\x2"+
		"\x2\x2\x36\x175\x3\x2\x2\x2\x38\x177\x3\x2\x2\x2:\x17A\x3\x2\x2\x2<\x17E"+
		"\x3\x2\x2\x2>\x180\x3\x2\x2\x2@\x18C\x3\x2\x2\x2\x42\x18E\x3\x2\x2\x2"+
		"\x44\x198\x3\x2\x2\x2\x46\x19D\x3\x2\x2\x2H\x1A9\x3\x2\x2\x2J\x1B5\x3"+
		"\x2\x2\x2L\x1BA\x3\x2\x2\x2N\x1C2\x3\x2\x2\x2P\x1CE\x3\x2\x2\x2R\x1D7"+
		"\x3\x2\x2\x2T\x1E2\x3\x2\x2\x2V\x1F0\x3\x2\x2\x2X\x1F2\x3\x2\x2\x2Z\x1FC"+
		"\x3\x2\x2\x2\\\x201\x3\x2\x2\x2^\x20D\x3\x2\x2\x2`\x219\x3\x2\x2\x2\x62"+
		"\x21E\x3\x2\x2\x2\x64\x226\x3\x2\x2\x2\x66\x232\x3\x2\x2\x2h\x23D\x3\x2"+
		"\x2\x2j\x24A\x3\x2\x2\x2l\x258\x3\x2\x2\x2n\x26A\x3\x2\x2\x2p\x26C\x3"+
		"\x2\x2\x2r\x271\x3\x2\x2\x2t\x276\x3\x2\x2\x2v\x27B\x3\x2\x2\x2xy\x5\x4"+
		"\x3\x2yz\a\x2\x2\x3z\x94\x3\x2\x2\x2{|\x5&\x14\x2|}\a\x2\x2\x3}\x94\x3"+
		"\x2\x2\x2~\x7F\x5\x1C\xF\x2\x7F\x80\a\x2\x2\x3\x80\x94\x3\x2\x2\x2\x81"+
		"\x82\x5\b\x5\x2\x82\x83\a\x2\x2\x3\x83\x94\x3\x2\x2\x2\x84\x85\x5\xE\b"+
		"\x2\x85\x86\a\x2\x2\x3\x86\x94\x3\x2\x2\x2\x87\x88\x5@!\x2\x88\x89\a\x2"+
		"\x2\x3\x89\x94\x3\x2\x2\x2\x8A\x8B\x5V,\x2\x8B\x8C\a\x2\x2\x3\x8C\x94"+
		"\x3\x2\x2\x2\x8D\x8E\x5n\x38\x2\x8E\x8F\a\x2\x2\x3\x8F\x94\x3\x2\x2\x2"+
		"\x90\x91\x5\x6\x4\x2\x91\x92\a\x2\x2\x3\x92\x94\x3\x2\x2\x2\x93x\x3\x2"+
		"\x2\x2\x93{\x3\x2\x2\x2\x93~\x3\x2\x2\x2\x93\x81\x3\x2\x2\x2\x93\x84\x3"+
		"\x2\x2\x2\x93\x87\x3\x2\x2\x2\x93\x8A\x3\x2\x2\x2\x93\x8D\x3\x2\x2\x2"+
		"\x93\x90\x3\x2\x2\x2\x94\x3\x3\x2\x2\x2\x95\x99\aG\x2\x2\x96\x98\aI\x2"+
		"\x2\x97\x96\x3\x2\x2\x2\x98\x9B\x3\x2\x2\x2\x99\x97\x3\x2\x2\x2\x99\x9A"+
		"\x3\x2\x2\x2\x9A\x5\x3\x2\x2\x2\x9B\x99\x3\x2\x2\x2\x9C\x9D\t\x2\x2\x2"+
		"\x9D\a\x3\x2\x2\x2\x9E\x9F\a\x3\x2\x2\x9F\xA1\x5\x10\t\x2\xA0\xA2\x5\x30"+
		"\x19\x2\xA1\xA0\x3\x2\x2\x2\xA1\xA2\x3\x2\x2\x2\xA2\t\x3\x2\x2\x2\xA3"+
		"\xA8\x5\f\a\x2\xA4\xA5\a\x4\x2\x2\xA5\xA7\x5\f\a\x2\xA6\xA4\x3\x2\x2\x2"+
		"\xA7\xAA\x3\x2\x2\x2\xA8\xA6\x3\x2\x2\x2\xA8\xA9\x3\x2\x2\x2\xA9\v\x3"+
		"\x2\x2\x2\xAA\xA8\x3\x2\x2\x2\xAB\xB5\t\x3\x2\x2\xAC\xB2\a\x5\x2\x2\xAD"+
		"\xAE\aI\x2\x2\xAE\xAF\a\x6\x2\x2\xAF\xB1\aI\x2\x2\xB0\xAD\x3\x2\x2\x2"+
		"\xB1\xB4\x3\x2\x2\x2\xB2\xB0\x3\x2\x2\x2\xB2\xB3\x3\x2\x2\x2\xB3\xB6\x3"+
		"\x2\x2\x2\xB4\xB2\x3\x2\x2\x2\xB5\xAC\x3\x2\x2\x2\xB5\xB6\x3\x2\x2\x2"+
		"\xB6\r\x3\x2\x2\x2\xB7\xB8\a\a\x2\x2\xB8\xBA\x5\x10\t\x2\xB9\xBB\x5\x30"+
		"\x19\x2\xBA\xB9\x3\x2\x2\x2\xBA\xBB\x3\x2\x2\x2\xBB\xBF\x3\x2\x2\x2\xBC"+
		"\xBD\a\a\x2\x2\xBD\xBF\x5\x1C\xF\x2\xBE\xB7\x3\x2\x2\x2\xBE\xBC\x3\x2"+
		"\x2\x2\xBF\xF\x3\x2\x2\x2\xC0\xC4\x5\x12\n\x2\xC1\xC4\x5\x14\v\x2\xC2"+
		"\xC4\x5\x16\f\x2\xC3\xC0\x3\x2\x2\x2\xC3\xC1\x3\x2\x2\x2\xC3\xC2\x3\x2"+
		"\x2\x2\xC4\x11\x3\x2\x2\x2\xC5\xC7\x5\x18\r\x2\xC6\xC8\x5\x1A\xE\x2\xC7"+
		"\xC6\x3\x2\x2\x2\xC7\xC8\x3\x2\x2\x2\xC8\xCA\x3\x2\x2\x2\xC9\xCB\aH\x2"+
		"\x2\xCA\xC9\x3\x2\x2\x2\xCA\xCB\x3\x2\x2\x2\xCB\xCC\x3\x2\x2\x2\xCC\xCD"+
		"\a\b\x2\x2\xCD\xD2\x5\x10\t\x2\xCE\xCF\a\t\x2\x2\xCF\xD1\x5\x10\t\x2\xD0"+
		"\xCE\x3\x2\x2\x2\xD1\xD4\x3\x2\x2\x2\xD2\xD0\x3\x2\x2\x2\xD2\xD3\x3\x2"+
		"\x2\x2\xD3\xD5\x3\x2\x2\x2\xD4\xD2\x3\x2\x2\x2\xD5\xD6\a\x4\x2\x2\xD6"+
		"\x13\x3\x2\x2\x2\xD7\xD9\x5\x18\r\x2\xD8\xDA\x5\x1A\xE\x2\xD9\xD8\x3\x2"+
		"\x2\x2\xD9\xDA\x3\x2\x2\x2\xDA\xDC\x3\x2\x2\x2\xDB\xDD\aH\x2\x2\xDC\xDB"+
		"\x3\x2\x2\x2\xDC\xDD\x3\x2\x2\x2\xDD\xDE\x3\x2\x2\x2\xDE\xDF\a\x5\x2\x2"+
		"\xDF\xE0\x5\x1C\xF\x2\xE0\x15\x3\x2\x2\x2\xE1\xE2\x5\x18\r\x2\xE2\xE3"+
		"\a\x4\x2\x2\xE3\x17\x3\x2\x2\x2\xE4\xE5\aG\x2\x2\xE5\x19\x3\x2\x2\x2\xE6"+
		"\xE7\aN\x2\x2\xE7\xE8\t\x4\x2\x2\xE8\x1B\x3\x2\x2\x2\xE9\xEA\x5\"\x12"+
		"\x2\xEA\xEB\x5\x1E\x10\x2\xEB\x1D\x3\x2\x2\x2\xEC\xEE\t\x5\x2\x2\xED\xEF"+
		"\a:\x2\x2\xEE\xED\x3\x2\x2\x2\xEE\xEF\x3\x2\x2\x2\xEF\xF1\x3\x2\x2\x2"+
		"\xF0\xF2\x5 \x11\x2\xF1\xF0\x3\x2\x2\x2\xF1\xF2\x3\x2\x2\x2\xF2\x1F\x3"+
		"\x2\x2\x2\xF3\xF5\a\r\x2\x2\xF4\xF6\a\xE\x2\x2\xF5\xF4\x3\x2\x2\x2\xF5"+
		"\xF6\x3\x2\x2\x2\xF6\xFD\x3\x2\x2\x2\xF7\xF8\a\r\x2\x2\xF8\xF9\a\xF\x2"+
		"\x2\xF9\xFA\x5\x32\x1A\x2\xFA\xFB\a\x10\x2\x2\xFB\xFD\x3\x2\x2\x2\xFC"+
		"\xF3\x3\x2\x2\x2\xFC\xF7\x3\x2\x2\x2\xFD!\x3\x2\x2\x2\xFE\xFF\x5&\x14"+
		"\x2\xFF\x100\x5$\x13\x2\x100\x103\x3\x2\x2\x2\x101\x103\x5*\x16\x2\x102"+
		"\xFE\x3\x2\x2\x2\x102\x101\x3\x2\x2\x2\x103#\x3\x2\x2\x2\x104\x108\a\x11"+
		"\x2\x2\x105\x106\a\x5\x2\x2\x106\x108\x5,\x17\x2\x107\x104\x3\x2\x2\x2"+
		"\x107\x105\x3\x2\x2\x2\x108%\x3\x2\x2\x2\x109\x10C\x5(\x15\x2\x10A\x10C"+
		"\x5*\x16\x2\x10B\x109\x3\x2\x2\x2\x10B\x10A\x3\x2\x2\x2\x10C\'\x3\x2\x2"+
		"\x2\x10D\x10E\b\x15\x1\x2\x10E\x10F\t\x6\x2\x2\x10F\x119\x5(\x15\x5\x110"+
		"\x111\a\x12\x2\x2\x111\x112\x5*\x16\x2\x112\x113\a\x13\x2\x2\x113\x119"+
		"\x3\x2\x2\x2\x114\x115\a\x12\x2\x2\x115\x116\x5(\x15\x2\x116\x117\a\x13"+
		"\x2\x2\x117\x119\x3\x2\x2\x2\x118\x10D\x3\x2\x2\x2\x118\x110\x3\x2\x2"+
		"\x2\x118\x114\x3\x2\x2\x2\x119\x122\x3\x2\x2\x2\x11A\x11B\f\a\x2\x2\x11B"+
		"\x11C\aN\x2\x2\x11C\x121\x5(\x15\b\x11D\x11E\f\x6\x2\x2\x11E\x11F\t\x6"+
		"\x2\x2\x11F\x121\x5(\x15\a\x120\x11A\x3\x2\x2\x2\x120\x11D\x3\x2\x2\x2"+
		"\x121\x124\x3\x2\x2\x2\x122\x120\x3\x2\x2\x2\x122\x123\x3\x2\x2\x2\x123"+
		")\x3\x2\x2\x2\x124\x122\x3\x2\x2\x2\x125\x127\x5,\x17\x2\x126\x125\x3"+
		"\x2\x2\x2\x126\x127\x3\x2\x2\x2\x127\x129\x3\x2\x2\x2\x128\x12A\t\a\x2"+
		"\x2\x129\x128\x3\x2\x2\x2\x129\x12A\x3\x2\x2\x2\x12A\x12C\x3\x2\x2\x2"+
		"\x12B\x12D\x5\x30\x19\x2\x12C\x12B\x3\x2\x2\x2\x12C\x12D\x3\x2\x2\x2\x12D"+
		"\x12F\x3\x2\x2\x2\x12E\x130\a\x45\x2\x2\x12F\x12E\x3\x2\x2\x2\x12F\x130"+
		"\x3\x2\x2\x2\x130\x132\x3\x2\x2\x2\x131\x133\a\x46\x2\x2\x132\x131\x3"+
		"\x2\x2\x2\x132\x133\x3\x2\x2\x2\x133\x135\x3\x2\x2\x2\x134\x136\a\x44"+
		"\x2\x2\x135\x134\x3\x2\x2\x2\x135\x136\x3\x2\x2\x2\x136+\x3\x2\x2\x2\x137"+
		"\x138\b\x17\x1\x2\x138\x139\t\x6\x2\x2\x139\x140\x5,\x17\x5\x13A\x140"+
		"\x5.\x18\x2\x13B\x13C\a\x15\x2\x2\x13C\x13D\x5,\x17\x2\x13D\x13E\a\x16"+
		"\x2\x2\x13E\x140\x3\x2\x2\x2\x13F\x137\x3\x2\x2\x2\x13F\x13A\x3\x2\x2"+
		"\x2\x13F\x13B\x3\x2\x2\x2\x140\x149\x3\x2\x2\x2\x141\x142\f\a\x2\x2\x142"+
		"\x143\aN\x2\x2\x143\x148\x5,\x17\b\x144\x145\f\x6\x2\x2\x145\x146\t\x6"+
		"\x2\x2\x146\x148\x5,\x17\a\x147\x141\x3\x2\x2\x2\x147\x144\x3\x2\x2\x2"+
		"\x148\x14B\x3\x2\x2\x2\x149\x147\x3\x2\x2\x2\x149\x14A\x3\x2\x2\x2\x14A"+
		"-\x3\x2\x2\x2\x14B\x149\x3\x2\x2\x2\x14C\x14E\t\b\x2\x2\x14D\x14C\x3\x2"+
		"\x2\x2\x14D\x14E\x3\x2\x2\x2\x14E\x150\x3\x2\x2\x2\x14F\x151\aI\x2\x2"+
		"\x150\x14F\x3\x2\x2\x2\x150\x151\x3\x2\x2\x2\x151\x153\x3\x2\x2\x2\x152"+
		"\x154\aH\x2\x2\x153\x152\x3\x2\x2\x2\x153\x154\x3\x2\x2\x2\x154\x156\x3"+
		"\x2\x2\x2\x155\x157\t\t\x2\x2\x156\x155\x3\x2\x2\x2\x156\x157\x3\x2\x2"+
		"\x2\x157/\x3\x2\x2\x2\x158\x15F\a\xE\x2\x2\x159\x15F\x5\x32\x1A\x2\x15A"+
		"\x15B\a\xF\x2\x2\x15B\x15C\x5\x32\x1A\x2\x15C\x15D\a\x10\x2\x2\x15D\x15F"+
		"\x3\x2\x2\x2\x15E\x158\x3\x2\x2\x2\x15E\x159\x3\x2\x2\x2\x15E\x15A\x3"+
		"\x2\x2\x2\x15F\x31\x3\x2\x2\x2\x160\x16B\a<\x2\x2\x161\x16B\a=\x2\x2\x162"+
		"\x163\x5\x36\x1C\x2\x163\x165\t\n\x2\x2\x164\x166\x5\x36\x1C\x2\x165\x164"+
		"\x3\x2\x2\x2\x165\x166\x3\x2\x2\x2\x166\x16B\x3\x2\x2\x2\x167\x168\t\n"+
		"\x2\x2\x168\x16B\x5\x36\x1C\x2\x169\x16B\x5\x36\x1C\x2\x16A\x160\x3\x2"+
		"\x2\x2\x16A\x161\x3\x2\x2\x2\x16A\x162\x3\x2\x2\x2\x16A\x167\x3\x2\x2"+
		"\x2\x16A\x169\x3\x2\x2\x2\x16B\x33\x3\x2\x2\x2\x16C\x170\a<\x2\x2\x16D"+
		"\x170\a\xE\x2\x2\x16E\x170\x5\x36\x1C\x2\x16F\x16C\x3\x2\x2\x2\x16F\x16D"+
		"\x3\x2\x2\x2\x16F\x16E\x3\x2\x2\x2\x170\x35\x3\x2\x2\x2\x171\x176\x5\x38"+
		"\x1D\x2\x172\x176\x5:\x1E\x2\x173\x176\x5<\x1F\x2\x174\x176\x5> \x2\x175"+
		"\x171\x3\x2\x2\x2\x175\x172\x3\x2\x2\x2\x175\x173\x3\x2\x2\x2\x175\x174"+
		"\x3\x2\x2\x2\x176\x37\x3\x2\x2\x2\x177\x178\a>\x2\x2\x178\x39\x3\x2\x2"+
		"\x2\x179\x17B\t\v\x2\x2\x17A\x179\x3\x2\x2\x2\x17A\x17B\x3\x2\x2\x2\x17B"+
		"\x17C\x3\x2\x2\x2\x17C\x17D\t\f\x2\x2\x17D;\x3\x2\x2\x2\x17E\x17F\a\x43"+
		"\x2\x2\x17F=\x3\x2\x2\x2\x180\x181\t\r\x2\x2\x181?\x3\x2\x2\x2\x182\x18D"+
		"\x5\x42\"\x2\x183\x18D\x5\x44#\x2\x184\x18D\x5\x46$\x2\x185\x18D\x5H%"+
		"\x2\x186\x18D\x5J&\x2\x187\x18D\x5L\'\x2\x188\x18D\x5N(\x2\x189\x18D\x5"+
		"P)\x2\x18A\x18D\x5R*\x2\x18B\x18D\x5T+\x2\x18C\x182\x3\x2\x2\x2\x18C\x183"+
		"\x3\x2\x2\x2\x18C\x184\x3\x2\x2\x2\x18C\x185\x3\x2\x2\x2\x18C\x186\x3"+
		"\x2\x2\x2\x18C\x187\x3\x2\x2\x2\x18C\x188\x3\x2\x2\x2\x18C\x189\x3\x2"+
		"\x2\x2\x18C\x18A\x3\x2\x2\x2\x18C\x18B\x3\x2\x2\x2\x18D\x41\x3\x2\x2\x2"+
		"\x18E\x190\a\x1C\x2\x2\x18F\x191\t\xE\x2\x2\x190\x18F\x3\x2\x2\x2\x190"+
		"\x191\x3\x2\x2\x2\x191\x193\x3\x2\x2\x2\x192\x194\x5\x34\x1B\x2\x193\x192"+
		"\x3\x2\x2\x2\x193\x194\x3\x2\x2\x2\x194\x196\x3\x2\x2\x2\x195\x197\x5"+
		"j\x36\x2\x196\x195\x3\x2\x2\x2\x196\x197\x3\x2\x2\x2\x197\x43\x3\x2\x2"+
		"\x2\x198\x199\a\x1C\x2\x2\x199\x19B\a\x30\x2\x2\x19A\x19C\x5j\x36\x2\x19B"+
		"\x19A\x3\x2\x2\x2\x19B\x19C\x3\x2\x2\x2\x19C\x45\x3\x2\x2\x2\x19D\x19E"+
		"\a\x1C\x2\x2\x19E\x1A0\a\x31\x2\x2\x19F\x1A1\x5j\x36\x2\x1A0\x19F\x3\x2"+
		"\x2\x2\x1A0\x1A1\x3\x2\x2\x2\x1A1\x1A3\x3\x2\x2\x2\x1A2\x1A4\x5\x30\x19"+
		"\x2\x1A3\x1A2\x3\x2\x2\x2\x1A3\x1A4\x3\x2\x2\x2\x1A4\x1A7\x3\x2\x2\x2"+
		"\x1A5\x1A6\a\x5\x2\x2\x1A6\x1A8\x5&\x14\x2\x1A7\x1A5\x3\x2\x2\x2\x1A7"+
		"\x1A8\x3\x2\x2\x2\x1A8G\x3\x2\x2\x2\x1A9\x1AA\a\x1C\x2\x2\x1AA\x1AC\a"+
		"\x32\x2\x2\x1AB\x1AD\x5j\x36\x2\x1AC\x1AB\x3\x2\x2\x2\x1AC\x1AD\x3\x2"+
		"\x2\x2\x1AD\x1AF\x3\x2\x2\x2\x1AE\x1B0\x5\x30\x19\x2\x1AF\x1AE\x3\x2\x2"+
		"\x2\x1AF\x1B0\x3\x2\x2\x2\x1B0\x1B3\x3\x2\x2\x2\x1B1\x1B2\a\x5\x2\x2\x1B2"+
		"\x1B4\x5&\x14\x2\x1B3\x1B1\x3\x2\x2\x2\x1B3\x1B4\x3\x2\x2\x2\x1B4I\x3"+
		"\x2\x2\x2\x1B5\x1B6\a\x1C\x2\x2\x1B6\x1B8\a\x33\x2\x2\x1B7\x1B9\x5j\x36"+
		"\x2\x1B8\x1B7\x3\x2\x2\x2\x1B8\x1B9\x3\x2\x2\x2\x1B9K\x3\x2\x2\x2\x1BA"+
		"\x1BB\a\x1C\x2\x2\x1BB\x1BD\a\x34\x2\x2\x1BC\x1BE\x5j\x36\x2\x1BD\x1BC"+
		"\x3\x2\x2\x2\x1BD\x1BE\x3\x2\x2\x2\x1BE\x1C0\x3\x2\x2\x2\x1BF\x1C1\x5"+
		"\x30\x19\x2\x1C0\x1BF\x3\x2\x2\x2\x1C0\x1C1\x3\x2\x2\x2\x1C1M\x3\x2\x2"+
		"\x2\x1C2\x1C3\a\x1C\x2\x2\x1C3\x1C5\a\x36\x2\x2\x1C4\x1C6\x5j\x36\x2\x1C5"+
		"\x1C4\x3\x2\x2\x2\x1C5\x1C6\x3\x2\x2\x2\x1C6\x1C8\x3\x2\x2\x2\x1C7\x1C9"+
		"\x5\x30\x19\x2\x1C8\x1C7\x3\x2\x2\x2\x1C8\x1C9\x3\x2\x2\x2\x1C9\x1CC\x3"+
		"\x2\x2\x2\x1CA\x1CB\a\x5\x2\x2\x1CB\x1CD\x5&\x14\x2\x1CC\x1CA\x3\x2\x2"+
		"\x2\x1CC\x1CD\x3\x2\x2\x2\x1CDO\x3\x2\x2\x2\x1CE\x1CF\a\x1C\x2\x2\x1CF"+
		"\x1D1\a\x35\x2\x2\x1D0\x1D2\x5j\x36\x2\x1D1\x1D0\x3\x2\x2\x2\x1D1\x1D2"+
		"\x3\x2\x2\x2\x1D2\x1D5\x3\x2\x2\x2\x1D3\x1D4\a\x5\x2\x2\x1D4\x1D6\x5&"+
		"\x14\x2\x1D5\x1D3\x3\x2\x2\x2\x1D5\x1D6\x3\x2\x2\x2\x1D6Q\x3\x2\x2\x2"+
		"\x1D7\x1D8\a\x1C\x2\x2\x1D8\x1DA\a\x37\x2\x2\x1D9\x1DB\a\x38\x2\x2\x1DA"+
		"\x1D9\x3\x2\x2\x2\x1DA\x1DB\x3\x2\x2\x2\x1DB\x1DD\x3\x2\x2\x2\x1DC\x1DE"+
		"\x5j\x36\x2\x1DD\x1DC\x3\x2\x2\x2\x1DD\x1DE\x3\x2\x2\x2\x1DE\x1E0\x3\x2"+
		"\x2\x2\x1DF\x1E1\x5\x30\x19\x2\x1E0\x1DF\x3\x2\x2\x2\x1E0\x1E1\x3\x2\x2"+
		"\x2\x1E1S\x3\x2\x2\x2\x1E2\x1E3\a\x1C\x2\x2\x1E3\x1E5\a\x39\x2\x2\x1E4"+
		"\x1E6\x5j\x36\x2\x1E5\x1E4\x3\x2\x2\x2\x1E5\x1E6\x3\x2\x2\x2\x1E6U\x3"+
		"\x2\x2\x2\x1E7\x1F1\x5X-\x2\x1E8\x1F1\x5Z.\x2\x1E9\x1F1\x5\\/\x2\x1EA"+
		"\x1F1\x5^\x30\x2\x1EB\x1F1\x5`\x31\x2\x1EC\x1F1\x5\x62\x32\x2\x1ED\x1F1"+
		"\x5\x64\x33\x2\x1EE\x1F1\x5\x66\x34\x2\x1EF\x1F1\x5h\x35\x2\x1F0\x1E7"+
		"\x3\x2\x2\x2\x1F0\x1E8\x3\x2\x2\x2\x1F0\x1E9\x3\x2\x2\x2\x1F0\x1EA\x3"+
		"\x2\x2\x2\x1F0\x1EB\x3\x2\x2\x2\x1F0\x1EC\x3\x2\x2\x2\x1F0\x1ED\x3\x2"+
		"\x2\x2\x1F0\x1EE\x3\x2\x2\x2\x1F0\x1EF\x3\x2\x2\x2\x1F1W\x3\x2\x2\x2\x1F2"+
		"\x1F4\a\x1D\x2\x2\x1F3\x1F5\t\xE\x2\x2\x1F4\x1F3\x3\x2\x2\x2\x1F4\x1F5"+
		"\x3\x2\x2\x2\x1F5\x1F7\x3\x2\x2\x2\x1F6\x1F8\x5\x34\x1B\x2\x1F7\x1F6\x3"+
		"\x2\x2\x2\x1F7\x1F8\x3\x2\x2\x2\x1F8\x1FA\x3\x2\x2\x2\x1F9\x1FB\x5j\x36"+
		"\x2\x1FA\x1F9\x3\x2\x2\x2\x1FA\x1FB\x3\x2\x2\x2\x1FBY\x3\x2\x2\x2\x1FC"+
		"\x1FD\a\x1D\x2\x2\x1FD\x1FF\a\x30\x2\x2\x1FE\x200\x5j\x36\x2\x1FF\x1FE"+
		"\x3\x2\x2\x2\x1FF\x200\x3\x2\x2\x2\x200[\x3\x2\x2\x2\x201\x202\a\x1D\x2"+
		"\x2\x202\x204\a\x31\x2\x2\x203\x205\x5j\x36\x2\x204\x203\x3\x2\x2\x2\x204"+
		"\x205\x3\x2\x2\x2\x205\x207\x3\x2\x2\x2\x206\x208\x5\x30\x19\x2\x207\x206"+
		"\x3\x2\x2\x2\x207\x208\x3\x2\x2\x2\x208\x20B\x3\x2\x2\x2\x209\x20A\a\x5"+
		"\x2\x2\x20A\x20C\x5&\x14\x2\x20B\x209\x3\x2\x2\x2\x20B\x20C\x3\x2\x2\x2"+
		"\x20C]\x3\x2\x2\x2\x20D\x20E\a\x1D\x2\x2\x20E\x210\a\x32\x2\x2\x20F\x211"+
		"\x5j\x36\x2\x210\x20F\x3\x2\x2\x2\x210\x211\x3\x2\x2\x2\x211\x213\x3\x2"+
		"\x2\x2\x212\x214\x5\x30\x19\x2\x213\x212\x3\x2\x2\x2\x213\x214\x3\x2\x2"+
		"\x2\x214\x217\x3\x2\x2\x2\x215\x216\a\x5\x2\x2\x216\x218\x5&\x14\x2\x217"+
		"\x215\x3\x2\x2\x2\x217\x218\x3\x2\x2\x2\x218_\x3\x2\x2\x2\x219\x21A\a"+
		"\x1D\x2\x2\x21A\x21C\a\x33\x2\x2\x21B\x21D\x5j\x36\x2\x21C\x21B\x3\x2"+
		"\x2\x2\x21C\x21D\x3\x2\x2\x2\x21D\x61\x3\x2\x2\x2\x21E\x21F\a\x1D\x2\x2"+
		"\x21F\x221\a\x34\x2\x2\x220\x222\x5j\x36\x2\x221\x220\x3\x2\x2\x2\x221"+
		"\x222\x3\x2\x2\x2\x222\x224\x3\x2\x2\x2\x223\x225\x5\x30\x19\x2\x224\x223"+
		"\x3\x2\x2\x2\x224\x225\x3\x2\x2\x2\x225\x63\x3\x2\x2\x2\x226\x227\a\x1D"+
		"\x2\x2\x227\x229\a\x36\x2\x2\x228\x22A\x5j\x36\x2\x229\x228\x3\x2\x2\x2"+
		"\x229\x22A\x3\x2\x2\x2\x22A\x22C\x3\x2\x2\x2\x22B\x22D\x5\x30\x19\x2\x22C"+
		"\x22B\x3\x2\x2\x2\x22C\x22D\x3\x2\x2\x2\x22D\x230\x3\x2\x2\x2\x22E\x22F"+
		"\a\x5\x2\x2\x22F\x231\x5&\x14\x2\x230\x22E\x3\x2\x2\x2\x230\x231\x3\x2"+
		"\x2\x2\x231\x65\x3\x2\x2\x2\x232\x233\a\x1D\x2\x2\x233\x235\a\x37\x2\x2"+
		"\x234\x236\a\x38\x2\x2\x235\x234\x3\x2\x2\x2\x235\x236\x3\x2\x2\x2\x236"+
		"\x238\x3\x2\x2\x2\x237\x239\x5j\x36\x2\x238\x237\x3\x2\x2\x2\x238\x239"+
		"\x3\x2\x2\x2\x239\x23B\x3\x2\x2\x2\x23A\x23C\x5\x30\x19\x2\x23B\x23A\x3"+
		"\x2\x2\x2\x23B\x23C\x3\x2\x2\x2\x23Cg\x3\x2\x2\x2\x23D\x23E\a\x1D\x2\x2"+
		"\x23E\x240\a\x39\x2\x2\x23F\x241\x5j\x36\x2\x240\x23F\x3\x2\x2\x2\x240"+
		"\x241\x3\x2\x2\x2\x241i\x3\x2\x2\x2\x242\x243\b\x36\x1\x2\x243\x244\t"+
		"\x6\x2\x2\x244\x24B\x5j\x36\x5\x245\x24B\x5l\x37\x2\x246\x247\a\x15\x2"+
		"\x2\x247\x248\x5j\x36\x2\x248\x249\a\x16\x2\x2\x249\x24B\x3\x2\x2\x2\x24A"+
		"\x242\x3\x2\x2\x2\x24A\x245\x3\x2\x2\x2\x24A\x246\x3\x2\x2\x2\x24B\x254"+
		"\x3\x2\x2\x2\x24C\x24D\f\a\x2\x2\x24D\x24E\aN\x2\x2\x24E\x253\x5j\x36"+
		"\b\x24F\x250\f\x6\x2\x2\x250\x251\t\x6\x2\x2\x251\x253\x5j\x36\a\x252"+
		"\x24C\x3\x2\x2\x2\x252\x24F\x3\x2\x2\x2\x253\x256\x3\x2\x2\x2\x254\x252"+
		"\x3\x2\x2\x2\x254\x255\x3\x2\x2\x2\x255k\x3\x2\x2\x2\x256\x254\x3\x2\x2"+
		"\x2\x257\x259\a;\x2\x2\x258\x257\x3\x2\x2\x2\x258\x259\x3\x2\x2\x2\x259"+
		"\x25B\x3\x2\x2\x2\x25A\x25C\aG\x2\x2\x25B\x25A\x3\x2\x2\x2\x25B\x25C\x3"+
		"\x2\x2\x2\x25C\x25E\x3\x2\x2\x2\x25D\x25F\a\x46\x2\x2\x25E\x25D\x3\x2"+
		"\x2\x2\x25E\x25F\x3\x2\x2\x2\x25F\x264\x3\x2\x2\x2\x260\x261\a\x1E\x2"+
		"\x2\x261\x262\x5\x32\x1A\x2\x262\x263\a\x1F\x2\x2\x263\x265\x3\x2\x2\x2"+
		"\x264\x260\x3\x2\x2\x2\x264\x265\x3\x2\x2\x2\x265m\x3\x2\x2\x2\x266\x26B"+
		"\x5p\x39\x2\x267\x26B\x5r:\x2\x268\x26B\x5t;\x2\x269\x26B\x5v<\x2\x26A"+
		"\x266\x3\x2\x2\x2\x26A\x267\x3\x2\x2\x2\x26A\x268\x3\x2\x2\x2\x26A\x269"+
		"\x3\x2\x2\x2\x26Bo\x3\x2\x2\x2\x26C\x26D\a \x2\x2\x26D\x26F\a\x35\x2\x2"+
		"\x26E\x270\x5\x30\x19\x2\x26F\x26E\x3\x2\x2\x2\x26F\x270\x3\x2\x2\x2\x270"+
		"q\x3\x2\x2\x2\x271\x272\a \x2\x2\x272\x274\a\x37\x2\x2\x273\x275\x5\x30"+
		"\x19\x2\x274\x273\x3\x2\x2\x2\x274\x275\x3\x2\x2\x2\x275s\x3\x2\x2\x2"+
		"\x276\x277\a!\x2\x2\x277\x279\a\x35\x2\x2\x278\x27A\x5\x30\x19\x2\x279"+
		"\x278\x3\x2\x2\x2\x279\x27A\x3\x2\x2\x2\x27Au\x3\x2\x2\x2\x27B\x27C\a"+
		"!\x2\x2\x27C\x27E\a\x37\x2\x2\x27D\x27F\x5\x30\x19\x2\x27E\x27D\x3\x2"+
		"\x2\x2\x27E\x27F\x3\x2\x2\x2\x27Fw\x3\x2\x2\x2\x65\x93\x99\xA1\xA8\xB2"+
		"\xB5\xBA\xBE\xC3\xC7\xCA\xD2\xD9\xDC\xEE\xF1\xF5\xFC\x102\x107\x10B\x118"+
		"\x120\x122\x126\x129\x12C\x12F\x132\x135\x13F\x147\x149\x14D\x150\x153"+
		"\x156\x15E\x165\x16A\x16F\x175\x17A\x18C\x190\x193\x196\x19B\x1A0\x1A3"+
		"\x1A7\x1AC\x1AF\x1B3\x1B8\x1BD\x1C0\x1C5\x1C8\x1CC\x1D1\x1D5\x1DA\x1DD"+
		"\x1E0\x1E5\x1F0\x1F4\x1F7\x1FA\x1FF\x204\x207\x20B\x210\x213\x217\x21C"+
		"\x221\x224\x229\x22C\x230\x235\x238\x23B\x240\x24A\x252\x254\x258\x25B"+
		"\x25E\x264\x26A\x26F\x274\x279\x27E";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace AccountingServer.Shell.Parsing
